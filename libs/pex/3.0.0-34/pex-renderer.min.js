!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("fs")):"function"==typeof define&&define.amd?define(["fs"],t):"object"==typeof exports?exports.pexRenderer=t(require("fs")):e.pexRenderer=t(e.fs)}(window,function(e){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=26)}([function(e,t,n){var o;
/** @license
 * JS Signals <http://millermedeiros.github.com/js-signals/>
 * Released under the MIT license
 * Author: Miller Medeiros
 * Version: 1.0.0 - Build: 268 (2012/11/29 05:48 PM)
 */
/** @license
 * JS Signals <http://millermedeiros.github.com/js-signals/>
 * Released under the MIT license
 * Author: Miller Medeiros
 * Version: 1.0.0 - Build: 268 (2012/11/29 05:48 PM)
 */
!function(i){function r(e,t,n,o,i){this._listener=t,this._isOnce=n,this.context=o,this._signal=e,this._priority=i||0}function a(e,t){if("function"!=typeof e)throw new Error("listener is a required param of {fn}() and should be a Function.".replace("{fn}",t))}function s(){this._bindings=[],this._prevParams=null;var e=this;this.dispatch=function(){s.prototype.dispatch.apply(e,arguments)}}r.prototype={active:!0,params:null,execute:function(e){var t,n;return this.active&&this._listener&&(n=this.params?this.params.concat(e):e,t=this._listener.apply(this.context,n),this._isOnce&&this.detach()),t},detach:function(){return this.isBound()?this._signal.remove(this._listener,this.context):null},isBound:function(){return!!this._signal&&!!this._listener},isOnce:function(){return this._isOnce},getListener:function(){return this._listener},getSignal:function(){return this._signal},_destroy:function(){delete this._signal,delete this._listener,delete this.context},toString:function(){return"[SignalBinding isOnce:"+this._isOnce+", isBound:"+this.isBound()+", active:"+this.active+"]"}},s.prototype={VERSION:"1.0.0",memorize:!1,_shouldPropagate:!0,active:!0,_registerListener:function(e,t,n,o){var i,a=this._indexOfListener(e,n);if(-1!==a){if((i=this._bindings[a]).isOnce()!==t)throw new Error("You cannot add"+(t?"":"Once")+"() then add"+(t?"Once":"")+"() the same listener without removing the relationship first.")}else i=new r(this,e,t,n,o),this._addBinding(i);return this.memorize&&this._prevParams&&i.execute(this._prevParams),i},_addBinding:function(e){var t=this._bindings.length;do{--t}while(this._bindings[t]&&e._priority<=this._bindings[t]._priority);this._bindings.splice(t+1,0,e)},_indexOfListener:function(e,t){for(var n,o=this._bindings.length;o--;)if((n=this._bindings[o])._listener===e&&n.context===t)return o;return-1},has:function(e,t){return-1!==this._indexOfListener(e,t)},add:function(e,t,n){return a(e,"add"),this._registerListener(e,!1,t,n)},addOnce:function(e,t,n){return a(e,"addOnce"),this._registerListener(e,!0,t,n)},remove:function(e,t){a(e,"remove");var n=this._indexOfListener(e,t);return-1!==n&&(this._bindings[n]._destroy(),this._bindings.splice(n,1)),e},removeAll:function(){for(var e=this._bindings.length;e--;)this._bindings[e]._destroy();this._bindings.length=0},getNumListeners:function(){return this._bindings.length},halt:function(){this._shouldPropagate=!1},dispatch:function(e){if(this.active){var t,n=Array.prototype.slice.call(arguments),o=this._bindings.length;if(this.memorize&&(this._prevParams=n),o){t=this._bindings.slice(),this._shouldPropagate=!0;do{o--}while(t[o]&&this._shouldPropagate&&!1!==t[o].execute(n))}}},forget:function(){this._prevParams=null},dispose:function(){this.removeAll(),delete this._bindings,delete this._prevParams},toString:function(){return"[Signal active:"+this.active+" numListeners:"+this.getNumListeners()+"]"}};var l=s;l.Signal=s,void 0===(o=function(){return l}.call(t,n,t,e))||(e.exports=o)}()},function(e,t,n){const o=n(58),i=n(59),r=n(60),a=n(61),s=n(62),l=n(63),u=n(64),c=n(65),f=n(66),d=n(67),h=n(68),p=n(69),m=n(70),g=n(71),v=n(72),x=n(73),_=n(74),M=n(75),S=n(76),C=n(77),y=n(78),b=n(79),w=n(80),E=n(81),T=n(82),L=n(83),O=n(84),A=n(85),P=n(86),R=n(87),D=n(88),N=n(89),F=n(90),z=n(91);e.exports={math:o,encodeDecode:i,rgbm:r,gamma:a,lightAmbient:s,lightDirectional:l,lightPoint:u,lightSpot:c,lightArea:f,shadowing:d,brdf:h,clearCoat:p,irradiance:m,direct:g,indirect:v,envMapEquirect:x,octMap:_,octMapUvToDir:M,textureCoordinates:S,baseColor:C,emissiveColor:y,alpha:b,ambientOcclusion:w,normal:E,normalPerturb:T,metallicRoughness:L,specularGlossiness:O,depthRead:A,depthUnpack:P,depthPack:R,sky:D,fog:N,tonemapUncharted2:F,fxaa:z}},function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},function(e,t,n){var o=n(12);function i(){return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}function r(e,t,n,o,i,r,a,s,l,u,c,f,d,h,p,m,g){var v=e[0],x=e[1],_=e[2],M=e[3],S=e[4],C=e[5],y=e[6],b=e[7],w=e[8],E=e[9],T=e[10],L=e[11],O=e[12],A=e[13],P=e[14],R=e[15];return e[0]=t*v+n*S+o*w+i*O,e[1]=t*x+n*C+o*E+i*A,e[2]=t*_+n*y+o*T+i*P,e[3]=t*M+n*b+o*L+i*R,e[4]=r*v+a*S+s*w+l*O,e[5]=r*x+a*C+s*E+l*A,e[6]=r*_+a*y+s*T+l*P,e[7]=r*M+a*b+s*L+l*R,e[8]=u*v+c*S+f*w+d*O,e[9]=u*x+c*C+f*E+d*A,e[10]=u*_+c*y+f*T+d*P,e[11]=u*M+c*b+f*L+d*R,e[12]=h*v+p*S+m*w+g*O,e[13]=h*x+p*C+m*E+g*A,e[14]=h*_+p*y+m*T+g*P,e[15]=h*M+p*b+m*L+g*R,e}function a(e,t){var n=e[0],o=e[1],i=e[2],r=e[3],a=e[4],s=e[5],l=e[6],u=e[7],c=e[8],f=e[9],d=e[10],h=e[11],p=e[12],m=e[13],g=e[14],v=e[15],x=t[0],_=t[1],M=t[2],S=t[3],C=t[4],y=t[5],b=t[6],w=t[7],E=t[8],T=t[9],L=t[10],O=t[11],A=t[12],P=t[13],R=t[14],D=t[15];return e[0]=x*n+_*a+M*c+S*p,e[1]=x*o+_*s+M*f+S*m,e[2]=x*i+_*l+M*d+S*g,e[3]=x*r+_*u+M*h+S*v,e[4]=C*n+y*a+b*c+w*p,e[5]=C*o+y*s+b*f+w*m,e[6]=C*i+y*l+b*d+w*g,e[7]=C*r+y*u+b*h+w*v,e[8]=E*n+T*a+L*c+O*p,e[9]=E*o+T*s+L*f+O*m,e[10]=E*i+T*l+L*d+O*g,e[11]=E*r+T*u+L*h+O*v,e[12]=A*n+P*a+R*c+D*p,e[13]=A*o+P*s+R*f+D*m,e[14]=A*i+P*l+R*d+D*g,e[15]=A*r+P*u+R*h+D*v,e}function s(e,t,n,o){return r(e,t,0,0,0,0,n,0,0,0,0,o,0,0,0,0,1)}function l(e,t,n,o){return r(e,1,0,0,0,0,1,0,0,0,0,1,0,t,n,o,1)}function u(e,t){return l(e,t[0],t[1],t[2])}function c(e,t,n,o,i){var a,s,l,u,c,f,d,h,p,m,g,v,x,_,M,S,C,y,b,w,E,T,L=Math.sqrt(n*n+o*o+i*i);return L<1e-4?null:(n*=L=1/L,o*=L,i*=L,a=Math.sin(t),c=f=d=h=m=g=v=x=0,r(e,(u=p=1)*(_=n*n*(l=1-(s=Math.cos(t)))+s)+h*(M=o*n*l+i*a)+v*(S=i*n*l-o*a),c*_+p*M+x*S,f*_+m*M+1*S,d*_+g*M+0*S,u*(C=n*o*l-i*a)+h*(y=o*o*l+s)+v*(b=i*o*l+n*a),c*C+p*y+x*b,f*C+m*y+1*b,d*C+g*y+0*b,u*(w=n*i*l+o*a)+h*(E=o*i*l-n*a)+v*(T=i*i*l+s),c*w+p*E+x*T,f*w+m*E+1*T,d*w+g*E+0*T,0,0,0,1))}function f(e,t){var n=t[0],o=t[1],i=t[2],r=t[3],a=n+n,s=o+o,l=i+i,u=n*a,c=n*s,f=n*l,d=o*s,h=o*l,p=i*l,m=r*a,g=r*s,v=r*l;return e[0]=1-(d+p),e[4]=c-v,e[8]=f+g,e[1]=c+v,e[5]=1-(u+p),e[9]=h-m,e[2]=f-g,e[6]=h+m,e[10]=1-(u+d),e[3]=e[7]=e[11]=e[12]=e[13]=e[14]=0,e[15]=1,e}const d=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];var h={_mult16:r,_scale3:s,_translate3:l,_rotate3:c,_lookAt9:function(e,t,n,o,i,r,a,s,l,u){var c,f,d,h,p,m,g,v,x,_;return Math.abs(t-i)<1e-6&&Math.abs(n-r)<1e-6&&Math.abs(o-a)<1e-6?(e[0]=1,e[1]=e[2]=e[3]=0,e[5]=1,e[4]=e[6]=e[7]=0,e[10]=1,e[8]=e[9]=e[11]=0,e[15]=1,e[12]=e[13]=e[14]=0,e):(g=t-i,v=n-r,x=o-a,c=l*(x*=_=1/Math.sqrt(g*g+v*v+x*x))-u*(v*=_),f=u*(g*=_)-s*x,d=s*v-l*g,(_=Math.sqrt(c*c+f*f+d*d))&&(c*=_=1/_,f*=_,d*=_),h=v*d-x*f,p=x*c-g*d,m=g*f-v*c,(_=Math.sqrt(h*h+p*p+m*m))&&(c*=_=1/_,f*=_,d*=_),e[0]=c,e[1]=h,e[2]=g,e[3]=0,e[4]=f,e[5]=p,e[6]=v,e[7]=0,e[8]=d,e[9]=m,e[10]=x,e[11]=0,e[12]=-(c*t+f*n+d*o),e[13]=-(h*t+p*n+m*o),e[14]=-(g*t+v*n+x*o),e[15]=1,e)},fromMat3:function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[4]=t[3],e[5]=t[4],e[6]=t[5],e[8]=t[6],e[9]=t[7],e[10]=t[8],e[3]=e[7]=e[11]=e[12]=e[13]=e[14]=0,e[15]=1,e},fromQuat:f,fromTranslationRotationScale:function(e,t,n,o){return u(e,t),a(e,f(d,n)),o(e,o),e},translate:u,scale:function(e,t){return s(e,t[0],t[1],t[2])},rotate:function(e,t,n){return c(e,t,n[0],n[1],n[2])},identity:function(e){return e[0]=e[5]=e[10]=e[15]=1,e[1]=e[2]=e[3]=e[4]=e[6]=e[7]=e[8]=e[9]=e[11]=e[12]=e[13]=e[14]=0,e},mult:a,invert:function(e){var t=e[0],n=e[1],o=e[2],i=e[3],r=e[4],a=e[5],s=e[6],l=e[7],u=e[8],c=e[9],f=e[10],d=e[11],h=e[12],p=e[13],m=e[14],g=e[15];e[0]=a*f*g-a*d*m-c*s*g+c*l*m+p*s*d-p*l*f,e[4]=-r*f*g+r*d*m+u*s*g-u*l*m-h*s*d+h*l*f,e[8]=r*c*g-r*d*p-u*a*g+u*l*p+h*a*d-h*l*c,e[12]=-r*c*m+r*f*p+u*a*m-u*s*p-h*a*f+h*s*c,e[1]=-n*f*g+n*d*m+c*o*g-c*i*m-p*o*d+p*i*f,e[5]=t*f*g-t*d*m-u*o*g+u*i*m+h*o*d-h*i*f,e[9]=-t*c*g+t*d*p+u*n*g-u*i*p-h*n*d+h*i*c,e[13]=t*c*m-t*f*p-u*n*m+u*o*p+h*n*f-h*o*c,e[2]=n*s*g-n*l*m-a*o*g+a*i*m+p*o*l-p*i*s,e[6]=-t*s*g+t*l*m+r*o*g-r*i*m-h*o*l+h*i*s,e[10]=t*a*g-t*l*p-r*n*g+r*i*p+h*n*l-h*i*a,e[14]=-t*a*m+t*s*p+r*n*m-r*o*p-h*n*s+h*o*a,e[3]=-n*s*d+n*l*f+a*o*d-a*i*f-c*o*l+c*i*s,e[7]=t*s*d-t*l*f-r*o*d+r*i*f+u*o*l-u*i*s,e[11]=-t*a*d+t*l*c+r*n*d-r*i*c-u*n*l+u*i*a,e[15]=t*a*f-t*s*c-r*n*f+r*o*c+u*n*s-u*o*a;var v=t*e[0]+n*e[4]+o*e[8]+i*e[12];return 0===v?null:(v=1/v,e[0]*=v,e[1]*=v,e[2]*=v,e[3]*=v,e[4]*=v,e[5]*=v,e[6]*=v,e[7]*=v,e[8]*=v,e[9]*=v,e[10]*=v,e[11]*=v,e[12]*=v,e[13]*=v,e[14]*=v,e[15]*=v,e)},transpose:function(e){var t=e[1],n=e[2],o=e[3],i=e[6],r=e[7],a=e[8],s=e[9],l=e[11],u=e[12],c=e[13],f=e[14];return e[1]=e[4],e[2]=a,e[3]=u,e[4]=t,e[6]=s,e[7]=c,e[8]=n,e[9]=i,e[11]=f,e[12]=o,e[13]=r,e[14]=l,e},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]},copy:function(e){return e.slice(0)},create:i,set:function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e},frustum:function(e,t,n,o,i,r,a){var s=1/(n-t),l=1/(i-o),u=1/(r-a),c=2*r;return e[0]=c*s,e[1]=e[2]=0,e[3]=0,e[4]=0,e[5]=c*l,e[6]=0,e[7]=0,e[8]=(n+t)*s,e[9]=(i+o)*l,e[10]=(a+r)*u,e[11]=-1,e[12]=0,e[13]=0,e[14]=a*c*u,e[15]=0,e},perspective:function(e,t,n,i,r){o(t<Math.PI,"mat4.perpsective: vertical field of view should be in radians (0 to PI)");var a=1/Math.tan(.5*t),s=1/(i-r);return e[1]=e[2]=e[3]=e[4]=e[6]=e[7]=e[8]=e[9]=e[12]=e[13]=e[15]=0,e[0]=a/n,e[5]=a,e[10]=(r+i)*s,e[11]=-1,e[14]=2*r*i*s,e},ortho:function(e,t,n,o,i,r,a){var s=t-n,l=o-i,u=r-a;return e[1]=e[2]=e[3]=e[4]=e[6]=e[7]=e[8]=e[9]=e[11]=0,e[0]=-2/s,e[5]=-2/l,e[10]=2/u,e[12]=(t+n)/s,e[13]=(i+o)/l,e[14]=(a+r)/u,e[15]=1,e},lookAt:function(e,t,n,o){var i,r,a,s,l,u,c,f,d,h,p=t[0],m=t[1],g=t[2],v=n[0],x=n[1],_=n[2],M=o[0],S=o[1],C=o[2];return Math.abs(p-v)<1e-6&&Math.abs(m-x)<1e-6&&Math.abs(g-_)<1e-6?(e[0]=1,e[1]=e[2]=e[3]=0,e[5]=1,e[4]=e[6]=e[7]=0,e[10]=1,e[8]=e[9]=e[11]=0,e[15]=1,e[12]=e[13]=e[14]=0,e):(c=p-v,f=m-x,d=g-_,i=S*(d*=h=1/Math.sqrt(c*c+f*f+d*d))-C*(f*=h),r=C*(c*=h)-M*d,a=M*f-S*c,(h=Math.sqrt(i*i+r*r+a*a))&&(i*=h=1/h,r*=h,a*=h),s=f*a-d*r,l=d*i-c*a,u=c*r-f*i,(h=Math.sqrt(s*s+l*l+u*u))&&(i*=h=1/h,r*=h,a*=h),e[0]=i,e[1]=s,e[2]=c,e[3]=0,e[4]=r,e[5]=l,e[6]=f,e[7]=0,e[8]=a,e[9]=u,e[10]=d,e[11]=0,e[12]=-(i*p+r*m+a*g),e[13]=-(s*p+l*m+u*g),e[14]=-(c*p+f*m+d*g),e[15]=1,e)}};e.exports=h},function(e,t){var n={create:function(){return[0,0,0]},set:function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e},copy:function(e){return e.slice(0)},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]},add:function(e,t){return e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e},addScaled:function(e,t,n){return e[0]+=t[0]*n,e[1]+=t[1]*n,e[2]+=t[2]*n,e},sub:function(e,t){return e[0]-=t[0],e[1]-=t[1],e[2]-=t[2],e},scale:function(e,t){return e[0]*=t,e[1]*=t,e[2]*=t,e},multMat4:function(e,t){var n=e[0],o=e[1],i=e[2];return e[0]=t[0]*n+t[4]*o+t[8]*i+t[12],e[1]=t[1]*n+t[5]*o+t[9]*i+t[13],e[2]=t[2]*n+t[6]*o+t[10]*i+t[14],e},multQuat:function(e,t){var n=e[0],o=e[1],i=e[2],r=t[0],a=t[1],s=t[2],l=t[3],u=l*n+a*i-s*o,c=l*o+s*n-r*i,f=l*i+r*o-a*n,d=-r*n-a*o-s*i;return e[0]=u*l+d*-r+c*-s-f*-a,e[1]=c*l+d*-a+f*-r-u*-s,e[2]=f*l+d*-s+u*-a-c*-r,e},dot:function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]},cross:function(e,t){var n=e[0],o=e[1],i=e[2],r=t[0],a=t[1],s=t[2];return e[0]=o*s-a*i,e[1]=i*r-s*n,e[2]=n*a-r*o,e},length:function(e){var t=e[0],n=e[1],o=e[2];return Math.sqrt(t*t+n*n+o*o)},lengthSq:function(e){var t=e[0],n=e[1],o=e[2];return t*t+n*n+o*o},normalize:function(e){var t=e[0],n=e[1],o=e[2],i=Math.sqrt(t*t+n*n+o*o);return i=1/(i||1),e[0]*=i,e[1]*=i,e[2]*=i,e},distance:function(e,t){var n=t[0]-e[0],o=t[1]-e[1],i=t[2]-e[2];return Math.sqrt(n*n+o*o+i*i)},distanceSq:function(e,t){var n=t[0]-e[0],o=t[1]-e[1],i=t[2]-e[2];return n*n+o*o+i*i},limit:function(e,t){var n=e[0],o=e[1],i=e[2],r=n*n+o*o+i*i,a=t*t;if(a>0&&r>a){var s=t/Math.sqrt(r);e[0]*=s,e[1]*=s,e[2]*=s}return e},lerp:function(e,t,n){var o=e[0],i=e[1],r=e[2];return e[0]=o+(t[0]-o)*n,e[1]=i+(t[1]-i)*n,e[2]=r+(t[2]-r)*n,e},toString:function(e,t){var n=Math.pow(10,void 0!==t?t:4),o="[";return o+=Math.floor(e[0]*n)/n+", ",o+=Math.floor(e[1]*n)/n+", ",o+=Math.floor(e[2]*n)/n+"]"}};e.exports=n},function(e,t){function n(e,t,n){return Math.max(t,Math.min(e,n))}var o={lerp:function(e,t,n){return e+(t-e)*n},clamp:n,smoothstep:function(e,t,o){return(e=n((e-t)/(o-t),0,1))*e*(3-2*e)},map:function(e,t,n,o,i){return o+(i-o)*(e-t)/(n-t)},toRadians:function(e){return e*Math.PI/180},toDegrees:function(e){return 180*e/Math.PI},sign:function(e){return e/Math.abs(e)},isPowerOfTwo:function(e){return 0==(e&e-1)},nextPowerOfTwo:function(e){return 0===e?1:(e--,e|=e>>1,e|=e>>2,e|=e>>4,e|=e>>8,1+(e|=e>>16))}};e.exports=o},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t){e.exports=function(e){return function(t,n){return n?e(t,n):new Promise((n,o)=>{e(t,(e,t)=>{if(e)return o(e);n(t)})})}}},function(e,t){var n={create:function(){return[0,0,0,1]},set:function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e},fromVec3:function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=1,e},multMat4:function(e,t){var n=e[0],o=e[1],i=e[2],r=e[3];return e[0]=t[0]*n+t[4]*o+t[8]*i+t[12]*r,e[1]=t[1]*n+t[5]*o+t[9]*i+t[13]*r,e[2]=t[2]*n+t[6]*o+t[10]*i+t[14]*r,e[3]=t[3]*n+t[7]*o+t[11]*i+t[15]*r,e},copy:function(e){return e.slice(0)},scale:function(e,t){return e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}};e.exports=n},function(e,t,n){e.exports={mat2x3:n(39),mat3:n(18),mat4:n(3),vec2:n(40),vec3:n(4),vec4:n(9),quat:n(14),euler:n(41),utils:n(5)}},function(e,t){var n,o,i=e.exports={};function r(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===r||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:r}catch(e){n=r}try{o="function"==typeof clearTimeout?clearTimeout:a}catch(e){o=a}}();var l,u=[],c=!1,f=-1;function d(){c&&l&&(c=!1,l.length?u=l.concat(u):f=-1,u.length&&h())}function h(){if(!c){var e=s(d);c=!0;for(var t=u.length;t;){for(l=u,u=[];++f<t;)l&&l[f].run();f=-1,t=u.length}l=null,c=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===a||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new p(e,t)),1!==u.length||c||s(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";(function(t){var o=n(28);
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */function i(e,t){if(e===t)return 0;for(var n=e.length,o=t.length,i=0,r=Math.min(n,o);i<r;++i)if(e[i]!==t[i]){n=e[i],o=t[i];break}return n<o?-1:o<n?1:0}function r(e){return t.Buffer&&"function"==typeof t.Buffer.isBuffer?t.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}var a=n(29),s=Object.prototype.hasOwnProperty,l=Array.prototype.slice,u="foo"===function(){}.name;function c(e){return Object.prototype.toString.call(e)}function f(e){return!r(e)&&("function"==typeof t.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer))))}var d=e.exports=x,h=/\s*function\s+([^\(\s]*)\s*/;function p(e){if(a.isFunction(e)){if(u)return e.name;var t=e.toString().match(h);return t&&t[1]}}function m(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function g(e){if(u||!a.isFunction(e))return a.inspect(e);var t=p(e);return"[Function"+(t?": "+t:"")+"]"}function v(e,t,n,o,i){throw new d.AssertionError({message:n,actual:e,expected:t,operator:o,stackStartFunction:i})}function x(e,t){e||v(e,!0,t,"==",d.ok)}function _(e,t,n,o){if(e===t)return!0;if(r(e)&&r(t))return 0===i(e,t);if(a.isDate(e)&&a.isDate(t))return e.getTime()===t.getTime();if(a.isRegExp(e)&&a.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(f(e)&&f(t)&&c(e)===c(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===i(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(r(e)!==r(t))return!1;var s=(o=o||{actual:[],expected:[]}).actual.indexOf(e);return-1!==s&&s===o.expected.indexOf(t)||(o.actual.push(e),o.expected.push(t),function(e,t,n,o){if(null==e||null==t)return!1;if(a.isPrimitive(e)||a.isPrimitive(t))return e===t;if(n&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var i=M(e),r=M(t);if(i&&!r||!i&&r)return!1;if(i)return e=l.call(e),t=l.call(t),_(e,t,n);var s,u,c=y(e),f=y(t);if(c.length!==f.length)return!1;for(c.sort(),f.sort(),u=c.length-1;u>=0;u--)if(c[u]!==f[u])return!1;for(u=c.length-1;u>=0;u--)if(s=c[u],!_(e[s],t[s],n,o))return!1;return!0}(e,t,n,o))}return n?e===t:e==t}function M(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function S(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&!0===t.call({},e)}function C(e,t,n,o){var i;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof n&&(o=n,n=null),i=function(e){var t;try{e()}catch(e){t=e}return t}(t),o=(n&&n.name?" ("+n.name+").":".")+(o?" "+o:"."),e&&!i&&v(i,n,"Missing expected exception"+o);var r="string"==typeof o,s=!e&&i&&!n;if((!e&&a.isError(i)&&r&&S(i,n)||s)&&v(i,n,"Got unwanted exception"+o),e&&i&&n&&!S(i,n)||!e&&i)throw i}d.AssertionError=function(e){var t;this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=m(g((t=this).actual),128)+" "+t.operator+" "+m(g(t.expected),128),this.generatedMessage=!0);var n=e.stackStartFunction||v;if(Error.captureStackTrace)Error.captureStackTrace(this,n);else{var o=new Error;if(o.stack){var i=o.stack,r=p(n),a=i.indexOf("\n"+r);if(a>=0){var s=i.indexOf("\n",a+1);i=i.substring(s+1)}this.stack=i}}},a.inherits(d.AssertionError,Error),d.fail=v,d.ok=x,d.equal=function(e,t,n){e!=t&&v(e,t,n,"==",d.equal)},d.notEqual=function(e,t,n){e==t&&v(e,t,n,"!=",d.notEqual)},d.deepEqual=function(e,t,n){_(e,t,!1)||v(e,t,n,"deepEqual",d.deepEqual)},d.deepStrictEqual=function(e,t,n){_(e,t,!0)||v(e,t,n,"deepStrictEqual",d.deepStrictEqual)},d.notDeepEqual=function(e,t,n){_(e,t,!1)&&v(e,t,n,"notDeepEqual",d.notDeepEqual)},d.notDeepStrictEqual=function e(t,n,o){_(t,n,!0)&&v(t,n,o,"notDeepStrictEqual",e)},d.strictEqual=function(e,t,n){e!==t&&v(e,t,n,"===",d.strictEqual)},d.notStrictEqual=function(e,t,n){e===t&&v(e,t,n,"!==",d.notStrictEqual)},d.throws=function(e,t,n){C(!0,e,t,n)},d.doesNotThrow=function(e,t,n){C(!1,e,t,n)},d.ifError=function(e){if(e)throw e},d.strict=o(function e(t,n){t||v(t,!0,n,"==",e)},d,{equal:d.strictEqual,deepEqual:d.deepStrictEqual,notEqual:d.notStrictEqual,notDeepEqual:d.notDeepStrictEqual}),d.strict.strict=d.strict;var y=Object.keys||function(e){var t=[];for(var n in e)s.call(e,n)&&t.push(n);return t}}).call(this,n(27))},function(e,t){function n(){return[[1/0,1/0,1/0],[-1/0,-1/0,-1/0]]}function o(e,t){e[0][0]=t[0][0],e[0][1]=t[0][1],e[0][2]=t[0][2],e[1][0]=t[1][0],e[1][1]=t[1][1],e[1][2]=t[1][2]}function i(e){return e[0][0]>e[1][0]||e[0][1]>e[1][1]||e[0][2]>e[1][2]}e.exports={create:n,set:o,copy:function(e){var t=[[1/0,1/0,1/0],[-1/0,-1/0,-1/0]];return o(t,e),t},fromPoints:function(e){for(var t=[[1/0,1/0,1/0],[-1/0,-1/0,-1/0]],n=t[0],o=t[1],i=0,r=e.length;i<r;i++){var a=e[i];n[0]=Math.min(n[0],a[0]),n[1]=Math.min(n[1],a[1]),n[2]=Math.min(n[2],a[2]),o[0]=Math.max(o[0],a[0]),o[1]=Math.max(o[1],a[1]),o[2]=Math.max(o[2],a[2])}return t},center:function(e,t){return void 0===t&&(t=[0,0,0]),t[0]=(e[0][0]+e[1][0])/2,t[1]=(e[0][1]+e[1][1])/2,t[2]=(e[0][2]+e[1][2])/2,t},size:function(e,t){return void 0===t&&(t=[0,0,0]),t[0]=Math.abs(e[1][0]-e[0][0]),t[1]=Math.abs(e[1][1]-e[0][1]),t[2]=Math.abs(e[1][2]-e[0][2]),t},isEmpty:i,includeAABB:function(e,t){return i(e)?o(e,t):i(t)||(e[0][0]=Math.min(e[0][0],t[0][0]),e[0][1]=Math.min(e[0][1],t[0][1]),e[0][2]=Math.min(e[0][2],t[0][2]),e[1][0]=Math.max(e[1][0],t[1][0]),e[1][1]=Math.max(e[1][1],t[1][1]),e[1][2]=Math.max(e[1][2],t[1][2])),e},includePoint:function(e,t){return e[0][0]=Math.min(e[0][0],t[0]),e[0][1]=Math.min(e[0][1],t[1]),e[0][2]=Math.min(e[0][2],t[2]),e[1][0]=Math.max(e[1][0],t[0]),e[1][1]=Math.max(e[1][1],t[1]),e[1][2]=Math.max(e[1][2],t[2]),e}}},function(e,t,n){var o=n(12),i=n(4),r=Math.pow(2,-24);function a(e){var t=e[0],n=e[1],o=e[2],i=e[3];return Math.sqrt(t*t+n*n+o*o+i*i)}function s(e){var t=a(e);return t>r&&(t=1/t,e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t),e}function l(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function u(e,t,n,o,i,r,a,s,l,u){var c,f=t+r+u;return f>=0?(c=Math.sqrt(f+1),e[3]=.5*c,c=.5/c,e[0]=(a-l)*c,e[1]=(s-o)*c,e[2]=(n-i)*c):t>r&&t>u?(c=Math.sqrt(1+t-r-u),e[0]=.5*c,c=.5/c,e[1]=(n+i)*c,e[2]=(s+o)*c,e[3]=(a-l)*c):r>u?(c=Math.sqrt(1+r-t-u),e[1]=.5*c,c=.5/c,e[0]=(n+i)*c,e[2]=(a+l)*c,e[3]=(s-o)*c):(c=Math.sqrt(1+u-t-r),e[2]=.5*c,c=.5/c,e[0]=(s+o)*c,e[1]=(a+l)*c,e[3]=(n-i)*c),e}var c,f=(c=[],function(e,t,n){return c=i.cross(i.set(c,t),n),e[0]=c[0],e[1]=c[1],e[2]=c[2],e[3]=1+i.dot(t,n),s(e),e});var d={create:function(){return[0,0,0,1]},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]},identity:function(e){return e[0]=e[1]=e[2]=0,e[3]=1,e},copy:function(e){return e.slice(0)},set:function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e},mult:function(e,t){var n=e[0],o=e[1],i=e[2],r=e[3],a=t[0],s=t[1],l=t[2],u=t[3];return e[0]=r*a+n*u+o*l-i*s,e[1]=r*s+o*u+i*a-n*l,e[2]=r*l+i*u+n*s-o*a,e[3]=r*u-n*a-o*s-i*l,e},invert:function(e){var t=l(e,e);return t=t?1/t:0,e[0]*=-t,e[1]*=-t,e[2]*=-t,e[3]*=t,e},conjugate:function(e){return e[0]*=-1,e[1]*=-1,e[2]*=-1,e},dot:l,length:a,normalize:s,fromEuler:function(e,t){var n=t[0],o=t[1],i=t[2],r=Math.cos(n/2),a=Math.cos(o/2),s=Math.cos(i/2),l=Math.sin(n/2),u=Math.sin(o/2),c=Math.sin(i/2);return e[0]=l*a*s+r*u*c,e[1]=r*u*s-l*a*c,e[2]=r*a*c+l*u*s,e[3]=r*a*s-l*u*c,e},fromAxisAngle:function(e,t,n){o(void 0!==t.length,"quat.fromAxisAngle: axis should be vec3");var i=.5*n,r=Math.sin(i);return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=Math.cos(i),s(e)},fromAxes:function(e,t,n,o){return u(e,t[0],t[1],t[2],n[0],n[1],n[2],o[0],o[1],o[2])},fromMat3:function(e,t){return u(e,t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])},fromMat4:function(e,t){return u(e,t[0],t[1],t[2],t[4],t[5],t[6],t[8],t[9],t[10])},slerp:function(e,t,n){var o,i,r,a,s,u=e[0],c=e[1],f=e[2],d=e[3],h=t[0],p=t[1],m=t[2],g=t[3];return(i=l(e,t))<0?(i=-i,e[0]=-h,e[1]=-p,e[2]=-m,e[3]=-g):(e[0]=h,e[1]=p,e[2]=m,e[3]=g),1-i>1e-6?(o=Math.acos(i),r=Math.sin(o),a=Math.sin((1-n)*o)/r,s=Math.sin(n*o)/r):(a=1-n,s=n),e[0]=a*u+s*e[0],e[1]=a*c+s*e[1],e[2]=a*f+s*e[2],e[3]=a*d+s*e[3],e},fromTo:f};e.exports=d},function(e,t,n){var o=n(22);e.exports=!!o.SkCanvas},function(e,t,n){var o=n(15),i=n(24),r=n(8);e.exports=r(function(e,t){o?function(e,t){if(!i.existsSync(e)&&t)return t(new Error("loadText error: File doesn't exist \""+e+'"'),null);var n=i.readFileSync(e,"utf8");t&&t(null,n)}(e,t):function(e,t){var n=new window.XMLHttpRequest;n.open("GET",e,!0),n.onreadystatechange=function(e){4===n.readyState&&(200===n.status?t&&t(null,n.responseText):t(new Error("loadText error: "+n.statusText),null))},n.send(null)}(e,t)})},function(e,t,n){(function(e){function n(e,t){for(var n=0,o=e.length-1;o>=0;o--){var i=e[o];"."===i?e.splice(o,1):".."===i?(e.splice(o,1),n++):n&&(e.splice(o,1),n--)}if(t)for(;n--;n)e.unshift("..");return e}var o=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,i=function(e){return o.exec(e).slice(1)};function r(e,t){if(e.filter)return e.filter(t);for(var n=[],o=0;o<e.length;o++)t(e[o],o,e)&&n.push(e[o]);return n}t.resolve=function(){for(var t="",o=!1,i=arguments.length-1;i>=-1&&!o;i--){var a=i>=0?arguments[i]:e.cwd();if("string"!=typeof a)throw new TypeError("Arguments to path.resolve must be strings");a&&(t=a+"/"+t,o="/"===a.charAt(0))}return(o?"/":"")+(t=n(r(t.split("/"),function(e){return!!e}),!o).join("/"))||"."},t.normalize=function(e){var o=t.isAbsolute(e),i="/"===a(e,-1);return(e=n(r(e.split("/"),function(e){return!!e}),!o).join("/"))||o||(e="."),e&&i&&(e+="/"),(o?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(r(e,function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},t.relative=function(e,n){function o(e){for(var t=0;t<e.length&&""===e[t];t++);for(var n=e.length-1;n>=0&&""===e[n];n--);return t>n?[]:e.slice(t,n-t+1)}e=t.resolve(e).substr(1),n=t.resolve(n).substr(1);for(var i=o(e.split("/")),r=o(n.split("/")),a=Math.min(i.length,r.length),s=a,l=0;l<a;l++)if(i[l]!==r[l]){s=l;break}var u=[];for(l=s;l<i.length;l++)u.push("..");return(u=u.concat(r.slice(s))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){var t=i(e),n=t[0],o=t[1];return n||o?(o&&(o=o.substr(0,o.length-1)),n+o):"."},t.basename=function(e,t){var n=i(e)[2];return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},t.extname=function(e){return i(e)[3]};var a="b"==="ab".substr(-1)?function(e,t,n){return e.substr(t,n)}:function(e,t,n){return t<0&&(t=e.length+t),e.substr(t,n)}}).call(this,n(11))},function(e,t){var n={_set9:function(e,t,n,o,i,r,a,s,l,u){return e[0]=t,e[1]=n,e[2]=o,e[3]=i,e[4]=r,e[5]=a,e[6]=s,e[7]=l,e[8]=u,e},create:function(){return[1,0,0,0,1,0,0,0,1]},set:function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e},identity:function(e){return e[0]=e[4]=e[8]=1,e[1]=e[2]=e[3]=e[5]=e[6]=e[7]=0,e},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]},mult:function(e,t){let n=e[0],o=e[1],i=e[2],r=e[3],a=e[4],s=e[5],l=e[6],u=e[7],c=e[8],f=t[0],d=t[1],h=t[2],p=t[3],m=t[4],g=t[5],v=t[6],x=t[7],_=t[8];return e[0]=f*n+d*r+h*l,e[1]=f*o+d*a+h*u,e[2]=f*i+d*s+h*c,e[3]=p*n+m*r+g*l,e[4]=p*o+m*a+g*u,e[5]=p*i+m*s+g*c,e[6]=v*n+x*r+_*l,e[7]=v*o+x*a+_*u,e[8]=v*i+x*s+_*c,e},fromMat2x3:function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=0,e[3]=t[2],e[4]=t[3],e[5]=0,e[6]=t[4],e[7]=t[5],e[8]=1,e},fromMat4:function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e},fromQuat:function(e,t){var n=t[0],o=t[1],i=t[2],r=t[3],a=n+n,s=o+o,l=i+i,u=n*a,c=n*s,f=n*l,d=o*s,h=o*l,p=i*l,m=r*a,g=r*s,v=r*l;return e[0]=1-(d+p),e[3]=c-v,e[6]=f+g,e[1]=c+v,e[4]=1-(u+p),e[7]=h-m,e[2]=f-g,e[5]=h+m,e[8]=1-(u+d),e}};e.exports=n},function(e,t){e.exports=!0},function(e,t,n){const o=n(0),i=n(4),r=n(9),a=n(3),s=n(13);function l(e,t,n,o,i){return e[0]=t,e[1]=n,e[2]=o,e[3]=i,e}function u(e){e[0][0]=1/0,e[0][1]=1/0,e[0][2]=1/0,e[1][0]=-1/0,e[1][1]=-1/0,e[1][2]=-1/0}var c=a.create();function f(e){this.type="Transform",this.enabled=!0,this.changed=new o,this.entity=null,this.position=[0,0,0],this.worldPosition=[0,0,0],this.rotation=[0,0,0,1],this.scale=[1,1,1],this.parent=null,this.children=[],this.bounds=s.create(),this._boundsPoints=new Array(8).fill(0).map(()=>r.create()),this.worldBounds=s.create(),this.localModelMatrix=a.create(),this.modelMatrix=a.create(),this.geometry=null,this.set(e)}f.prototype.init=function(e){this.entity=e},f.prototype.set=function(e){void 0!==e.parent&&(this.parent&&this.parent.children.splice(this.parent.children.indexOf(this),1),e.parent&&e.parent.children.push(this)),Object.assign(this,e),Object.keys(e).forEach(e=>this.changed.dispatch(e))},f.prototype.update=function(){var e,t;a.identity(this.localModelMatrix),a.translate(this.localModelMatrix,this.position),e=this.localModelMatrix,t=this.rotation,a.fromQuat(c,t),a.mult(e,c),a.scale(this.localModelMatrix,this.scale),this.matrix&&a.mult(this.localModelMatrix,this.matrix),a.identity(this.modelMatrix);for(var n=[],o=this;o;)n.unshift(o),o=o.parent;n.forEach(e=>{a.mult(this.modelMatrix,e.localModelMatrix)}),u(this.bounds);const i=this.entity.getComponent("Geometry");i&&s.set(this.bounds,i.bounds)},f.prototype.afterUpdate=function(){if(s.isEmpty(this.bounds))u(this.worldBounds);else{t=this._boundsPoints,n=this.bounds,l(t[0],n[0][0],n[0][1],n[0][2],1),l(t[1],n[1][0],n[0][1],n[0][2],1),l(t[2],n[1][0],n[0][1],n[1][2],1),l(t[3],n[0][0],n[0][1],n[1][2],1),l(t[4],n[0][0],n[1][1],n[0][2],1),l(t[5],n[1][0],n[1][1],n[0][2],1),l(t[6],n[1][0],n[1][1],n[1][2],1),l(t[7],n[0][0],n[1][1],n[1][2],1);for(var e=0;e<this._boundsPoints.length;e++)i.multMat4(this._boundsPoints[e],this.modelMatrix);!function(e,t){for(var n=e[0],o=e[1],i=0,r=t.length;i<r;i++){var a=t[i];n[0]=Math.min(n[0],a[0]),n[1]=Math.min(n[1],a[1]),n[2]=Math.min(n[2],a[2]),o[0]=Math.max(o[0],a[0]),o[1]=Math.max(o[1],a[1]),o[2]=Math.max(o[2],a[2])}}(this.worldBounds,this._boundsPoints)}var t,n;this.children.forEach(e=>{s.isEmpty(e.worldBounds)||s.includeAABB(this.worldBounds,e.worldBounds)}),i.scale(this.worldPosition,0),i.multMat4(this.worldPosition,this.modelMatrix)},e.exports=function(e){return new f(e)}},function(e,t,n){var o=n(15),i=n(22),r=n(8);function a(e,t){var n;try{(n=i.SkCanvas.createFromImage(e)).data=function(e,t,n){for(var o=new Uint8Array(e*t*4),i=0;i<t;i++)for(var r=0;r<e;r++){var a=4*(r+i*e);o[a+0]=n[a+2],o[a+1]=n[a+1],o[a+2]=n[a+0],o[a+3]=n[a+3]}return o}(n.width,n.height,n.pixels)}catch(n){t(new Error(n+' "'+e+'"'),null)}t(null,n)}e.exports=r(function(e,t,n){o?a(e,t):function(e,t){var n=null,o=e;o.url&&(n=o.crossOrigin,o=o.url);var i=new window.Image;n&&(i.crossOrigin=n),i.onerror=function(){t(new Error("Failed to load "+o),null)},i.onload=function(){t(null,i)},i.src=o}(e,t)})},function(e,t){e.exports={}},function(e,t,n){var o=n(15),i=n(24),r=n(8);function a(e,t){try{if(!i.existsSync(e)&&t)return t(new Error("loadBinary error: File doesn\t exist"),null)}catch(e){return t(new Error("loadBinary error : "+e.toString()),null)}t(null,function(e){for(var t=new ArrayBuffer(e.length),n=new Uint8Array(t),o=0;o<e.length;++o)n[o]=e[o];return t}(i.readFileSync(e)))}e.exports=r(function(e,t){o?a(e,t):function(e,t){var n=new window.XMLHttpRequest;n.open("GET",e,!0),n.responseType="arraybuffer",n.onreadystatechange=function(e){4===n.readyState&&(200===n.status?t(null,n.response):t(new Error("loadBinary error : "+n.response),null))},n.send(null)}(e,t)})},function(t,n){t.exports=e},function(e,t,n){var o=n(16),i=n(8);e.exports=i(function(e,t){o(e,function(e,n){if(e)t(e,null);else{var o=null;try{o=JSON.parse(n)}catch(e){return t(e,null)}t(null,o)}})})},function(e,t,n){const o=n(17),i=n(4),r=n(9),a=n(18),s=n(3),l=n(13),u=n(32),c=n(19),f=n(33),d=n(20),h=n(34),p=n(35),m=n(36),g=n(37),v=n(38),x=n(42),_=n(43),M=n(96),S=n(104),C=n(105),y=n(109),b=n(110),w=n(111),E=n(113),T=n(121),L=n(127),O=n(128),A=n(131),P=n(132),R=n(133),D=n(134),N=n(135),F=n(136),z=n(137),I=n(138),U=n(139),B=n(1),V=(new Map).set([".gltf",".glb"],O),G=Array.from(V.entries());var q={frame:0,shadowQuality:2,debug:!1,profile:!1,profiler:null,paused:!1,rgbm:!1};function j(e){return null==e}function k(e){return l.isEmpty(e)?[]:[[e[0][0],e[0][1],e[0][2],1],[e[1][0],e[0][1],e[0][2],1],[e[1][0],e[0][1],e[1][2],1],[e[0][0],e[0][1],e[1][2],1],[e[0][0],e[1][1],e[0][2],1],[e[1][0],e[1][1],e[0][2],1],[e[1][0],e[1][1],e[1][2],1],[e[0][0],e[1][1],e[1][2],1]]}function H(e){this.entities=[],this.root=this.entity(),e=e.texture2D?{ctx:e}:e;const t=this._ctx=e.ctx;e.ctx.gl.getExtension("OES_standard_derivatives"),this._dummyTexture2D=t.texture2D({width:4,height:4}),this._dummyTextureCube=t.textureCube({width:4,height:4}),this._debug=!1,this._programCacheMap={values:[],getValue:function(e,t,n){for(var o=0;o<this.values.length;o++){var i=this.values[o];if(i.frag===n&&i.vert===t&&i.flags.length===e.length){for(var r=!0,a=0;a<e.length;a++)if(i.flags[a]!==e[a]){r=!1;break}if(r)return i.program}}return!1},setValue:function(e,t,n,o){this.values.push({flags:e,vert:t,frag:n,program:o})}},e.profile&&(q.profiler=u(e.ctx,this),q.profiler.flush=e.profileFlush),e.pauseOnBlur&&c&&(window.addEventListener("focus",()=>{q.paused=!1}),window.addEventListener("blur",()=>{q.paused=!0})),Object.assign(q,e),this._state=q,this.shaders={chunks:B,pipeline:{material:{vert:A,frag:P}}}}H.prototype.updateDirectionalLightShadowMap=function(e,t){const n=this._ctx,o=e.entity.transform.worldPosition,a=[0,0,1,0],u=[0,1,0,0];r.multMat4(a,e.entity.transform.modelMatrix),i.add(a,o),r.multMat4(u,e.entity.transform.modelMatrix),s.lookAt(e._viewMatrix,o,a,u);const c=t.reduce((e,t)=>e.concat(k(t.entity.transform.worldBounds)),[]).map(t=>i.multMat4(i.copy(t),e._viewMatrix)),f=l.fromPoints(c),d=-f[1][2],h=-f[0][2];e.set({_near:d,_far:h}),s.ortho(e._projectionMatrix,f[0][0],f[1][0],f[0][1],f[1][1],d,h),n.submit(e._shadowMapDrawCommand,()=>{this.drawMeshes(null,!0,e,t)})},H.prototype.updateSpotLightShadowMap=function(e,t){const n=e.entity.transform.worldPosition,o=[0,0,1,0],a=[0,1,0,0];r.multMat4(o,e.entity.transform.modelMatrix),r.multMat4(a,e.entity.transform.modelMatrix),s.lookAt(e._viewMatrix,n,o,a);const u=t.reduce((e,t)=>e.concat(k(t.entity.transform.worldBounds)),[]).map(t=>i.multMat4(i.copy(t),e._viewMatrix)),c=l.fromPoints(u),f=-c[1][2],d=-c[0][2];e.set({_near:f,_far:d}),s.perspective(e._projectionMatrix,2*e.angle,e._shadowMap.width/e._shadowMap.height,f,d),this._ctx.submit(e._shadowMapDrawCommand,()=>{this.drawMeshes(null,!0,e,t)})},H.prototype.updatePointLightShadowMap=function(e,t){const n=this._ctx;e._sides.forEach(o=>{var r=[0,0,0];n.submit(o.drawPassCmd,()=>{const n=e.entity.transform.worldPosition;i.set(r,n),i.add(r,o.target),s.lookAt(o.viewMatrix,n,r,o.up);var a={_projectionMatrix:o.projectionMatrix,_viewMatrix:o.viewMatrix};this.drawMeshes(null,!0,a,t)})})},H.prototype.parseShader=function(e,t){return e=e.replace(/#pragma unroll_loop[\s]+?for \(int i = (\d+); i < (\d+|\D+); i\+\+\) \{([\s\S]+?)(?=\})\}/g,function(e,n,o,i){let r="";o=o.replace(/NUM_AMBIENT_LIGHTS/g,t.numAmbientLights||0).replace(/NUM_DIRECTIONAL_LIGHTS/g,t.numDirectionalLights||0).replace(/NUM_POINT_LIGHTS/g,t.numPointLights||0).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights||0).replace(/NUM_AREA_LIGHTS/g,t.numAreaLights||0);for(let e=Number.parseInt(n);e<Number.parseInt(o);e++)r+=i.replace(/\[i\]/g,`[${e}]`);return r})},H.prototype.getMaterialProgramAndFlags=function(e,t,n,o){var i=this._ctx,r=[];return this._state.targetMobile&&r.push("#define TARGET_MOBILE"),e._attributes.aNormal?r.push("#define USE_NORMALS"):r.push("#define USE_UNLIT_WORKFLOW"),e._attributes.aTangent&&r.push("#define USE_TANGENTS"),e._attributes.aTexCoord0&&r.push("#define USE_TEXCOORD_0"),e._attributes.aTexCoord1&&r.push("#define USE_TEXCOORD_1"),e._attributes.aOffset&&r.push("#define USE_INSTANCED_OFFSET"),e._attributes.aScale&&r.push("#define USE_INSTANCED_SCALE"),e._attributes.aRotation&&r.push("#define USE_INSTANCED_ROTATION"),e._attributes.aColor&&r.push("#define USE_INSTANCED_COLOR"),e._attributes.aVertexColor&&r.push("#define USE_VERTEX_COLORS"),o.useSSAO&&r.push("#define USE_AO"),t.displacementMap&&r.push("#define USE_DISPLACEMENT_MAP"),n&&(r.push("#define USE_SKIN"),r.push("#define NUM_JOINTS "+n.joints.length)),i.capabilities.maxColorAttachments>1&&r.push("#define USE_DRAW_BUFFERS"),t.baseColorMap&&(r.push("#define USE_BASE_COLOR_MAP"),t.baseColor||(t.baseColor=[1,1,1,1]),r.push(`#define BASE_COLOR_MAP_TEX_COORD_INDEX ${t.baseColorMap.texCoord||0}`),t.baseColorMap.texCoordTransformMatrix&&r.push("#define USE_BASE_COLOR_MAP_TEX_COORD_TRANSFORM")),t.alphaMap&&(r.push("#define USE_ALPHA_MAP"),r.push(`#define ALPHA_MAP_TEX_COORD_INDEX ${t.alphaMap.texCoord||0}`),t.alphaMap.texCoordTransformMatrix&&r.push("#define USE_ALPHA_MAP_TEX_COORD_TRANSFORM")),t.alphaTest&&r.push("#define USE_ALPHA_TEST"),o.depthPrePassOnly?(r.push("#define DEPTH_PRE_PASS_ONLY"),r.push("#define SHADOW_QUALITY 0"),r.push("#define NUM_AMBIENT_LIGHTS 0"),r.push("#define NUM_DIRECTIONAL_LIGHTS 0"),r.push("#define NUM_POINT_LIGHTS 0"),r.push("#define NUM_SPOT_LIGHTS 0"),r.push("#define NUM_AREA_LIGHTS 0"),{flags:r,vert:t.vert||R,frag:t.frag||N}):o.depthPassOnly?(r.push("#define DEPTH_PASS_ONLY"),r.push("#define SHADOW_QUALITY 0"),r.push("#define NUM_AMBIENT_LIGHTS 0"),r.push("#define NUM_DIRECTIONAL_LIGHTS 0"),r.push("#define NUM_POINT_LIGHTS 0"),r.push("#define NUM_SPOT_LIGHTS 0"),r.push("#define NUM_AREA_LIGHTS 0"),{flags:r,vert:t.vert||R,frag:t.frag||D}):(r.push("#define SHADOW_QUALITY "+(t.receiveShadows?q.shadowQuality:0)),t.unlit?-1===r.indexOf("#define USE_UNLIT_WORKFLOW")&&r.push("#define USE_UNLIT_WORKFLOW"):t.useSpecularGlossinessWorkflow?(r.push("#define USE_SPECULAR_GLOSSINESS_WORKFLOW"),t.diffuseMap&&(r.push("#define USE_DIFFUSE_MAP"),r.push(`#define DIFFUSE_MAP_TEX_COORD_INDEX ${t.diffuseMap.texCoord||0}`),t.diffuseMap.texCoordTransformMatrix&&r.push("#define USE_DIFFUSE_MAP_TEX_COORD_TRANSFORM")),t.specularGlossinessMap&&(r.push("#define USE_SPECULAR_GLOSSINESS_MAP"),r.push(`#define SPECULAR_GLOSSINESS_MAP_TEX_COORD_INDEX ${t.specularGlossinessMap.texCoord||0}`),t.specularGlossinessMap.texCoordTransformMatrix&&r.push("#define USE_SPECULAR_GLOSSINESS_MAP_TEX_COORD_TRANSFORM"))):(r.push("#define USE_METALLIC_ROUGHNESS_WORKFLOW"),t.metallicMap&&(r.push("#define USE_METALLIC_MAP"),r.push(`#define METALLIC_MAP_TEX_COORD_INDEX ${t.metallicMap.texCoord||0}`),t.metallicMap.texCoordTransformMatrix&&r.push("#define USE_METALLIC_MAP_TEX_COORD_TRANSFORM")),t.roughnessMap&&(r.push("#define USE_ROUGHNESS_MAP"),r.push(`#define ROUGHNESS_MAP_TEX_COORD_INDEX ${t.roughnessMap.texCoord||0}`),t.roughnessMap.texCoordTransformMatrix&&r.push("#define USE_ROUGHNESS_MAP_TEX_COORD_TRANSFORM")),t.metallicRoughnessMap&&(r.push("#define USE_METALLIC_ROUGHNESS_MAP"),r.push(`#define METALLIC_ROUGHNESS_MAP_TEX_COORD_INDEX ${t.metallicRoughnessMap.texCoord||0}`),t.metallicRoughnessMap.texCoordTransformMatrix&&r.push("#define USE_METALLIC_ROUGHNESS_MAP_TEX_COORD_TRANSFORM"))),t.occlusionMap&&(r.push("#define USE_OCCLUSION_MAP"),r.push(`#define OCCLUSION_MAP_TEX_COORD_INDEX ${t.occlusionMap.texCoord||0}`),t.occlusionMap.texCoordTransformMatrix&&r.push("#define USE_OCCLUSION_MAP_TEX_COORD_TRANSFORM")),t.normalMap&&(r.push("#define USE_NORMAL_MAP"),r.push(`#define NORMAL_MAP_TEX_COORD_INDEX ${t.normalMap.texCoord||0}`),t.normalMap.texCoordTransformMatrix&&r.push("#define USE_NORMAL_MAP_TEX_COORD_TRANSFORM")),t.emissiveColorMap&&(r.push("#define USE_EMISSIVE_COLOR_MAP"),r.push(`#define EMISSIVE_COLOR_MAP_TEX_COORD_INDEX ${t.emissiveColorMap.texCoord||0}`),t.emissiveColorMap.texCoordTransformMatrix&&r.push("#define USE_EMISSIVE_COLOR_MAP_TEX_COORD_TRANSFORM")),j(t.emissiveColor)||r.push("#define USE_EMISSIVE_COLOR"),j(t.clearCoat)||r.push("#define USE_CLEAR_COAT"),t.clearCoatNormalMap&&(r.push("#define USE_CLEAR_COAT_NORMAL_MAP"),r.push(`#define CLEAR_COAT_NORMAL_MAP_TEX_COORD_INDEX ${t.clearCoatNormalMap.texCoord||0}`),t.clearCoatNormalMap.texCoordTransformMatrix&&r.push("#define USE_CLEAR_COAT_NORMAL_MAP_TEX_COORD_TRANSFORM")),t.blend&&r.push("#define USE_BLEND"),r.push("#define NUM_AMBIENT_LIGHTS "+(o.numAmbientLights||0)),r.push("#define NUM_DIRECTIONAL_LIGHTS "+(o.numDirectionalLights||0)),r.push("#define NUM_POINT_LIGHTS "+(o.numPointLights||0)),r.push("#define NUM_SPOT_LIGHTS "+(o.numSpotLights||0)),r.push("#define NUM_AREA_LIGHTS "+(o.numAreaLights||0)),o.useReflectionProbes&&r.push("#define USE_REFLECTION_PROBES"),o.useTonemapping&&r.push("#define USE_TONEMAPPING"),{flags:r,vert:t.vert||A,frag:t.frag||P})},H.prototype.buildProgram=function(e,t){var n=this._ctx;let o=null;try{o=n.program({vert:e,frag:t})}catch(e){throw console.error("pex-renderer glsl error",e),o=n.program({vert:I,frag:U}),e}return o},H.prototype.getMaterialProgram=function(e,t,n,o){var{flags:i,vert:r,frag:a}=this.getMaterialProgramAndFlags(e,t,n,o),s=i.join("\n")+"\n",l=s+r,u=s+a,c=this._programCacheMap.getValue(i,r,a);return c||(c=this.buildProgram(this.parseShader(l,o),this.parseShader(u,o)),this._programCacheMap.setValue(i,r,a,c)),c},H.prototype.traverseTransformTree=function(e,t,n){e.enabled&&(t(e),e.children.forEach(e=>{this.traverseTransformTree(e,t,n)}),n&&n(e))},H.prototype.update=function(){this.entities=[],this.traverseTransformTree(this.root.transform,e=>{this.entities.push(e.entity),e.entity.components.forEach(e=>{e.update&&e.update()})},e=>{e.entity.components.forEach(e=>{e.afterUpdate&&e.afterUpdate()})})},H.prototype.getGeometryPipeline=function(e,t,n,o){const i=this._ctx,r=this.getMaterialProgram(e,t,n,o);this._pipelineCache||(this._pipelineCache={});const a=t.id+"_"+r.id;let s=this._pipelineCache[a];return s||(s=i.pipeline({program:r,depthTest:t.depthTest,depthWrite:t.depthWrite,depthFunc:t.depthFunc,blend:t.blend,blendSrcRGBFactor:t.blendSrcRGBFactor,blendSrcAlphaFactor:t.blendSrcAlphaFactor,blendDstRGBFactor:t.blendDstRGBFactor,blendDstAlphaFactor:t.blendDstAlphaFactor,cullFace:t.cullFace,cullFaceMode:t.cullFaceMode,primitive:e.primitive}),this._pipelineCache[a]=s),s},H.prototype.getOverlayCommand=function(){const e=this._ctx;if(!this._drawOverlayCmd){const t=e.program({vert:F,frag:z});this._drawOverlayCmd={name:"DrawOverlayCmd",attributes:{aPosition:e.vertexBuffer([[-1,-1],[1,-1],[1,1],[-1,1]]),aTexCoord0:e.vertexBuffer([[0,0],[1,0],[1,1],[0,1]])},indices:e.indexBuffer([[0,1,2],[0,2,3]]),pipeline:e.pipeline({program:t,depthTest:!1,depthWrite:!1,blend:!0,blendSrcRGBFactor:e.BlendFactor.One,blendDstRGBFactor:e.BlendFactor.OneMinusSrcAlpha,blendSrcAlphaFactor:e.BlendFactor.One,blendDstAlphaFactor:e.BlendFactor.OneMinusSrcAlpha,cullFace:!0,cullFaceMode:e.Face.Back,primitive:e.Primitive.Triangles})}}return this._drawOverlayCmd},H.prototype.getComponents=function(e){const t=[];for(let n=0;n<this.entities.length;n++){const o=this.entities[n].getComponent(e);o&&t.push(o)}return t},H.prototype.drawMeshes=function(e,t,n,o,l,u){const c=this._ctx;function f(t){return!!t.enabled&&(!e||!e.entity||(!e.entity.tags.length||(!t.entity.tags.length||t.entity.tags[0]===e.entity.tags[0])))}o=o||this.getComponents("Geometry").filter(f);const d=this.getComponents("AmbientLight").filter(f),h=this.getComponents("DirectionalLight").filter(f),p=this.getComponents("PointLight").filter(f),m=this.getComponents("SpotLight").filter(f),g=this.getComponents("AreaLight").filter(f),v=this.getComponents("ReflectionProbe").filter(f);t||n||(h.forEach(e=>{if(e.castShadows){const t=o.filter(e=>{const t=e.entity.getComponent("Material");return t&&t.castShadows});this.updateDirectionalLightShadowMap(e,t)}}),p.forEach(e=>{if(e.castShadows){const t=o.filter(e=>{const t=e.entity.getComponent("Material");return t&&t.castShadows});this.updatePointLightShadowMap(e,t)}}),m.forEach(e=>{if(e.castShadows){const t=o.filter(e=>{const t=e.entity.getComponent("Material");return t&&t.castShadows});this.updateSpotLightShadowMap(e,t)}}));var x=this._sharedUniforms=this._sharedUniforms||{};if(x.uOutputEncoding=q.rgbm?c.Encoding.RGBM:c.Encoding.Linear,u&&(x.uOutputEncoding=c.Encoding.Gamma),v.length>0&&(x.uReflectionMap=v[0]._reflectionMap,x.uReflectionMapEncoding=v[0]._reflectionMap.encoding),n?(x.uProjectionMatrix=n._projectionMatrix,x.uViewMatrix=n._viewMatrix):(x.uCameraPosition=e.entity.transform.worldPosition,x.uProjectionMatrix=e.projectionMatrix,x.uViewMatrix=e.viewMatrix,x.uInverseViewMatrix=e.inverseViewMatrix),e){const t=e.entity.getComponent("PostProcessing");t&&t.ssao&&(x.uAO=t._frameAOTex,x.uScreenSize=[e.viewport[2],e.viewport[3]]),t&&t.enabled||(x.uExposure=e.exposure)}d.forEach((e,t)=>{x["uAmbientLights["+t+"].color"]=e.color}),h.forEach((e,t)=>{const n=[0,0,1,0],o=[0,0,0];r.multMat4(n,e.entity.transform.modelMatrix),i.set(o,n),x["uDirectionalLights["+t+"].direction"]=o,x["uDirectionalLights["+t+"].color"]=e.color,x["uDirectionalLights["+t+"].castShadows"]=e.castShadows,x["uDirectionalLights["+t+"].projectionMatrix"]=e._projectionMatrix,x["uDirectionalLights["+t+"].viewMatrix"]=e._viewMatrix,x["uDirectionalLights["+t+"].near"]=e._near,x["uDirectionalLights["+t+"].far"]=e._far,x["uDirectionalLights["+t+"].bias"]=e.bias,x["uDirectionalLights["+t+"].shadowMapSize"]=e.castShadows?[e._shadowMap.width,e._shadowMap.height]:[0,0],x["uDirectionalLightShadowMaps["+t+"]"]=e.castShadows?e._shadowMap:this._dummyTexture2D}),p.forEach((e,t)=>{x["uPointLights["+t+"].position"]=e.entity.transform.worldPosition,x["uPointLights["+t+"].color"]=e.color,x["uPointLights["+t+"].range"]=e.range,x["uPointLights["+t+"].castShadows"]=e.castShadows,x["uPointLightShadowMaps["+t+"]"]=e.castShadows?e._shadowCubemap:this._dummyTextureCube}),m.forEach((e,t)=>{const n=[0,0,1,0],o=[0,0,0];r.multMat4(n,e.entity.transform.modelMatrix),i.set(o,n),x["uSpotLights["+t+"].position"]=e.entity.transform.position,x["uSpotLights["+t+"].direction"]=o,x["uSpotLights["+t+"].color"]=e.color,x["uSpotLights["+t+"].angle"]=e.angle,x["uSpotLights["+t+"].innerAngle"]=e.innerAngle,x["uSpotLights["+t+"].range"]=e.range,x["uSpotLights["+t+"].castShadows"]=e.castShadows,x["uSpotLights["+t+"].projectionMatrix"]=e._projectionMatrix,x["uSpotLights["+t+"].viewMatrix"]=e._viewMatrix,x["uSpotLights["+t+"].near"]=e._near,x["uSpotLights["+t+"].far"]=e._far,x["uSpotLights["+t+"].bias"]=e.bias,x["uSpotLights["+t+"].shadowMapSize"]=e.castShadows?[e._shadowMap.width,e._shadowMap.height]:[0,0],x["uSpotLightShadowMaps["+t+"]"]=e.castShadows?e._shadowMap:this._dummyTexture2D}),g.forEach((e,t)=>{x.ltc_mat=e.ltc_mat_texture,x.ltc_mag=e.ltc_mag_texture,x["uAreaLights["+t+"].position"]=e.entity.transform.position,x["uAreaLights["+t+"].color"]=e.color,x["uAreaLights["+t+"].intensity"]=e.intensity,x["uAreaLights["+t+"].rotation"]=e.entity.transform.rotation,x["uAreaLights["+t+"].size"]=[e.entity.transform.scale[0]/2,e.entity.transform.scale[1]/2]}),o.sort((e,t)=>{var n=e.entity.getComponent("Material"),o=t.entity.getComponent("Material");return(n.blend?1:0)-(o.blend?1:0)});var _=o.findIndex(e=>e.entity.getComponent("Material").blend);for(let i=0;i<o.length;i++){_===i&&l&&l.enabled&&l.draw(e,{outputEncoding:x.uOutputEncoding,backgroundMode:!0});const r=o[i],u=r.entity.transform;if(!u.enabled)continue;if(!r._attributes.aPosition)continue;const f=r.entity.getComponent("Material");if(!f.enabled||f.blend&&t)continue;const y=r.entity.getComponent("Skin"),b=f._uniforms;if(f.baseColorMap&&(b.uBaseColorMap=f.baseColorMap.texture||f.baseColorMap,f.baseColorMap.texCoordTransformMatrix&&(b.uBaseColorMapTexCoordTransform=f.baseColorMap.texCoordTransformMatrix)),b.uBaseColor=f.baseColor,f.emissiveColorMap&&(b.uEmissiveColorMap=f.emissiveColorMap.texture||f.emissiveColorMap,f.emissiveColorMap.texCoordTransformMatrix&&(b.uEmissiveColorMapTexCoordTransform=f.emissiveColorMap.texCoordTransformMatrix)),j(f.emissiveColor)||(b.uEmissiveColor=f.emissiveColor,b.uEmissiveIntensity=f.emissiveIntensity),f.useSpecularGlossinessWorkflow?(f.diffuse&&(b.uDiffuse=f.diffuse),f.specular&&(b.uSpecular=f.specular),j(f.glossiness)||(b.uGlossiness=f.glossiness),f.diffuseMap&&(b.uDiffuseMap=f.diffuseMap.texture||f.diffuseMap,f.diffuseMap.texCoordTransformMatrix&&(b.uDiffuseMapTexCoordTransform=f.diffuseMap.texCoordTransformMatrix)),f.specularGlossinessMap&&(b.uSpecularGlossinessMap=f.specularGlossinessMap.texture||f.specularGlossinessMap,f.specularGlossinessMap.texCoordTransformMatrix&&(b.uSpecularGlossinessMapTexCoordTransform=f.specularGlossinessMap.texCoordTransformMatrix))):f.unlit||(f.metallicMap&&(b.uMetallicMap=f.metallicMap.texture||f.metallicMap,f.metallicMap.texCoordTransformMatrix&&(b.uMetallicMapTexCoordTransform=f.metallicMap.texCoordTransformMatrix)),j(f.metallic)||(b.uMetallic=f.metallic),f.roughnessMap&&(b.uRoughnessMap=f.roughnessMap.texture||f.roughnessMap,f.roughnessMap.texCoordTransformMatrix&&(b.uRoughnessMapTexCoordTransform=f.roughnessMap.texCoordTransformMatrix)),j(f.roughness)||(b.uRoughness=f.roughness),f.metallicRoughnessMap&&(b.uMetallicRoughnessMap=f.metallicRoughnessMap.texture||f.metallicRoughnessMap,f.metallicRoughnessMap.texCoordTransformMatrix&&(b.uMetallicRoughnessMapTexCoordTransform=f.metallicRoughnessMap.texCoordTransformMatrix))),b.uReflectance=f.reflectance,j(f.clearCoat)||(b.uClearCoat=f.clearCoat,b.uClearCoatRoughness=f.clearCoatRoughness||.04),f.clearCoatNormalMap&&(b.uClearCoatNormalMap=f.clearCoatNormalMap,b.uClearCoatNormalMapScale=f.clearCoatNormalMapScale),f.normalMap&&(b.uNormalMap=f.normalMap.texture||f.normalMap,b.uNormalScale=f.normalScale,f.normalMap.texCoordTransformMatrix&&(b.uNormalMapTexCoordTransform=f.normalMap.texCoordTransformMatrix)),f.occlusionMap&&(b.uOcclusionMap=f.occlusionMap.texture||f.occlusionMap,f.occlusionMap.texCoordTransformMatrix&&(b.uOcclusionMapTexCoordTransform=f.occlusionMap.texCoordTransformMatrix)),f.displacementMap&&(b.uDisplacementMap=f.displacementMap,b.uDisplacement=f.displacement),f.alphaMap&&(b.uAlphaMap=f.alphaMap.texture||f.alphaMap,f.alphaMap.texCoordTransformMatrix&&(b.uAlphaMapTexCoordTransform=f.alphaMap.texCoordTransformMatrix)),f.uniforms)for(var M in f.uniforms)x[M]=f.uniforms[M];y&&(b.uJointMat=y.jointMatrices);let w=null;if(t&&!n)w=this.getGeometryPipeline(r,f,y,{depthPrePassOnly:!0});else if(t)w=this.getGeometryPipeline(r,f,y,{depthPassOnly:!0});else{const t=e.entity.getComponent("PostProcessing");w=this.getGeometryPipeline(r,f,y,{numAmbientLights:d.length,numDirectionalLights:h.length,numPointLights:p.length,numSpotLights:m.length,numAreaLights:g.length,useReflectionProbes:v.length,useSSAO:t&&t.enabled&&t.ssao,useTonemapping:!(t&&t.enabled)})}var S;void 0!==f.alphaTest&&(x.uAlphaTest=f.alphaTest),x.uPointSize=f.pointSize,Object.assign(b,x),b.uModelMatrix=u.modelMatrix,S=n?n._viewMatrix:e.viewMatrix;var C=s.copy(S);s.mult(C,u.modelMatrix),s.invert(C),s.transpose(C),b.uNormalMatrix=a.fromMat4(a.create(),C),c.submit({name:"drawGeometry",attributes:r._attributes,indices:r._indices,count:r.count,pipeline:w,uniforms:b,instances:r.instances})}-1===_&&l&&l.enabled&&l.draw(e,{outputEncoding:x.uOutputEncoding,backgroundMode:!0})},H.prototype.draw=function(){const e=this._ctx;if(!q.paused){this.update(),q.profiler&&q.profiler.startFrame();var t=this.getComponents("Camera"),n=this.getComponents("Overlay"),o=this.getComponents("Skybox");this.getComponents("ReflectionProbe").forEach(e=>{e.dirty&&e.update((e,t)=>{o.length>0&&o[0].draw(e,{outputEncoding:t})})}),t.filter(e=>e.enabled).forEach(t=>{const n=[t.viewport[2],t.viewport[3]],i=[Math.floor(t.viewport[2]/2),Math.floor(t.viewport[3]/2)],r=[0,0,Math.floor(t.viewport[2]/2),Math.floor(t.viewport[3]/2)],a=t.entity.getComponent("PostProcessing");if(a&&a.enabled&&(q.profiler&&q.profiler.time("depthPrepass",!0),e.submit(a._drawFrameNormalsFboCommand,()=>{const e=t.far;t.set({far:.99*e}),this.drawMeshes(t,!0),t.set({far:e})}),q.profiler&&q.profiler.timeEnd("depthPrepass")),a&&a.enabled&&a.ssao&&(q.profiler&&q.profiler.time("ssao",!0),e.submit(a._ssaoCmd,{uniforms:{uNear:t.near,uFar:t.far,uFov:t.fov,viewMatrix:t.viewMatrix,uInverseViewMatrix:s.invert(s.copy(t.viewMatrix)),viewProjectionInverseMatrix:s.invert(s.mult(s.copy(t.viewMatrix),t.projectionMatrix)),cameraPositionWorldSpace:t.entity.transform.worldPosition,uIntensity:a.ssaoIntensity,uNoiseScale:[10,10],uSampleRadiusWS:a.ssaoRadius,uBias:a.ssaoBias,uScreenSize:n}}),q.profiler&&q.profiler.timeEnd("ssao"),q.profiler&&q.profiler.time("ssao-blur",!0),e.submit(a._bilateralBlurHCmd,{uniforms:{near:t.near,far:t.far,sharpness:a.ssaoBlurSharpness,imageSize:n,depthMapSize:n,direction:[a.ssaoBlurRadius,0]}}),e.submit(a._bilateralBlurVCmd,{uniforms:{near:t.near,far:t.far,sharpness:a.ssaoBlurSharpness,imageSize:n,depthMapSize:n,direction:[0,a.ssaoBlurRadius]}}),q.profiler&&q.profiler.timeEnd("ssao-blur")),q.profiler&&q.profiler.time("drawFrame",!0),a&&a.enabled?e.submit(a._drawFrameFboCommand,()=>{this.drawMeshes(t,!1,null,null,o[0],!1)}):e.submit({viewport:t.viewport},()=>{this.drawMeshes(t,!1,null,null,o[0],!0)}),q.profiler&&q.profiler.timeEnd("drawFrame"),q.profiler&&q.profiler.time("postprocess"),a&&a.enabled&&a.bloom){e.submit(a._thresholdCmd,{uniforms:{uExposure:t.exposure,uBloomThreshold:a.bloomThreshold,imageSize:i},viewport:r});for(let t=0;t<5;t++)e.submit(a._bloomHCmd,{uniforms:{direction:[a.bloomRadius,0],imageSize:i},viewport:r}),e.submit(a._bloomVCmd,{uniforms:{direction:[0,a.bloomRadius],imageSize:i},viewport:r})}if(a&&a.enabled&&a.dof){q.profiler&&q.profiler.time("dof",!0);for(let o=0;o<a.dofIterations;o++)e.submit(a._dofBlurHCmd,{uniforms:{near:t.near,far:t.far,sharpness:0,imageSize:n,depthMapSize:n,direction:[a.dofRadius,0],uDOFDepth:a.dofDepth,uDOFRange:a.dofRange}}),e.submit(a._dofBlurVCmd,{uniforms:{near:t.near,far:t.far,sharpness:0,imageSize:n,depthMapSize:n,direction:[0,a.dofRadius],uDOFDepth:a.dofDepth,uDOFRange:a.dofRange}});q.profiler&&q.profiler.timeEnd("dof")}a&&a.enabled&&(e.submit(a._blitCmd,{uniforms:{uNear:t.near,uFar:t.far,uFov:t.fov,uExposure:t.exposure,uFXAA:a.fxaa,uFog:a.fog,uBloom:a.bloom,uBloomIntensity:a.bloomIntensity,uSunDispertion:a.sunDispertion,uSunIntensity:a.sunIntensity,uSunColor:a.sunColor,uInscatteringCoeffs:a.inscatteringCoeffs,uFogColor:a.fogColor,uFogStart:a.fogStart,uFogDensity:a.fogDensity,uSunPosition:a.sunPosition,uOutputEncoding:e.Encoding.Gamma,uScreenSize:n},viewport:t.viewport}),q.profiler&&q.profiler.timeEnd("postprocess"))}),n.filter(e=>e.enabled).forEach(t=>{const n=[t.x,t.y,t.width,t.height];(t.x>1||t.y>1||t.width>1||t.height>1)&&(n[0]/=e.gl.drawingBufferWidth,n[1]/=e.gl.drawingBufferHeight,n[2]/=e.gl.drawingBufferWidth,n[3]/=e.gl.drawingBufferHeight),n[1]=1-n[1]-n[3],e.submit(this.getOverlayCommand(),{uniforms:{uBounds:n,uTexture:t.texture}})}),q.profiler&&q.profiler.endFrame()}},H.prototype.entity=function(e,t){return f(e,t,this)},H.prototype.add=function(e,t){return e===this.root?e:(e.transform.set({parent:t?t.transform:e.transform.parent||this.root.transform}),e)},H.prototype.remove=function(e){e.transform.set({parent:null})},H.prototype.transform=function(e){return d(Object.assign({ctx:this._ctx},e))},H.prototype.skin=function(e){return h(Object.assign({ctx:this._ctx},e))},H.prototype.morph=function(e){return p(Object.assign({ctx:this._ctx},e))},H.prototype.animation=function(e){return m(Object.assign({ctx:this._ctx},e))},H.prototype.geometry=function(e){return g(Object.assign({ctx:this._ctx},e))},H.prototype.material=function(e){return v(Object.assign({ctx:this._ctx},e))},H.prototype.camera=function(e){return x(Object.assign({ctx:this._ctx,rgbm:q.rgbm},e))},H.prototype.postProcessing=function(e){return _(Object.assign({ctx:this._ctx,rgbm:q.rgbm},e))},H.prototype.orbiter=function(e){return M(Object.assign({ctx:this._ctx},e))},H.prototype.ambientLight=function(e){return S(Object.assign({ctx:this._ctx},e))},H.prototype.directionalLight=function(e){return C(Object.assign({ctx:this._ctx},e))},H.prototype.pointLight=function(e){return y(Object.assign({ctx:this._ctx},e))},H.prototype.spotLight=function(e){return b(Object.assign({ctx:this._ctx},e))},H.prototype.areaLight=function(e){return w(Object.assign({ctx:this._ctx},e))},H.prototype.reflectionProbe=function(e){return E(Object.assign({ctx:this._ctx,rgbm:q.rgbm},e))},H.prototype.skybox=function(e){return T(Object.assign({ctx:this._ctx,rgbm:q.rgbm},e))},H.prototype.overlay=function(e){return L(Object.assign({ctx:this._ctx},e))},H.prototype.loadScene=async function(e,t={}){const n=o.extname(e),[,i]=t.loader||G.find(([e])=>e.includes(n))||[];if(i){const n=await i(e,this,t);return n.length>1?n:n[0]}console.error(`pex-renderer: No loader found for file extension ${n}`)},e.exports=function(e){return new H(e)}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var o=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach(function(e){o[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,s=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var u in n=Object(arguments[l]))i.call(n,u)&&(s[u]=n[u]);if(o){a=o(n);for(var c=0;c<a.length;c++)r.call(n,a[c])&&(s[a[c]]=n[a[c]])}}return s}},function(e,t,n){(function(e){var o=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),n={},o=0;o<t.length;o++)n[t[o]]=Object.getOwnPropertyDescriptor(e,t[o]);return n},i=/%[sdj%]/g;t.format=function(e){if(!v(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(s(arguments[n]));return t.join(" ")}n=1;for(var o=arguments,r=o.length,a=String(e).replace(i,function(e){if("%%"===e)return"%";if(n>=r)return e;switch(e){case"%s":return String(o[n++]);case"%d":return Number(o[n++]);case"%j":try{return JSON.stringify(o[n++])}catch(e){return"[Circular]"}default:return e}}),l=o[n];n<r;l=o[++n])m(l)||!M(l)?a+=" "+l:a+=" "+s(l);return a},t.deprecate=function(n,o){if(void 0!==e&&!0===e.noDeprecation)return n;if(void 0===e)return function(){return t.deprecate(n,o).apply(this,arguments)};var i=!1;return function(){if(!i){if(e.throwDeprecation)throw new Error(o);e.traceDeprecation?console.trace(o):console.error(o),i=!0}return n.apply(this,arguments)}};var r,a={};function s(e,n){var o={seen:[],stylize:u};return arguments.length>=3&&(o.depth=arguments[2]),arguments.length>=4&&(o.colors=arguments[3]),p(n)?o.showHidden=n:n&&t._extend(o,n),x(o.showHidden)&&(o.showHidden=!1),x(o.depth)&&(o.depth=2),x(o.colors)&&(o.colors=!1),x(o.customInspect)&&(o.customInspect=!0),o.colors&&(o.stylize=l),c(o,e,o.depth)}function l(e,t){var n=s.styles[t];return n?"["+s.colors[n][0]+"m"+e+"["+s.colors[n][1]+"m":e}function u(e,t){return e}function c(e,n,o){if(e.customInspect&&n&&y(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(o,e);return v(i)||(i=c(e,i,o)),i}var r=function(e,t){if(x(t))return e.stylize("undefined","undefined");if(v(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}if(g(t))return e.stylize(""+t,"number");if(p(t))return e.stylize(""+t,"boolean");if(m(t))return e.stylize("null","null")}(e,n);if(r)return r;var a=Object.keys(n),s=function(e){var t={};return e.forEach(function(e,n){t[e]=!0}),t}(a);if(e.showHidden&&(a=Object.getOwnPropertyNames(n)),C(n)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return f(n);if(0===a.length){if(y(n)){var l=n.name?": "+n.name:"";return e.stylize("[Function"+l+"]","special")}if(_(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(S(n))return e.stylize(Date.prototype.toString.call(n),"date");if(C(n))return f(n)}var u,M="",b=!1,w=["{","}"];(h(n)&&(b=!0,w=["[","]"]),y(n))&&(M=" [Function"+(n.name?": "+n.name:"")+"]");return _(n)&&(M=" "+RegExp.prototype.toString.call(n)),S(n)&&(M=" "+Date.prototype.toUTCString.call(n)),C(n)&&(M=" "+f(n)),0!==a.length||b&&0!=n.length?o<0?_(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),u=b?function(e,t,n,o,i){for(var r=[],a=0,s=t.length;a<s;++a)T(t,String(a))?r.push(d(e,t,n,o,String(a),!0)):r.push("");return i.forEach(function(i){i.match(/^\d+$/)||r.push(d(e,t,n,o,i,!0))}),r}(e,n,o,s,a):a.map(function(t){return d(e,n,o,s,t,b)}),e.seen.pop(),function(e,t,n){if(e.reduce(function(e,t){return 0,t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1];return n[0]+t+" "+e.join(", ")+" "+n[1]}(u,M,w)):w[0]+M+w[1]}function f(e){return"["+Error.prototype.toString.call(e)+"]"}function d(e,t,n,o,i,r){var a,s,l;if((l=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?s=l.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):l.set&&(s=e.stylize("[Setter]","special")),T(o,i)||(a="["+i+"]"),s||(e.seen.indexOf(l.value)<0?(s=m(n)?c(e,l.value,null):c(e,l.value,n-1)).indexOf("\n")>-1&&(s=r?s.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+s.split("\n").map(function(e){return"   "+e}).join("\n")):s=e.stylize("[Circular]","special")),x(a)){if(r&&i.match(/^\d+$/))return s;(a=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=e.stylize(a,"string"))}return a+": "+s}function h(e){return Array.isArray(e)}function p(e){return"boolean"==typeof e}function m(e){return null===e}function g(e){return"number"==typeof e}function v(e){return"string"==typeof e}function x(e){return void 0===e}function _(e){return M(e)&&"[object RegExp]"===b(e)}function M(e){return"object"==typeof e&&null!==e}function S(e){return M(e)&&"[object Date]"===b(e)}function C(e){return M(e)&&("[object Error]"===b(e)||e instanceof Error)}function y(e){return"function"==typeof e}function b(e){return Object.prototype.toString.call(e)}function w(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(n){if(x(r)&&(r=e.env.NODE_DEBUG||""),n=n.toUpperCase(),!a[n])if(new RegExp("\\b"+n+"\\b","i").test(r)){var o=e.pid;a[n]=function(){var e=t.format.apply(t,arguments);console.error("%s %d: %s",n,o,e)}}else a[n]=function(){};return a[n]},t.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=h,t.isBoolean=p,t.isNull=m,t.isNullOrUndefined=function(e){return null==e},t.isNumber=g,t.isString=v,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=x,t.isRegExp=_,t.isObject=M,t.isDate=S,t.isError=C,t.isFunction=y,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=n(30);var E=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function T(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){var e,n;console.log("%s - %s",(e=new Date,n=[w(e.getHours()),w(e.getMinutes()),w(e.getSeconds())].join(":"),[e.getDate(),E[e.getMonth()],n].join(" ")),t.format.apply(t,arguments))},t.inherits=n(31),t._extend=function(e,t){if(!t||!M(t))return e;for(var n=Object.keys(t),o=n.length;o--;)e[n[o]]=t[n[o]];return e};var L="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function O(e,t){if(!e){var n=new Error("Promise was rejected with a falsy value");n.reason=e,e=n}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(L&&e[L]){var t;if("function"!=typeof(t=e[L]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,L,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,n,o=new Promise(function(e,o){t=e,n=o}),i=[],r=0;r<arguments.length;r++)i.push(arguments[r]);i.push(function(e,o){e?n(e):t(o)});try{e.apply(this,i)}catch(e){n(e)}return o}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),L&&Object.defineProperty(t,L,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,o(e))},t.promisify.custom=L,t.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function n(){for(var n=[],o=0;o<arguments.length;o++)n.push(arguments[o]);var i=n.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var r=this,a=function(){return i.apply(r,arguments)};t.apply(this,n).then(function(t){e.nextTick(a,null,t)},function(t){e.nextTick(O,t,a)})}return Object.setPrototypeOf(n,Object.getPrototypeOf(t)),Object.defineProperties(n,o(t)),n}}).call(this,n(11))},function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){const o=n(19);let i=null,r=null;const a=250,s=860,l=10,u=16,c=11,f=c+"px Droid Sans Mono, Andale Mono, monospace";function d(e){return e<10?"  "+e:e<100?" "+e:e}function h(e){return function(t){return t[e]}}function p(e,t){return t.reduce((t,n)=>{var o=e(n);return t[o]||(t[o]=[]),t[o].push(n),t},{})}e.exports=function(e,t){const n=e.gl;o&&!i&&((i=document.createElement("canvas")).id="pex-renderer-profiler",i.width=2*a,i.height=2*s,e.gl.canvas.parentElement.appendChild(i),i.style.position="absolute",i.style.width=a+"px",i.style.height=s+"px",i.style.top=l+"px",i.style.right=l+"px",i.style.zIndex=1e3,r=i.getContext("2d"));const m={canvas:i,frame:0,flush:!0,measurements:{},commands:[],ctx2d:r,bufferCount:0,totalBufferCount:0,textureCount:0,totalTextureCount:0,programCount:0,totalProgramCount:0,framebufferCount:0,totalFramebufferCount:0,bindTextureCount:0,useProgramCount:0,setUniformCount:0,trianglesCount:0,drawElementsCount:0,drawElementsInstancedCount:0,drawArraysCount:0,drawArraysInstancedCount:0,linesCount:0,time:function(t,o){this.flush&&n.finish(),this.flush&&n.flush();let i=this.measurements[t];i||(i=this.measurements[t]={begin:0,end:0,last:0,total:0,count:0,avg:0,max:0},o&&(i.query=e.query())),this.measurements[t].start=window.performance?window.performance.now():Date.now(),i.query&&i.query.result&&(i.gpu=i.query.result/1e6),i.query&&e.beginQuery(i.query)},timeEnd:function(t){this.flush&&n.finish(),this.flush&&n.flush();const o=this.measurements[t];o&&(o.end=window.performance?window.performance.now():Date.now(),o.last=o.end-o.start,o.total+=o.last,o.max=Math.max(o.max,o.last),o.count++,o.avg=(9*o.avg+1*o.last)/10,o.query&&e.endQuery(o.query))},add:function(e,t){let n=null;try{throw new Error("Call stack capture")}catch(e){n=e.stack}this.commands.push({command:e,stack:n,label:t})},setFlush:function(e){this.flush=e},summary:function(){var e=[];const n=this.measurements.Frame;n&&e.push(`FPS: ${(1e3/n.avg).toFixed(3)}`);const o=this.measurements.FrameRAF;o&&e.push(`FPS (RAF): ${(1e3/o.avg).toFixed(3)}`),e.push("------"),e=e.concat(Object.keys(this.measurements).sort((e,t)=>this.measurements[e].start-this.measurements[t].start).map(e=>{const t=this.measurements[e];return`${e}: ${function(e){var t=Math.floor(10*e)/10,n=""+t;return t%1==0&&(n+=".0"),t<10&&(n=" "+n),n+""}(t.avg)} ${t.gpu?" / "+(Math.floor(10*t.gpu)/10).toFixed(1):""}`}));var i=t._ctx,r=i.resources.filter(e=>"texture"===e.class),a=0,s=p(h("pixelFormat"),r.filter(e=>e.target===i.gl.TEXTURE_2D)),l=p(h("pixelFormat"),r.filter(e=>e.target===i.gl.TEXTURE_CUBE_MAP));return r.forEach(e=>{var t=8;e.pixelFormat===i.PixelFormat.RGBA32F&&(t=32),e.pixelFormat===i.PixelFormat.RGBA16F&&(t=16),e.pixelFormat===i.PixelFormat.Depth&&(t=24);var n=t/8*4;e.target===i.gl.TEXTURE_2D?a+=e.width*e.height*n:e.target===i.gl.TEXTURE_CUBE_MAP&&(a+=e.width*e.height*n*6)}),e.push("------"),e.push(`Entities: ${d(t.entities.length)}`),e.push(`Geometries: ${d(t.getComponents("Geometry").length)}`),e.push(`Materials: ${d(t.getComponents("Material").length)}`),e.push(`Skins: ${d(t.getComponents("Skin").length)}`),e.push(`Animations: ${d(t.getComponents("Animation").length)}`),e.push(`Morphs: ${d(t.getComponents("Morph").length)}`),e.push(`Cameras: ${d(t.getComponents("Camera").length)}`),e.push(`Orbiters: ${d(t.getComponents("Orbiter").length)}`),e.push(`Reflection Probes: ${d(t.getComponents("ReflectionProbe").length)}`),e.push(`Skyboxes: ${d(t.getComponents("Skybox").length)}`),e.push(`Point Lights: ${d(t.getComponents("PointLight").length)}`),e.push(`Directional Lights: ${d(t.getComponents("DirectionalLight").length)}`),e.push(`Spot Lights: ${d(t.getComponents("SpotLight").length)}`),e.push(`Area Lights: ${d(t.getComponents("AreaLight").length)}`),e.push("------"),e.push(`Programs: ${d(t._ctx.resources.filter(e=>"program"===e.class).length)}`),e.push(`Passes: ${d(t._ctx.resources.filter(e=>"pass"===e.class).length)}`),e.push(`Pipelines: ${d(t._ctx.resources.filter(e=>"pipeline"===e.class).length)}`),e.push(`Textures 2D: ${d(t._ctx.resources.filter(e=>"texture"===e.class&&e.target===i.gl.TEXTURE_2D).length)}`),Object.keys(s).forEach(t=>{e.push(`${t.toUpperCase()}: ${d(s[t].length)}`)}),e.push(`Textures Cube: ${d(t._ctx.resources.filter(e=>"texture"===e.class&&e.target===i.gl.TEXTURE_CUBE_MAP).length)}`),Object.keys(l).forEach(t=>{e.push(`${t.toUpperCase()}: ${d(l[t].length)}`)}),e.push(`Texture VRAM: ${(a/1048576).toFixed(0)}MB`),e.push("------"),e.push(`Buffers: ${d(m.bufferCount)} / ${d(m.totalBufferCount)}`),e.push(`Textures: ${d(m.textureCount)} / ${d(m.totalTextureCount)}`),e.push(`Programs: ${d(m.programCount)} / ${d(m.totalProgramCount)}`),e.push(`FBOs: ${d(m.framebufferCount)} / ${d(m.totalFramebufferCount)}`),e.push("------"),e.push(`Lines: ${m.linesCount}`),e.push(`Triangles: ${m.trianglesCount}`),e.push(`Instanced Lines: ${m.instancedLinesCount}`),e.push(`Instanced Triangles: ${m.instancedTrianglesCount}`),e.push("------"),e.push(`Bind Texture: ${d(m.bindTextureCount)}`),e.push(`Use Program: ${d(m.useProgramCount)}`),e.push(`Set Uniform: ${d(m.setUniformCount)}`),e.push(`Draw Elements : ${d(m.drawElementsCount)}`),e.push(`Instanced Draw Elements: ${d(m.drawElementsInstancedCount)}`),e.push(`Draw Arrays : ${d(m.drawArraysCount)}`),e.push(`Instanced Draw Arrays: ${d(m.drawArraysInstancedCount)}`),e.push("------"),e=e.concat(this.commands.map(e=>`${e.label}: N/A`))},setEnabled:function(e){o&&(i.style.display=e?"block":"none")},startFrame:function(){this.timeEnd("FrameRAF"),this.time("FrameRAF"),this.time("Frame"),m.bindTextureCount=0,m.useProgramCount=0,m.setUniformCount=0,m.linesCount=0,m.trianglesCount=0,m.instancedLinesCount=0,m.instancedTrianglesCount=0,m.drawElementsCount=0,m.drawElementsInstancedCount=0,m.drawArraysCount=0,m.drawArraysInstancedCount=0},endFrame:function(){this.timeEnd("Frame"),function(){if(m.frame++,!r)return void(m.frame%30==0&&console.log("profiler",m.summary()));const e=m.summary();r.save(),r.scale(2,2),r.fillStyle="rgba(0, 0, 0, 0.5)",r.clearRect(0,0,i.width,i.height),r.fillRect(0,0,i.width,i.height),r.font=f,r.fillStyle="#FFF",e.forEach((e,t)=>{const n=r.measureText(e).width;r.fillText(e,a-l-n,l+c+u*t)}),r.restore()}()}};function g(e,t){const o=n[e];n[e]=function(){return t(arguments),o.apply(this,arguments)}}g("createBuffer",()=>{m.bufferCount++,m.totalBufferCount++}),g("deleteBuffer",()=>{m.bufferCount--}),g("createProgram",()=>{m.programCount++,m.totalProgramCount++}),g("deleteProgram",()=>{m.programCount--}),g("createTexture",()=>{m.textureCount++,m.totalTextureCount++}),g("deleteTexture",()=>{m.textureCount--}),g("createFramebuffer",()=>{m.framebufferCount++,m.totalFramebufferCount++}),g("deleteFramebuffer",()=>{m.framebufferCount--}),g("bindTexture",()=>m.bindTextureCount++),g("useProgram",()=>m.useProgramCount++),g("drawElements",e=>{const t=e[0],o=e[1];t===n.LINES&&(m.linesCount+=o),t===n.TRIANGLES&&(m.trianglesCount+=o),m.drawElementsCount++}),g("drawArrays",e=>{const t=e[0],o=e[2];t===n.LINES&&(m.linesCount+=o),t===n.TRIANGLES&&(m.trianglesCount+=o),m.drawArraysCount++});for(let e in n)0===e.indexOf("uniform")&&g(e,()=>m.setUniformCount++);function v(e,t,n){if(!e)return void console.log("profiler",`Ext ${e} it not available`);const o=e[t];e[t]=function(){return n(arguments),o.apply(e,arguments)}}return v(n.getExtension("ANGLE_instanced_arrays"),"drawElementsInstancedANGLE",e=>{const t=e[0],o=e[1],i=e[4];t===n.LINES&&(m.instancedLinesCount+=o*i),t===n.TRIANGLES&&(m.instancedTrianglesCount+=o*i),m.drawElementsInstancedCount++}),v(n.getExtension("ANGLE_instanced_arrays"),"drawArraysInstancedANGLE",e=>{const t=e[0],o=e[2],i=e[3];t===n.LINES&&(m.instancedLinesCount+=o*i),t===n.TRIANGLES&&(m.instancedTrianglesCount+=o*i),m.drawArraysInstancedCount++}),m}},function(e,t,n){const o=n(20),i=n(12);let r=0;function a(e,t,n){i(!t||Array.isArray(t),"Entity tags must be an array or null"),this.id=r++,this.tags=t||[],this.renderer=n,this.components=e?e.slice(0):[],this.componentsMap=new Map,this.components.forEach(e=>{this.componentsMap.set(e.type,e)}),this.transform=this.getComponent("Transform"),this.transform||(this.transform=o({parent:null}),this.components.unshift(this.transform)),this.components.forEach(e=>e.init(this))}a.prototype.dispose=function(){this.components.forEach(e=>{e.dispose&&e.dispose()}),this.transform.set({parent:null})},a.prototype.addComponent=function(e){this.components.push(e),this.componentsMap.set(e.type,e),e.init(this)},a.prototype.removeComponent=function(e){var t=this.components.indexOf(e);i(-1!==t,"Removing component that doesn't belong to this entity"),this.components.splice(t,1),this.componentsMap.delete(e.type),this.components.forEach(t=>{t.type===e.type&&this.componentsMap.set(t.type,t)})},a.prototype.getComponent=function(e){return this.componentsMap.get(e)},e.exports=function(e,t,n){return new a(e,t,n)}},function(e,t,n){const o=n(0),i=n(3);function r(e){this.type="Skin",this.enabled=!0,this.changed=new o,this.entity=null,this.joints=[],this.jointMatrices=[],this.inverseBindMatrices=[],this.set(e)}r.prototype.init=function(e){this.entity=e},r.prototype.set=function(e){if(Object.assign(this,e),Object.keys(e).forEach(e=>this.changed.dispatch(e)),e.joints){this.jointMatrices.length=this.joints.length;for(let e=0;e<this.joints.length;e++)this.jointMatrices[e]=this.jointMatrices[e]||i.create()}},r.prototype.update=function(){if(this.enabled)for(let e=0;e<this.joints.length;e++){const t=this.joints[e],n=this.jointMatrices[e];i.identity(n),i.mult(n,t.transform.modelMatrix),i.mult(n,this.inverseBindMatrices[e])}},e.exports=function(e){return new r(e)}},function(e,t,n){const o=n(0);function i(e){this.type="Morph",this.enabled=!0,this.changed=new o,this.entity=null,this.dirty=!1,this.sources=e.sources,this.current=e.current,this.targets=e.targets,this.weights=e.weights||[],this.set(e)}i.prototype.init=function(e){this.entity=e,this.current=this.current||Object.keys(this.sources).reduce((e,t)=>(e[t]=[...this.sources[t]],e),{})},i.prototype.set=function(e){Object.assign(this,e),Object.keys(e).forEach(e=>this.changed.dispatch(e)),this.dirty=!0},i.prototype.update=function(){this.dirty&&this.enabled&&(this.dirty=!1,Object.keys(this.sources).forEach(e=>{const t=this.sources[e],n=this.targets[e];this.current[e]=t.map((e,t)=>{let o=e.length?[0,0,0]:0;return n.forEach((n,i)=>{const r=this.weights[i],a=n[t];e.length?(o[0]+=a[0]*r,o[1]+=a[1]*r,o[2]+=a[2]*r):o+=a*r}),e.length?(o[0]+=e[0],o[1]+=e[1],o[2]+=e[2]):o+=e,o})}),this.entity.getComponent("Geometry").set(this.current))},e.exports=function(e){return new i(e)}},function(e,t,n){const o=n(14),i=n(4),r=n(9),a=n(5),s=n(0);let l=i.create(),u=o.create();function c(e){this.type="Animation",this.entity=null,this.enabled=!0,this.playing=!1,this.loop=!1,this.time=0,this.prevTime=Date.now(),this.channels=e.channels||[],this.changed=new s,this.set(e)}c.prototype.init=function(e){this.entity=e},c.prototype.set=function(e){Object.assign(this,e),Object.keys(e).forEach(e=>this.changed.dispatch(e)),(e.autoplay||e.playing)&&(this.playing=!0,this.time=0,this.prevTime=Date.now())},c.prototype.update=function(){if(!this.playing||!this.enabled)return;const e=this.channels[0].input[this.channels[0].input.length-1],t=Date.now(),n=(t-this.prevTime)/1e3;this.prevTime=t,this.time+=n,this.time>e&&(this.loop?this.time%=e:(this.time=0,this.set({playing:!1})));for(let e=0;e<this.channels.length;e++){const t=this.channels[e],n=t.input;let s,c;for(let e=0;e<n.length&&(c=e,!(n[e]>=this.time));e++)s=c;const f="rotation"===t.path,d=t.output,h=n[s],p=n[c]-h,m=(this.time-h)/p;if(void 0!==s){switch(t.interpolation){case"STEP":f?o.set(u,d[s]):i.set(l,d[s]);break;case"CUBICSPLINE":{const e=f?r:i,t=m*m,a=t*m,h=e.copy(d[3*s+1]),g=e.copy(d[3*c+1]),v=s?e.scale(e.copy(d[3*s+2]),p):e.create(),x=c!==n.length-1?e.scale(e.copy(d[3*s]),p):e.create(),_=e.scale(h,2*a-3*t+1),M=e.scale(v,a-2*t+m),S=e.scale(g,-2*a+3*t),C=e.scale(x,a-t);f?o.set(u,o.normalize([_[0]+M[0]+S[0]+C[0],_[1]+M[1]+S[1]+C[1],_[2]+M[2]+S[2]+C[2],_[3]+M[3]+S[3]+C[3]])):i.set(l,i.add(i.add(i.add(_,M),S),C));break}default:f?o.slerp(o.set(u,d[s]),d[c],m):i.set(l,d[c].map((e,t)=>a.lerp(d[s][t],e,m)))}f?t.target.transform.set({rotation:o.copy(u)}):"translation"===t.path?t.target.transform.set({position:i.copy(l)}):"scale"===t.path?t.target.transform.set({scale:i.copy(l)}):"weights"===t.path&&t.target.getComponent("Morph").set({weights:d[c].slice()})}}},e.exports=function(e){return new c(e)}},function(e,t,n){const o=n(0),i=n(13),r={positions:"aPosition",normals:"aNormal",tangents:"aTangent",texCoords:"aTexCoord0",texCoords1:"aTexCoord1",uvs:"aTexCoord0",uvs2:"aTexCoord1",vertexColors:"aVertexColor",offsets:"aOffset",scales:"aScale",rotations:"aRotation",colors:"aColor",joints:"aJoint",weights:"aWeight"},a={indices:"indices",cells:"indices"};function s(e){this.type="Geometry",this.enabled=!0,this.changed=new o,this.bounds=i.create(),this.primitive=e.ctx.Primitive.Triangles,this.count=void 0,this._indices=null,this._attributes={},this.set(e)}s.prototype.init=function(e){this.entity=e},s.prototype.set=function(e){const t=e.ctx||this.ctx;Object.assign(this,e);for(let n in e){const o=e[n];if(r[n]){const a=r[n];let s=this._attributes[a];s||(s=this._attributes[a]={buffer:null,offset:0,stride:0,divisor:0,type:void 0});const l=void 0!==o.length?o:o.data;if(l?(s.buffer?t.update(s.buffer,{data:l,type:o.type||s.type}):s.buffer=t.vertexBuffer({data:l,type:o.type||s.type}),"aPosition"===a&&l[0].length&&(this.bounds=e.bounds||i.fromPoints(l))):o.buffer&&(s.buffer=o.buffer),s.type=o.type||s.buffer.type,void 0!==o.offset&&(s.offset=o.offset),void 0!==o.stride&&(s.stride=o.stride),void 0!==o.divisor&&(s.divisor=o.divisor),!s.type)throw new Error(`Unknown ${a} attrib type`)}}for(let n in e){if(a[n]){const o=e[n];let i=this._indices;i||(i=this._indices={buffer:null,offset:0,type:void 0});const r=void 0!==o.length?o:o.data;if(r?i.buffer?t.update(i.buffer,{data:r,type:o.type||i.type}):i.buffer=t.indexBuffer({data:r,type:o.type||i.type}):o.buffer&&(i.buffer=o.buffer),void 0!==o.offset&&(i.offset=o.offset),void 0!==o.count&&(i.count=o.count),i.type=o.type||i.buffer.type,!i.type)throw new Error("Unknown indices type")}this.changed.dispatch(n)}},e.exports=function(e){return new s(e)}},function(e,t,n){const o=n(0),{mat3:i,mat2x3:r}=n(10);let a=0;const s=r.create(),l=["baseColorMap","emissiveColorMap","matallicMap","roughnessMap","metallicRoughnessMap","normalMap","occlusionMap","diffuseMap","specularGlossinessMap"];function u(e){this.type="Material",this.id="Material_"+a++,this.enabled=!0,this.changed=new o,this._uniforms={};const t=e.ctx;this.baseColor=[1,1,1,1],this.baseColorMap=null,this.useSpecularGlossinessWorkflow=e.useSpecularGlossinessWorkflow||!1,this.unlit=e.unlit||!1,e.useSpecularGlossinessWorkflow?(this.diffuse=[1,1,1,1],this.diffuseMap=null,this.specular=[1,1,1],this.glossiness=1,this.specularGlossinessMap=null):this.unlit||(this.metallic=1,this.matallicMap=null,this.roughness=1,this.roughnessMap=null,this.metallicRoughnessMap=null),this.normalMap=null,this.normalScale=1,this.displacementMap=null,this.displacement=0,this.emissiveColor=null,this.emissiveIntensity=1,this.emissiveColorMap=null,this.occlusionMap=null,this.reflectance=.5,this.clearCoat=null,this.clearCoatRoughness=null,this.clearCoatNormalMap=null,this.clearCoatNormalMapScale=1,this.alphaMap=null,this.alphaTest=void 0,this.depthTest=!0,this.depthWrite=!0,this.depthFunc=t.DepthFunc.LessEqual,this.blend=!1,this.blendSrcRGBFactor=t.BlendFactor.One,this.blendSrcAlphaFactor=t.BlendFactor.One,this.blendDstRGBFactor=t.BlendFactor.One,this.blendDstAlphaFactor=t.BlendFactor.One,this.cullFace=!0,this.cullFaceMode=t.Face.Back,this.pointSize=1,this.castShadows=!1,this.receiveShadows=!1,this.set(e)}u.prototype.init=function(e){this.entity=e},u.prototype.set=function(e){Object.assign(this,e);const t=Object.keys(e),n=t.filter(e=>l.includes(e));if(n.length)for(let e=0;e<n.length;e++){const t=this[n[e]];t&&t.texture&&(r.identity(s),r.translate(s,t.offset||[0,0]),r.rotate(s,-t.rotation||0),r.scale(s,t.scale||[1,1]),t.texCoordTransformMatrix=i.fromMat2x3(t.texCoordTransformMatrix?i.identity(t.texCoordTransformMatrix):i.create(),s))}t.forEach(e=>this.changed.dispatch(e))},e.exports=function(e){return new u(e)}},function(e,t){e.exports={create:function(){return[1,0,0,1,0,0]},set:function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e},identity:function(e){return e[0]=e[3]=1,e[1]=e[2]=e[4]=e[5]=0,e},mult:function(e,t){let n=e[0],o=e[1],i=e[2],r=e[3],a=e[4],s=e[5],l=t[0],u=t[1],c=t[2],f=t[3],d=t[4],h=t[5];return e[0]=n*l+i*u,e[1]=o*l+r*u,e[2]=n*c+i*f,e[3]=o*c+r*f,e[4]=n*d+i*h+a,e[5]=o*d+r*h+s,e},translate:function(e,t){let n=e[0],o=e[1],i=e[2],r=e[3],a=e[4],s=e[5],l=t[0],u=t[1];return e[0]=n,e[1]=o,e[2]=i,e[3]=r,e[4]=n*l+i*u+a,e[5]=o*l+r*u+s,e},rotate:function(e,t){let n=e[0],o=e[1],i=e[2],r=e[3],a=Math.sin(t),s=Math.cos(t);return e[0]=n*s+i*a,e[1]=o*s+r*a,e[2]=n*-a+i*s,e[3]=o*-a+r*s,e},scale:function(e,t){let n=e[0],o=e[1],i=e[2],r=e[3];return e[0]=n*t[0],e[1]=o*t[0],e[2]=i*t[1],e[3]=r*t[1],e}}},function(e,t){var n={create:function(){return[0,0]},set:function(e,t){return e[0]=t[0],e[1]=t[1],e},copy:function(e){return e.slice(0)},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]},add:function(e,t){return e[0]+=t[0],e[1]+=t[1],e},addScaled:function(e,t,n){return e[0]+=t[0]*n,e[1]+=t[1]*n,e},sub:function(e,t){return e[0]-=t[0],e[1]-=t[1],e},scale:function(e,t){return e[0]*=t,e[1]*=t,e},dot:function(e,t){return e[0]*t[0]+e[1]*t[1]},length:function(e){var t=e[0],n=e[1];return Math.sqrt(t*t+n*n)},lengthSq:function(e){var t=e[0],n=e[1];return t*t+n*n},normalize:function(e){var t=e[0],n=e[1],o=Math.sqrt(t*t+n*n);return o=1/(o||1),e[0]*=o,e[1]*=o,e},distance:function(e,t){var n=t[0]-e[0],o=t[1]-e[1];return Math.sqrt(n*n+o*o)},distanceSq:function(e,t){var n=t[0]-e[0],o=t[1]-e[1];return n*n+o*o},limit:function(e,t){var n=e[0],o=e[1],i=n*n+o*o,r=t*t;if(r>0&&i>r){var a=t/Math.sqrt(i);e[0]*=a,e[1]*=a}return e},lerp:function(e,t,n){var o=e[0],i=e[1];return e[0]=o+(t[0]-o)*n,e[1]=i+(t[1]-i)*n,e},toString:function(e,t){var n=Math.pow(10,void 0!==t?t:4),o="[";return o+=Math.floor(e[0]*n)/n+", ",o+=Math.floor(e[1]*n)/n+"]"}};e.exports=n},function(e,t,n){const o=n(5).clamp;var i={create:function(){return[0,0,0]},fromQuat:function(e,t){var n=t[0]*t[0],i=t[1]*t[1],r=t[2]*t[2],a=t[3]*t[3];return e[0]=Math.atan2(2*(t[0]*t[3]-t[1]*t[2]),a-n-i+r),e[1]=Math.asin(o(2*(t[0]*t[2]+t[1]*t[3]),-1,1)),e[2]=Math.atan2(2*(t[2]*t[3]-t[0]*t[1]),a+n-i-r),e}};e.exports=i},function(e,t,n){const o=n(0),i=n(3),r=n(4);function a(e){const t=e.ctx.gl;this.type="Camera",this.projection=e.projection||"perspective",this.enabled=!0,this.changed=new o,this.near=.1,this.far=100,this.aspect=1,this.exposure=1,this.viewMatrix=i.create(),this.inverseViewMatrix=i.create(),"perspective"===this.projection?(this.fov=Math.PI/4,this.projectionMatrix=i.perspective(i.create(),this.fov,this.aspect,this.near,this.far)):"orthographic"===this.projection&&(this.left=-1,this.right=1,this.bottom=-1,this.top=1,this.zoom=1,this.projectionMatrix=i.ortho(i.create(),this.left,this.right,this.bottom,this.top,this.near,this.far)),this.viewport=[0,0,t.drawingBufferWidth,t.drawingBufferHeight],this.view=null,this.set(e)}a.prototype.init=function(e){this.entity=e},a.prototype.set=function(e){if(Object.assign(this,e),"perspective"===this.projection&&(e.aspect||e.near||e.far||e.fov||e.view))if(this.view){const e=this.view.totalSize[0]/this.view.totalSize[1],t=Math.tan(.5*this.fov)*this.near,n=-t,o=e*n,r=e*t,a=Math.abs(r-o),s=Math.abs(t-n),l=a/this.view.totalSize[0],u=s/this.view.totalSize[1],c=o+this.view.offset[0]*l,f=o+(this.view.offset[0]+this.view.size[0])*l,d=t-(this.view.offset[1]+this.view.size[1])*u,h=t-this.view.offset[1]*u;i.frustum(this.projectionMatrix,c,f,d,h,this.near,this.far)}else i.perspective(this.projectionMatrix,this.fov,this.aspect,this.near,this.far);else if("orthographic"===this.projection&&(e.left||e.right||e.bottom||e.top||e.zoom||e.near||e.far||e.view)){const e=(this.right-this.left)/(2/this.zoom),t=(this.top-this.bottom)/(2/this.zoom),n=(this.right+this.left)/2,o=(this.top+this.bottom)/2;let r=n-e,a=n+e,s=o+t,l=o-t;if(this.view){const e=1/this.zoom/(this.view.size[0]/this.view.totalSize[0]),t=1/this.zoom/(this.view.size[1]/this.view.totalSize[1]),n=(this.right-this.left)/this.view.size[0],o=(this.top-this.bottom)/this.view.size[1];a=(r+=n*(this.view.offset[0]/e))+n*(this.view.size[0]/e),l=(s-=o*(this.view.offset[1]/t))-o*(this.view.size[1]/t)}i.ortho(this.projectionMatrix,r,a,l,s,this.near,this.far)}if(e.viewport){const t=e.viewport,n=t[2]/t[3];this.aspect!==n&&this.set({aspect:n});const o=this.entity&&this.entity.getComponent("PostProcessing");o&&o.set({viewport:t,viewMatrix:this.viewMatrix})}Object.keys(e).forEach(e=>this.changed.dispatch(e))},a.prototype.getViewRay=function(e,t,n,o){this.view&&(e+=this.view.offset[0],t+=this.view.offset[1],n=this.view.totalSize[0],o=this.view.totalSize[1]);let i=2*e/n-1,a=1-2*t/o,s=2*Math.tan(this.fov/2)*this.near;i*=.5*(s*this.aspect),a*=.5*s;return[[0,0,0],r.normalize([i,a,-this.near])]},a.prototype.update=function(){i.set(this.inverseViewMatrix,this.entity.transform.modelMatrix),i.set(this.viewMatrix,this.entity.transform.modelMatrix),i.invert(this.viewMatrix)},e.exports=function(e){return new a(e)}},function(e,t,n){const o=n(0),i=n(44),r=n(4),a=n(3),s=n(5),l=n(56),u=n(57),c=n(92),f=n(93),d=n(94),h=n(95),p=new Float32Array(256);for(let e=0;e<64;e++){var m=[2*i.float()-1,2*i.float()-1,i.float(),1];r.normalize(m);var g=i.float();g=s.lerp(.1,1,g*g),r.scale(m,g),p[4*e+0]=m[0],p[4*e+1]=m[1],p[4*e+2]=m[2],p[4*e+3]=m[3]}const v=new Float32Array(65536);for(let e=0;e<16384;e++)v[4*e+0]=m[0],v[4*e+1]=m[1],v[4*e+2]=m[2],v[4*e+3]=m[3];function x(e){const t=e.ctx.gl;this.type="PostProcessing",this.enabled=!0,this.changed=new o,this.entity=null,this.rgbm=!1,this.depthPrepass=!0,this.backgroundColor=[0,0,0,1],this.viewMatrix=a.create(),this.viewport=[0,0,t.drawingBufferWidth,t.drawingBufferHeight],this.fxaa=!1,this.fog=!1,this.fogColor=[.5,.5,.5],this.fogStart=5,this.fogDensity=.15,this.inscatteringCoeffs=[.3,.3,.3],this.ssao=!1,this.ssaoIntensity=5,this.ssaoRadius=12,this.ssaoBias=.01,this.ssaoBlurRadius=2,this.ssaoBlurSharpness=10,this.dof=!1,this.dofIterations=1,this.dofRange=5,this.dofRadius=1,this.dofDepth=6.76,this.bloom=!1,this.bloomRadius=1,this.bloomThreshold=1,this.bloomIntensity=1,this.sunPosition=[1,1,1],this.sunColor=[.98,.98,.7],this.sunDispertion=.2,this.sunIntensity=.1,this._textures=[],this.set(e)}x.prototype.init=function(e){this.entity=e;const t=this.entity&&this.entity.getComponent("Camera");t&&this.set({viewport:t.viewport,viewMatrix:t.viewMatrix}),this.enabled&&this.ctx.capabilities.maxColorAttachments<2&&(this.enabled=!1,console.log(`pex-renderer disabling postprocess as MAX_COLOR_ATTACHMENTS=${this.ctx.capabilities.maxColorAttachments}`),console.log("pex-renderer ctx",this.ctx.capabilities)),this.enabled&&!this._fsqMesh&&this.initPostproces()},x.prototype.set=function(e){Object.assign(this,e),e.viewport&&this._textures.forEach(t=>{const n=Math.floor(e.viewport[2]*(t.sizeScale||1)),o=Math.floor(e.viewport[3]*(t.sizeScale||1));t.width===n&&t.height===o||this.ctx.update(t,{width:n,height:o})}),Object.keys(e).forEach(e=>this.changed.dispatch(e))},x.prototype.initPostproces=function(){const e=this.ctx,t=this.viewport[2],n=this.viewport[3];this._fsqMesh={attributes:{aPosition:e.vertexBuffer([[-1,-1],[1,-1],[1,1],[-1,1]])},indices:e.indexBuffer([[0,1,2],[0,2,3]])},this._frameColorTex=e.texture2D({name:"frameColorTex",width:t,height:n,pixelFormat:this.rgbm?e.PixelFormat.RGBA8:e.PixelFormat.RGBA16F,encoding:this.rgbm?e.Encoding.RGBM:e.Encoding.Linear}),this._frameEmissiveTex=e.texture2D({name:"frameColorTex",width:t,height:n,pixelFormat:this.rgbm?e.PixelFormat.RGBA8:e.PixelFormat.RGBA16F,encoding:this.rgbm?e.Encoding.RGBM:e.Encoding.Linear}),this._frameNormalTex=e.texture2D({name:"frameNormalTex",width:t,height:n,pixelFormat:e.PixelFormat.RGBA8,encoding:e.Encoding.Linear}),this._frameDepthTex=e.texture2D({name:"frameDepthTex",width:t,height:n,pixelFormat:e.PixelFormat.Depth,encoding:e.Encoding.Linear}),this._frameAOTex=e.texture2D({name:"frameAOTex",width:t,height:n,pixelFormat:e.PixelFormat.RGBA8,encoding:e.Encoding.Linear}),this._frameAOBlurTex=e.texture2D({name:"frameAOBlurTex",width:t,height:n,pixelFormat:e.PixelFormat.RGBA8,encoding:e.Encoding.Linear}),this._frameDofBlurTex=e.texture2D({name:"frameDofBlurTex",width:t,height:n,pixelFormat:this.rgbm?e.PixelFormat.RGBA8:e.PixelFormat.RGBA16F,encoding:this.rgbm?e.Encoding.RGBM:e.Encoding.Linear}),this._frameBloomHTex=e.texture2D({name:"frameBloomHTex",width:t/2,height:n/2,pixelFormat:this.rgbm?e.PixelFormat.RGBA8:e.PixelFormat.RGBA16F,encoding:this.rgbm?e.Encoding.RGBM:e.Encoding.Linear}),this._frameBloomHTex.sizeScale=.5,this._frameBloomVTex=e.texture2D({name:"frameBloomVTex",width:t/2,height:n/2,pixelFormat:this.rgbm?e.PixelFormat.RGBA8:e.PixelFormat.RGBA16F,encoding:this.rgbm?e.Encoding.RGBM:e.Encoding.Linear}),this._frameBloomVTex.sizeScale=.5,this._textures=[this._frameColorTex,this._frameEmissiveTex,this._frameNormalTex,this._frameDepthTex,this._frameAOTex,this._frameAOBlurTex,this._frameDofBlurTex,this._frameBloomHTex,this._frameBloomVTex],e.gl.getExtension("OES_texture_float "),this._ssaoKernelMap=e.texture2D({width:8,height:8,data:p,pixelFormat:e.PixelFormat.RGBA32F,encoding:e.Encoding.Linear,wrap:e.Wrap.Repeat}),this._ssaoNoiseMap=e.texture2D({width:128,height:128,data:v,pixelFormat:e.PixelFormat.RGBA32F,encoding:e.Encoding.Linear,wrap:e.Wrap.Repeat,mag:e.Filter.Linear,min:e.Filter.Linear}),this._drawFrameNormalsFboCommand={name:"PostProcessing.drawFrameNormals",pass:e.pass({name:"PostProcessing.drawFrameNormals",color:[this._frameNormalTex],depth:this._frameDepthTex,clearColor:[0,0,0,0],clearDepth:1})},this._drawFrameFboCommand={name:"PostProcessing.drawFrame",pass:e.pass({name:"PostProcessing.drawFrame",color:[this._frameColorTex,this._frameEmissiveTex],depth:this._frameDepthTex,clearColor:this.backgroundColor})},this._ssaoCmd={name:"PostProcessing.ssao",pass:e.pass({name:"PostProcessing.ssao",color:[this._frameAOTex],clearColor:[0,0,0,1]}),pipeline:e.pipeline({vert:l,frag:c}),attributes:this._fsqMesh.attributes,indices:this._fsqMesh.indices,uniforms:{uDepthMap:this._frameDepthTex,uNormalMap:this._frameNormalTex,uNoiseMap:this._ssaoNoiseMap}},this._bilateralBlurHCmd={name:"PostProcessing.bilateralBlurH",pass:e.pass({name:"PostProcessing.bilateralBlurH",color:[this._frameAOBlurTex],clearColor:[1,1,0,1]}),pipeline:e.pipeline({vert:l,frag:f}),attributes:this._fsqMesh.attributes,indices:this._fsqMesh.indices,uniforms:{depthMap:this._frameDepthTex,image:this._frameAOTex,direction:[.5,0],uDOFDepth:0,uDOFRange:0}},this._bilateralBlurVCmd={name:"PostProcessing.bilateralBlurV",pass:e.pass({name:"PostProcessing.bilateralBlurV",color:[this._frameAOTex],clearColor:[1,1,0,1]}),pipeline:e.pipeline({vert:l,frag:f}),attributes:this._fsqMesh.attributes,indices:this._fsqMesh.indices,uniforms:{depthMap:this._frameDepthTex,image:this._frameAOBlurTex,direction:[0,.5],uDOFDepth:0,uDOFRange:0}},this._dofBlurHCmd={name:"PostProcessing.bilateralBlurH",pass:e.pass({name:"PostProcessing.dofBilateralBlurH",color:[this._frameDofBlurTex],clearColor:[1,1,0,1]}),pipeline:e.pipeline({vert:l,frag:f}),attributes:this._fsqMesh.attributes,indices:this._fsqMesh.indices,uniforms:{depthMap:this._frameDepthTex,image:this._frameColorTex,direction:[.5,0]}},this._dofBlurVCmd={name:"PostProcessing.bilateralBlurV",pass:e.pass({name:"PostProcessing.dofBilateralBlurV",color:[this._frameColorTex],clearColor:[1,1,0,1]}),pipeline:e.pipeline({vert:l,frag:f}),attributes:this._fsqMesh.attributes,indices:this._fsqMesh.indices,uniforms:{depthMap:this._frameDepthTex,image:this._frameDofBlurTex,direction:[0,.5]}},this._thresholdCmd={name:"PostProcessing.threshold",pass:e.pass({name:"PostProcessing.threshold",color:[this._frameBloomVTex],clearColor:[1,1,1,1]}),pipeline:e.pipeline({vert:l,frag:d}),attributes:this._fsqMesh.attributes,indices:this._fsqMesh.indices,uniforms:{image:this._frameColorTex,emissiveTex:this._frameEmissiveTex,imageSize:[this._frameBloomVTex.width,this._frameBloomVTex.height]},viewport:[0,0,this._frameBloomVTex.width,this._frameBloomVTex.height]},this._bloomHCmd={name:"PostProcessing.bloomH",pass:e.pass({name:"PostProcessing.bloomH",color:[this._frameBloomHTex],clearColor:[1,1,1,1]}),pipeline:e.pipeline({vert:l,frag:h}),attributes:this._fsqMesh.attributes,indices:this._fsqMesh.indices,uniforms:{image:this._frameBloomVTex,imageSize:[this._frameBloomVTex.width,this._frameBloomVTex.height],direction:[.5,0]},viewport:[0,0,this._frameBloomHTex.width,this._frameBloomHTex.height]},this._bloomVCmd={name:"PostProcessing.bloomV",pass:e.pass({name:"PostProcessing.bloomV",color:[this._frameBloomVTex],clearColor:[1,1,0,1]}),pipeline:e.pipeline({vert:l,frag:h}),attributes:this._fsqMesh.attributes,indices:this._fsqMesh.indices,uniforms:{image:this._frameBloomHTex,imageSize:[this._frameBloomHTex.width,this._frameBloomHTex.height],direction:[0,.5]},viewport:[0,0,this._frameBloomVTex.width,this._frameBloomVTex.height]},this._blitCmd={name:"PostProcessing.blit",pipeline:e.pipeline({vert:l,frag:u}),attributes:this._fsqMesh.attributes,indices:this._fsqMesh.indices,uniforms:{uOverlay:this._frameColorTex,uOverlayEncoding:this._frameColorTex.encoding,uViewMatrix:this.viewMatrix,depthMap:this._frameDepthTex,depthMapSize:[t,n],uBloomMap:this._frameBloomVTex,uEmissiveMap:this._frameEmissiveTex}}},e.exports=function(e){return new x(e)}},function(e,t,n){e.exports=n(45)},function(e,t,n){n(46);var o=n(55),i=new o(Math.random),r={seed:function(e){Math.seedrandom(e),i=new o(Math.random)},float:function(e,t){return 0==arguments.length?(e=0,t=1):1==arguments.length&&(t=e,e=0),e+(t-e)*Math.random()},int:function(e,t){return 0==arguments.length?(e=0,t=Math.pow(2,53)-1):1==arguments.length&&(t=e,e=0),Math.floor(r.float(e,t))},vec2:function(e){void 0===e&&(e=1);var t=2*Math.random()-1,n=2*Math.random()-1,o=Math.random()*e,i=Math.sqrt(t*t+n*n);return[o*t/i,o*n/i]},vec3:function(e){void 0===e&&(e=1);var t=2*Math.random()-1,n=2*Math.random()-1,o=2*Math.random()-1,i=Math.random()*e,r=Math.sqrt(t*t+n*n+o*o);return[i*t/r,i*n/r,i*o/r]},vec2InRect:function(e){return[e[0][0]+Math.random()*(e[1][0]-e[0][0]),e[0][1]+Math.random()*(e[1][1]-e[0][1])]},vec3InAABB:function(e){return[e[0][0]+Math.random()*(e[1][0]-e[0][0]),e[0][1]+Math.random()*(e[1][1]-e[0][1]),e[0][2]+Math.random()*(e[1][2]-e[0][2])]},chance:function(e){return Math.random()<=e},element:function(e){return e[Math.floor(Math.random()*e.length)]},noise2:function(e,t){return i.noise2D(e,t)},noise3:function(e,t,n){return i.noise3D(e,t,n)},noise4:function(e,t,n,o){return i.noise4D(e,t,n,o)}};e.exports=r},function(e,t,n){var o=n(47),i=n(48),r=n(49),a=n(50),s=n(51),l=n(52),u=n(53);u.alea=o,u.xor128=i,u.xorwow=r,u.xorshift7=a,u.xor4096=s,u.tychei=l,e.exports=u},function(e,t,n){(function(e){var o;!function(e,i,r){function a(e){var t,n=this,o=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var o=.02519603282416938*(t+=e.charCodeAt(n));o-=t=o>>>0,t=(o*=t)>>>0,t+=4294967296*(o-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=o(" "),n.s1=o(" "),n.s2=o(" "),n.s0-=o(e),n.s0<0&&(n.s0+=1),n.s1-=o(e),n.s1<0&&(n.s1+=1),n.s2-=o(e),n.s2<0&&(n.s2+=1),o=null}function s(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var n=new a(e),o=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+1.1102230246251565e-16*(2097152*i()|0)},i.quick=i,o&&("object"==typeof o&&s(o,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=l:n(2)&&n(7)?void 0===(o=function(){return l}.call(t,n,t,i))||(i.exports=o):this.alea=l}(0,e,n(2))}).call(this,n(6)(e))},function(e,t,n){(function(e){var o;!function(e,i,r){function a(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var o=0;o<n.length+64;o++)t.x^=0|n.charCodeAt(o),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var n=new a(e),o=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,o&&("object"==typeof o&&s(o,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=l:n(2)&&n(7)?void 0===(o=function(){return l}.call(t,n,t,i))||(i.exports=o):this.xor128=l}(0,e,n(2))}).call(this,n(6)(e))},function(e,t,n){(function(e){var o;!function(e,i,r){function a(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var o=0;o<n.length+64;o++)t.x^=0|n.charCodeAt(o),o==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var n=new a(e),o=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,o&&("object"==typeof o&&s(o,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=l:n(2)&&n(7)?void 0===(o=function(){return l}.call(t,n,t,i))||(i.exports=o):this.xorwow=l}(0,e,n(2))}).call(this,n(6)(e))},function(e,t,n){(function(e){var o;!function(e,i,r){function a(e){var t=this;t.next=function(){var e,n,o=t.x,i=t.i;return e=o[i],n=(e^=e>>>7)^e<<24,n^=(e=o[i+1&7])^e>>>10,n^=(e=o[i+3&7])^e>>>3,n^=(e=o[i+4&7])^e<<7,e=o[i+7&7],n^=(e^=e<<13)^e<<9,o[i]=n,t.i=i+1&7,n},function(e,t){var n,o=[];if(t===(0|t))o[0]=t;else for(t=""+t,n=0;n<t.length;++n)o[7&n]=o[7&n]<<15^t.charCodeAt(n)+o[n+1&7]<<13;for(;o.length<8;)o.push(0);for(n=0;n<8&&0===o[n];++n);for(8==n?o[7]=-1:o[n],e.x=o,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function s(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var n=new a(e),o=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,o&&(o.x&&s(o,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=l:n(2)&&n(7)?void 0===(o=function(){return l}.call(t,n,t,i))||(i.exports=o):this.xorshift7=l}(0,e,n(2))}).call(this,n(6)(e))},function(e,t,n){(function(e){var o;!function(e,i,r){function a(e){var t=this;t.next=function(){var e,n,o=t.w,i=t.X,r=t.i;return t.w=o=o+1640531527|0,n=i[r+34&127],e=i[r=r+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=i[r]=n^e,t.i=r,n+(o^o>>>16)|0},function(e,t){var n,o,i,r,a,s=[],l=128;for(t===(0|t)?(o=t,t=null):(t+="\0",o=0,l=Math.max(l,t.length)),i=0,r=-32;r<l;++r)t&&(o^=t.charCodeAt((r+32)%t.length)),0===r&&(a=o),o^=o<<10,o^=o>>>15,o^=o<<4,o^=o>>>13,r>=0&&(a=a+1640531527|0,i=0==(n=s[127&r]^=o+a)?i+1:0);for(i>=128&&(s[127&(t&&t.length||0)]=-1),i=127,r=512;r>0;--r)o=s[i+34&127],n=s[i=i+1&127],o^=o<<13,n^=n<<17,o^=o>>>15,n^=n>>>12,s[i]=o^n;e.w=a,e.X=s,e.i=i}(t,e)}function s(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var n=new a(e),o=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,o&&(o.X&&s(o,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=l:n(2)&&n(7)?void 0===(o=function(){return l}.call(t,n,t,i))||(i.exports=o):this.xor4096=l}(0,e,n(2))}).call(this,n(6)(e))},function(e,t,n){(function(e){var o;!function(e,i,r){function a(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,o=t.d,i=t.a;return e=e<<25^e>>>7^n,n=n-o|0,o=o<<24^o>>>8^i,i=i-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-o|0,t.d=o<<16^n>>>16^i,t.a=i-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var o=0;o<n.length+20;o++)t.b^=0|n.charCodeAt(o),t.next()}function s(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var n=new a(e),o=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,o&&("object"==typeof o&&s(o,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=l:n(2)&&n(7)?void 0===(o=function(){return l}.call(t,n,t,i))||(i.exports=o):this.tychei=l}(0,e,n(2))}).call(this,n(6)(e))},function(e,t,n){var o;!function(i,r){var a,s=this,l=256,u=6,c="random",f=r.pow(l,u),d=r.pow(2,52),h=2*d,p=l-1;function m(e,t,n){var o=[],p=x(function e(t,n){var o,i=[],r=typeof t;if(n&&"object"==r)for(o in t)try{i.push(e(t[o],n-1))}catch(e){}return i.length?i:"string"==r?t:t+"\0"}((t=1==t?{entropy:!0}:t||{}).entropy?[e,_(i)]:null==e?function(){try{var e;return a&&(e=a.randomBytes)?e=e(l):(e=new Uint8Array(l),(s.crypto||s.msCrypto).getRandomValues(e)),_(e)}catch(e){var t=s.navigator,n=t&&t.plugins;return[+new Date,s,n,s.screen,_(i)]}}():e,3),o),m=new g(o),M=function(){for(var e=m.g(u),t=f,n=0;e<d;)e=(e+n)*l,t*=l,n=m.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return M.int32=function(){return 0|m.g(4)},M.quick=function(){return m.g(4)/4294967296},M.double=M,x(_(m.S),i),(t.pass||n||function(e,t,n,o){return o&&(o.S&&v(o,m),e.state=function(){return v(m,{})}),n?(r[c]=e,t):e})(M,p,"global"in t?t.global:this==r,t.state)}function g(e){var t,n=e.length,o=this,i=0,r=o.i=o.j=0,a=o.S=[];for(n||(e=[n++]);i<l;)a[i]=i++;for(i=0;i<l;i++)a[i]=a[r=p&r+e[i%n]+(t=a[i])],a[r]=t;(o.g=function(e){for(var t,n=0,i=o.i,r=o.j,a=o.S;e--;)t=a[i=p&i+1],n=n*l+a[p&(a[i]=a[r=p&r+t])+(a[r]=t)];return o.i=i,o.j=r,n})(l)}function v(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function x(e,t){for(var n,o=e+"",i=0;i<o.length;)t[p&i]=p&(n^=19*t[p&i])+o.charCodeAt(i++);return _(t)}function _(e){return String.fromCharCode.apply(0,e)}if(r["seed"+c]=m,x(r.random(),i),e.exports){e.exports=m;try{a=n(54)}catch(e){}}else void 0===(o=function(){return m}.call(t,n,t,e))||(e.exports=o)}([],Math)},function(e,t){},function(e,t,n){var o;!function(){var i=.5*(Math.sqrt(3)-1),r=(3-Math.sqrt(3))/6,a=1/6,s=(Math.sqrt(5)-1)/4,l=(5-Math.sqrt(5))/20;function u(e){e||(e=Math.random),this.p=new Uint8Array(256),this.perm=new Uint8Array(512),this.permMod12=new Uint8Array(512);for(var t=0;t<256;t++)this.p[t]=256*e();for(t=0;t<512;t++)this.perm[t]=this.p[255&t],this.permMod12[t]=this.perm[t]%12}u.prototype={grad3:new Float32Array([1,1,0,-1,1,0,1,-1,0,-1,-1,0,1,0,1,-1,0,1,1,0,-1,-1,0,-1,0,1,1,0,-1,1,0,1,-1,0,-1,-1]),grad4:new Float32Array([0,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,1,0,1,1,1,0,1,-1,1,0,-1,1,1,0,-1,-1,-1,0,1,1,-1,0,1,-1,-1,0,-1,1,-1,0,-1,-1,1,1,0,1,1,1,0,-1,1,-1,0,1,1,-1,0,-1,-1,1,0,1,-1,1,0,-1,-1,-1,0,1,-1,-1,0,-1,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,0]),noise2D:function(e,t){var n,o,a,s,l,u=this.permMod12,c=this.perm,f=this.grad3,d=(e+t)*i,h=Math.floor(e+d),p=Math.floor(t+d),m=(h+p)*r,g=e-(h-m),v=t-(p-m);g>v?(s=1,l=0):(s=0,l=1);var x=g-s+r,_=v-l+r,M=g-1+2*r,S=v-1+2*r,C=255&h,y=255&p,b=.5-g*g-v*v;if(b<0)n=0;else{var w=3*u[C+c[y]];n=(b*=b)*b*(f[w]*g+f[w+1]*v)}var E=.5-x*x-_*_;if(E<0)o=0;else{var T=3*u[C+s+c[y+l]];o=(E*=E)*E*(f[T]*x+f[T+1]*_)}var L=.5-M*M-S*S;if(L<0)a=0;else{var O=3*u[C+1+c[y+1]];a=(L*=L)*L*(f[O]*M+f[O+1]*S)}return 70*(n+o+a)},noise3D:function(e,t,n){var o,i,r,s,l,u,c,f,d,h,p=this.permMod12,m=this.perm,g=this.grad3,v=(e+t+n)*(1/3),x=Math.floor(e+v),_=Math.floor(t+v),M=Math.floor(n+v),S=(x+_+M)*a,C=e-(x-S),y=t-(_-S),b=n-(M-S);C>=y?y>=b?(l=1,u=0,c=0,f=1,d=1,h=0):C>=b?(l=1,u=0,c=0,f=1,d=0,h=1):(l=0,u=0,c=1,f=1,d=0,h=1):y<b?(l=0,u=0,c=1,f=0,d=1,h=1):C<b?(l=0,u=1,c=0,f=0,d=1,h=1):(l=0,u=1,c=0,f=1,d=1,h=0);var w=C-l+a,E=y-u+a,T=b-c+a,L=C-f+2*a,O=y-d+2*a,A=b-h+2*a,P=C-1+.5,R=y-1+.5,D=b-1+.5,N=255&x,F=255&_,z=255&M,I=.6-C*C-y*y-b*b;if(I<0)o=0;else{var U=3*p[N+m[F+m[z]]];o=(I*=I)*I*(g[U]*C+g[U+1]*y+g[U+2]*b)}var B=.6-w*w-E*E-T*T;if(B<0)i=0;else{var V=3*p[N+l+m[F+u+m[z+c]]];i=(B*=B)*B*(g[V]*w+g[V+1]*E+g[V+2]*T)}var G=.6-L*L-O*O-A*A;if(G<0)r=0;else{var q=3*p[N+f+m[F+d+m[z+h]]];r=(G*=G)*G*(g[q]*L+g[q+1]*O+g[q+2]*A)}var j=.6-P*P-R*R-D*D;if(j<0)s=0;else{var k=3*p[N+1+m[F+1+m[z+1]]];s=(j*=j)*j*(g[k]*P+g[k+1]*R+g[k+2]*D)}return 32*(o+i+r+s)},noise4D:function(e,t,n,o){this.permMod12;var i,r,a,u,c,f,d,h,p,m,g,v,x,_,M,S,C,y=this.perm,b=this.grad4,w=(e+t+n+o)*s,E=Math.floor(e+w),T=Math.floor(t+w),L=Math.floor(n+w),O=Math.floor(o+w),A=(E+T+L+O)*l,P=e-(E-A),R=t-(T-A),D=n-(L-A),N=o-(O-A),F=0,z=0,I=0,U=0;P>R?F++:z++,P>D?F++:I++,P>N?F++:U++,R>D?z++:I++,R>N?z++:U++,D>N?I++:U++;var B=P-(f=F>=3?1:0)+l,V=R-(d=z>=3?1:0)+l,G=D-(h=I>=3?1:0)+l,q=N-(p=U>=3?1:0)+l,j=P-(m=F>=2?1:0)+2*l,k=R-(g=z>=2?1:0)+2*l,H=D-(v=I>=2?1:0)+2*l,W=N-(x=U>=2?1:0)+2*l,X=P-(_=F>=1?1:0)+3*l,$=R-(M=z>=1?1:0)+3*l,J=D-(S=I>=1?1:0)+3*l,K=N-(C=U>=1?1:0)+3*l,Q=P-1+4*l,Y=R-1+4*l,Z=D-1+4*l,ee=N-1+4*l,te=255&E,ne=255&T,oe=255&L,ie=255&O,re=.6-P*P-R*R-D*D-N*N;if(re<0)i=0;else{var ae=y[te+y[ne+y[oe+y[ie]]]]%32*4;i=(re*=re)*re*(b[ae]*P+b[ae+1]*R+b[ae+2]*D+b[ae+3]*N)}var se=.6-B*B-V*V-G*G-q*q;if(se<0)r=0;else{var le=y[te+f+y[ne+d+y[oe+h+y[ie+p]]]]%32*4;r=(se*=se)*se*(b[le]*B+b[le+1]*V+b[le+2]*G+b[le+3]*q)}var ue=.6-j*j-k*k-H*H-W*W;if(ue<0)a=0;else{var ce=y[te+m+y[ne+g+y[oe+v+y[ie+x]]]]%32*4;a=(ue*=ue)*ue*(b[ce]*j+b[ce+1]*k+b[ce+2]*H+b[ce+3]*W)}var fe=.6-X*X-$*$-J*J-K*K;if(fe<0)u=0;else{var de=y[te+_+y[ne+M+y[oe+S+y[ie+C]]]]%32*4;u=(fe*=fe)*fe*(b[de]*X+b[de+1]*$+b[de+2]*J+b[de+3]*K)}var he=.6-Q*Q-Y*Y-Z*Z-ee*ee;if(he<0)c=0;else{var pe=y[te+1+y[ne+1+y[oe+1+y[ie+1]]]]%32*4;c=(he*=he)*he*(b[pe]*Q+b[pe+1]*Y+b[pe+2]*Z+b[pe+3]*ee)}return 27*(i+r+a+u+c)}},void 0===(o=function(){return u}.call(t,n,t,e))||(e.exports=o),t.SimplexNoise=u,e.exports=u}()},function(e,t){e.exports="\nattribute vec2 aPosition;\n\nvarying vec2 vTexCoord0;\n\nvoid main() {\n  gl_Position = vec4(aPosition, 0.0, 1.0);\n  vTexCoord0 = vec2((aPosition + 1.0) / 2.0);\n}\n"},function(e,t,n){const o=n(1);e.exports=`\nprecision highp float;\n\n// Variables\nuniform vec2 uScreenSize;\n\nuniform sampler2D uOverlay;\nuniform sampler2D depthMap;\nuniform sampler2D uBloomMap;\nuniform sampler2D uEmissiveMap;\nuniform vec2 depthMapSize;\nuniform mat4 uViewMatrix;\n\nuniform int uOverlayEncoding;\n\nuniform float uExposure;\nuniform int uOutputEncoding;\n\nuniform float uFogStart;\nuniform float uNear;\nuniform float uFar;\nuniform float uFov;\nuniform vec3 uSunPosition;\n\nuniform bool uFXAA;\nuniform bool uFog;\nuniform bool uBloom;\nuniform float uBloomIntensity;\n\nvarying vec2 vTexCoord0;\n\n// Includes\n${o.rgbm}\n${o.gamma}\n${o.encodeDecode}\n${o.depthRead}\n${o.fxaa}\n${o.fog}\n${o.tonemapUncharted2}\n\nvec3 getFarViewDir(vec2 tc) {\n  float hfar = 2.0 * tan(uFov/2.0) * uFar;\n  float wfar = hfar * uScreenSize.x / uScreenSize.y;\n  vec3 dir = (vec3(wfar * (tc.x - 0.5), hfar * (tc.y - 0.5), -uFar));\n  return dir;\n}\n\nvec3 reconstructPositionFromDepth(vec2 texCoord, float z) {\n  vec3 ray = getFarViewDir(texCoord);\n  vec3 pos = ray;\n  return pos * z / uFar;\n}\n\nvoid main() {\n  vec4 color = vec4(0.0);\n\n  if (uFXAA) {\n    color = fxaa(uOverlay, vTexCoord0 * uScreenSize, uScreenSize);\n  } else {\n    color = texture2D(uOverlay, vTexCoord0);\n  }\n  color = decode(color, uOverlayEncoding);\n\n  if (uFog) {\n    float z = readDepth(depthMap, vTexCoord0, uNear, uFar);\n    vec3 pos = reconstructPositionFromDepth(vTexCoord0, z);\n    float rayLength = length(pos);\n    vec3 rayDir = pos / rayLength;\n    vec3 sunDir = normalize(vec3(uViewMatrix * vec4(normalize(uSunPosition), 0.0)));\n    color = fog(color.rgb, rayLength - uFogStart, rayDir, sunDir);\n  }\n\n  if (uBloom) {\n    color.rgb += texture2D(uBloomMap, vTexCoord0).rgb * uBloomIntensity;\n  }\n  color.rgb *= uExposure;\n  color.rgb = tonemapUncharted2(color.rgb);\n  gl_FragColor = encode(color, uOutputEncoding);\n}\n`},function(e,t){e.exports={PI:"\nconst float PI = 3.14159265359;\n",TWO_PI:"\nconst float TWO_PI = 6.28318530718;\n",saturate:"\n#define MEDIUMP_FLT_MAX    65504.0\n#define MEDIUMP_FLT_MIN    0.00006103515625\n\n#ifdef TARGET_MOBILE\n#define FLT_EPS            MEDIUMP_FLT_MIN\n#define saturateMediump(x) min(x, MEDIUMP_FLT_MAX)\n#else\n#define FLT_EPS            1e-5\n#define saturateMediump(x) x\n#endif\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n",transposeMat4:"\nmat4 transpose(mat4 m) {\n  return mat4(\n    m[0][0], m[1][0], m[2][0], m[3][0],\n    m[0][1], m[1][1], m[2][1], m[3][1],\n    m[0][2], m[1][2], m[2][2], m[3][2],\n    m[0][3], m[1][3], m[2][3], m[3][3]\n  );\n}\n",quatToMat4:"\nmat4 quatToMat4(vec4 q) {\n  float xs = q.x + q.x;\n  float ys = q.y + q.y;\n  float zs = q.z + q.z;\n  float wx = q.w * xs;\n  float wy = q.w * ys;\n  float wz = q.w * zs;\n  float xx = q.x * xs;\n  float xy = q.x * ys;\n  float xz = q.x * zs;\n  float yy = q.y * ys;\n  float yz = q.y * zs;\n  float zz = q.z * zs;\n  return transpose(\n      mat4(\n          1.0 - (yy + zz), xy - wz, xz + wy, 0.0,\n          xy + wz, 1.0 - (xx + zz), yz - wx, 0.0,\n          xz - wy, yz + wx, 1.0 - (xx + yy), 0.0,\n          0.0, 0.0, 0.0, 1.0\n      )\n  );\n}\n",transposeMat3:"\nmat3 transpose(mat3 m) {\n  return mat3(m[0][0], m[1][0], m[2][0],\n              m[0][1], m[1][1], m[2][1],\n              m[0][2], m[1][2], m[2][2]);\n}",inverseMat4:"\nmat4 inverse(mat4 m) {\n  float\n      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],\n\n      b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32,\n\n      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat4(\n      a11 * b11 - a12 * b10 + a13 * b09,\n      a02 * b10 - a01 * b11 - a03 * b09,\n      a31 * b05 - a32 * b04 + a33 * b03,\n      a22 * b04 - a21 * b05 - a23 * b03,\n      a12 * b08 - a10 * b11 - a13 * b07,\n      a00 * b11 - a02 * b08 + a03 * b07,\n      a32 * b02 - a30 * b05 - a33 * b01,\n      a20 * b05 - a22 * b02 + a23 * b01,\n      a10 * b10 - a11 * b08 + a13 * b06,\n      a01 * b08 - a00 * b10 - a03 * b06,\n      a30 * b04 - a31 * b02 + a33 * b00,\n      a21 * b02 - a20 * b04 - a23 * b00,\n      a11 * b07 - a10 * b09 - a12 * b06,\n      a00 * b09 - a01 * b07 + a02 * b06,\n      a31 * b01 - a30 * b03 - a32 * b00,\n      a20 * b03 - a21 * b01 + a22 * b00) / det;\n}"}},function(e,t){e.exports="\n#define LINEAR 1\n#define GAMMA 2\n#define SRGB 3\n#define RGBM 4\n\nvec4 decode(vec4 pixel, int encoding) {\n  if (encoding == LINEAR) return pixel;\n  if (encoding == GAMMA) return toLinear(pixel);\n  if (encoding == SRGB) return toLinear(pixel);\n  if (encoding == RGBM) return vec4(decodeRGBM(pixel), 1.0);\n  return pixel;\n}\n\nvec4 encode(vec4 pixel, int encoding) {\n  if (encoding == LINEAR) return pixel;\n  if (encoding == GAMMA) return toGamma(pixel);\n  if (encoding == SRGB) return toGamma(pixel);\n  if (encoding == RGBM) return encodeRGBM(pixel.rgb);\n  return pixel;\n}\n"},function(e,t){e.exports="\n#define LINEAR 1\n#define GAMMA 2\n#define SRGB 3\n#define RGBM 4\n\nvec3 decodeRGBM (vec4 rgbm) {\n  vec3 r = rgbm.rgb * (7.0 * rgbm.a);\n  return r * r;\n}\n\nvec4 encodeRGBM (vec3 rgb_0) {\n  vec4 r;\n  r.xyz = (1.0 / 7.0) * sqrt(rgb_0);\n  r.a = max(max(r.x, r.y), r.z);\n  r.a = clamp(r.a, 1.0 / 255.0, 1.0);\n  r.a = ceil(r.a * 255.0) / 255.0;\n  r.xyz /= r.a;\n  return r;\n}\n"},function(e,t){e.exports="\nconst float gamma = 2.2;\n\n// Linear\nfloat toLinear(float v) {\n  return pow(v, gamma);\n}\n\nvec2 toLinear(vec2 v) {\n  return pow(v, vec2(gamma));\n}\n\nvec3 toLinear(vec3 v) {\n  return pow(v, vec3(gamma));\n}\n\nvec4 toLinear(vec4 v) {\n  return vec4(toLinear(v.rgb), v.a);\n}\n\n// Gamma\nfloat toGamma(float v) {\n  return pow(v, 1.0 / gamma);\n}\n\nvec2 toGamma(vec2 v) {\n  return pow(v, vec2(1.0 / gamma));\n}\n\nvec3 toGamma(vec3 v) {\n  return pow(v, vec3(1.0 / gamma));\n}\n\nvec4 toGamma(vec4 v) {\n  return vec4(toGamma(v.rgb), v.a);\n}\n"},function(e,t){e.exports="\n#if NUM_AMBIENT_LIGHTS > 0\n\nstruct AmbientLight {\n  vec4 color;\n};\n\nuniform AmbientLight uAmbientLights[NUM_AMBIENT_LIGHTS];\n\nvoid EvaluateAmbientLight(inout PBRData data, AmbientLight light, float ao) {\n  vec3 lightColor = decode(light.color, 3).rgb;\n  lightColor *= light.color.a;\n  data.indirectDiffuse += ao * (data.diffuseColor * lightColor);\n}\n#endif\n"},function(e,t){e.exports="\n#if NUM_DIRECTIONAL_LIGHTS > 0\n\nstruct DirectionalLight {\n  vec3 direction;\n  vec4 color;\n  mat4 projectionMatrix;\n  mat4 viewMatrix;\n  bool castShadows;\n  float near;\n  float far;\n  float bias;\n  vec2 shadowMapSize;\n};\n\nuniform DirectionalLight uDirectionalLights[NUM_DIRECTIONAL_LIGHTS];\nuniform sampler2D uDirectionalLightShadowMaps[NUM_DIRECTIONAL_LIGHTS]; //TODO: is it ok to sample depth texture as sampler2D?\n\nvoid EvaluateDirectionalLight(inout PBRData data, DirectionalLight light, sampler2D shadowMap) {\n  vec4 lightViewPosition = light.viewMatrix * vec4(vPositionWorld, 1.0);\n  float lightDistView = -lightViewPosition.z;\n  vec4 lightDeviceCoordsPosition = light.projectionMatrix * lightViewPosition;\n  vec3 lightDeviceCoordsPositionNormalized = lightDeviceCoordsPosition.xyz / lightDeviceCoordsPosition.w;\n  vec2 lightUV = lightDeviceCoordsPositionNormalized.xy * 0.5 + 0.5;\n\n  float illuminated = bool(light.castShadows) ? getShadow(shadowMap, light.shadowMapSize, lightUV, lightDistView - light.bias, light.near, light.far) : 1.0;\n\n  if (illuminated > 0.0) {\n    Light l;\n    l.l = -light.direction;\n    l.color = light.color;\n    l.attenuation = 1.0;\n    getSurfaceShading(data, l, illuminated);\n  }\n}\n#endif\n"},function(e,t){e.exports="\n#if NUM_POINT_LIGHTS > 0\n\nstruct PointLight {\n  vec3 position;\n  vec4 color;\n  float range;\n  bool castShadows;\n};\n\nuniform PointLight uPointLights[NUM_POINT_LIGHTS];\nuniform samplerCube uPointLightShadowMaps[NUM_POINT_LIGHTS];\n\nvoid EvaluatePointLight(inout PBRData data, PointLight light, samplerCube shadowMap) {\n  vec3 posToLight = light.position - data.positionWorld;\n\n  float illuminated = bool(light.castShadows) ? getPunctualShadow(shadowMap, posToLight) : 1.0;\n\n  if (illuminated > 0.0) {\n    float invSqrFalloff = 1.0 / pow(light.range, 2.0);\n    float attenuation = getDistanceAttenuation(posToLight, invSqrFalloff);\n\n    Light l;\n    l.l = normalize(posToLight);\n    l.color = light.color;\n    l.attenuation = attenuation;\n    getSurfaceShading(data, l, illuminated);\n  }\n}\n#endif\n"},function(e,t){e.exports="\n#if NUM_SPOT_LIGHTS > 0\n\nstruct SpotLight {\n  vec3 position;\n  vec3 direction;\n  vec4 color;\n  float innerAngle;\n  float angle;\n  float range;\n  mat4 projectionMatrix;\n  mat4 viewMatrix;\n  bool castShadows;\n  float near;\n  float far;\n  float bias;\n  vec2 shadowMapSize;\n};\n\nuniform SpotLight uSpotLights[NUM_SPOT_LIGHTS];\nuniform sampler2D uSpotLightShadowMaps[NUM_SPOT_LIGHTS];\n\nvoid EvaluateSpotLight(inout PBRData data, SpotLight light, sampler2D shadowMap) {\n  vec4 lightViewPosition = light.viewMatrix * vec4(vPositionWorld, 1.0); // TODO: move in the vertex shader\n  float lightDistView = -lightViewPosition.z;\n  vec4 lightDeviceCoordsPosition = light.projectionMatrix * lightViewPosition;\n  vec3 lightDeviceCoordsPositionNormalized = lightDeviceCoordsPosition.xyz / lightDeviceCoordsPosition.w;\n  vec2 lightUV = lightDeviceCoordsPositionNormalized.xy * 0.5 + 0.5;\n\n  float illuminated = bool(light.castShadows) ? getShadow(shadowMap, light.shadowMapSize, lightUV, lightDistView - light.bias, light.near, light.far) : 1.0;\n\n  if (illuminated > 0.0) {\n    vec3 posToLight = light.position - data.positionWorld;\n\n    float invSqrFalloff = 1.0 / pow(light.range, 2.0);\n    float attenuation = getDistanceAttenuation(posToLight, invSqrFalloff);\n\n    // TODO: luminous power to intensity\n    float innerAngle = light.innerAngle;\n    float cosOuter = cos(light.angle);\n    float cosInner = cos(innerAngle);\n    float cosOuterSquared = cosOuter * cosOuter;\n    float scale = 1.0 / max(1.0 / 1024.0, cosInner - cosOuter);\n    float offset = -cosOuter * scale;\n\n    vec2 scaleOffset = vec2(scale, offset);\n    attenuation *= getAngleAttenuation(-light.direction, normalize(posToLight), scaleOffset);\n\n    Light l;\n    l.l = normalize(posToLight);\n    l.color = light.color;\n    l.attenuation = attenuation;\n    getSurfaceShading(data, l, illuminated);\n  }\n}\n#endif\n"},function(e,t){e.exports="\n#if NUM_AREA_LIGHTS > 0\n\nstruct AreaLight {\n    vec3 position;\n    vec2 size;\n    vec4 color;\n    float intensity;\n    vec4 rotation;\n};\n\nuniform AreaLight uAreaLights[NUM_AREA_LIGHTS];\n\nuniform sampler2D ltc_mat;\nuniform sampler2D ltc_mag;\n\nuniform mat4  view;\n\nconst vec2  resolution = vec2(1280.0, 720.0);\n\nconst int   sampleCount = 4;\n\nconst int   NUM_SAMPLES_3020430251 = 8;\nconst float LUT_SIZE_3020430251  = 64.0;\nconst float LUT_SCALE_3020430251 = (LUT_SIZE_3020430251 - 1.0)/LUT_SIZE_3020430251;\nconst float LUT_BIAS_3020430251  = 0.5/LUT_SIZE_3020430251;\nconst float pi_0 = 3.14159265;\n\n// Tracing and intersection\n///////////////////////////\n///\n///\nstruct Ray\n{\n    vec3 origin;\n    vec3 dir;\n};\n\nstruct Rect\n{\n    vec3  origin;\n    vec4  plane;\n    float sizex;\n    float sizey;\n};\n\nbool RayPlaneIntersect(Ray ray, vec4 plane, out float t)\n{\n    t = -dot(plane, vec4(ray.origin, 1.0))/dot(plane.xyz, ray.dir);\n    return t > 0.0;\n}\n\nbool RayRectIntersect(Ray ray, Rect rect, out float t)\n{\n    bool intersect = RayPlaneIntersect(ray, rect.plane, t);\n    if (intersect)\n    {\n        vec3 pos = ray.origin + ray.dir*t;\n        vec3 lpos = pos - rect.origin;\n        if (abs(lpos.x) > rect.sizex || abs(lpos.y) > rect.sizey)\n            intersect = false;\n    }\n\n    return intersect;\n}\n\n// Adapted from:\n// https://www.shadertoy.com/view/4djSRW\nfloat hash(float x, float y)\n{\n    vec2 p = vec2(x, y);\n    p  = fract(p * vec2(443.8975, 397.2973));\n    p += dot(p.xy, p.yx + 19.19);\n    return fract(p.x + p.y);\n}\n\n//TODO: which coordinate space?\nRay GenerateCameraRay(float u1, float u2)\n{\n    Ray ray;\n\n    // Random jitter within pixel for AA, huh? what jitter\n    vec2 xy = 2.0*(gl_FragCoord.xy)/resolution - vec2(1.0);\n\n    ray.dir = normalize(vec3(xy, 2.0));\n\n    float focalDistance = 2.0;\n    float ft = focalDistance/ray.dir.z;\n    vec3 pFocus = ray.dir*ft;\n\n    ray.origin = vec3(0);\n    ray.dir    = normalize(pFocus - ray.origin);\n\n    // Apply camera transform\n    ray.origin = (view*vec4(ray.origin, 1)).xyz;\n    ray.dir    = (view*vec4(ray.dir,    0)).xyz;\n\n    return ray;\n}\n\nvec3 mul(mat3 m, vec3 v)\n{\n    return m * v;\n}\n\nmat3 mul(mat3 m1, mat3 m2)\n{\n    return m1 * m2;\n}\n\nint modi(int x, int y)\n{\n    return int(mod(float(x), float(y)));\n}\n\nmat3 transpose(mat3 v)\n{\n    mat3 tmp;\n    tmp[0] = vec3(v[0].x, v[1].x, v[2].x);\n    tmp[1] = vec3(v[0].y, v[1].y, v[2].y);\n    tmp[2] = vec3(v[0].z, v[1].z, v[2].z);\n\n    return tmp;\n}\n\nstruct SphQuad\n{\n    vec3 o, x, y, z;\n    float z0, z0sq;\n    float x0, y0, y0sq;\n    float x1, y1, y1sq;\n    float b0, b1, b0sq, k;\n    float S;\n};\n\nSphQuad SphQuadInit(vec3 s, vec3 ex, vec3 ey, vec3 o)\n{\n    SphQuad squad;\n\n    squad.o = o;\n    float exl = length(ex);\n    float eyl = length(ey);\n\n    // compute local reference system ’R’\n    squad.x = ex / exl;\n    squad.y = ey / eyl;\n    squad.z = cross(squad.x, squad.y);\n\n    // compute rectangle coords in local reference system\n    vec3 d = s - o;\n    squad.z0 = dot(d, squad.z);\n\n    // flip ’z’ to make it point against ’Q’\n    if (squad.z0 > 0.0)\n    {\n        squad.z  *= -1.0;\n        squad.z0 *= -1.0;\n    }\n\n    squad.z0sq = squad.z0 * squad.z0;\n    squad.x0 = dot(d, squad.x);\n    squad.y0 = dot(d, squad.y);\n    squad.x1 = squad.x0 + exl;\n    squad.y1 = squad.y0 + eyl;\n    squad.y0sq = squad.y0 * squad.y0;\n    squad.y1sq = squad.y1 * squad.y1;\n\n    // create vectors to four vertices\n    vec3 v00 = vec3(squad.x0, squad.y0, squad.z0);\n    vec3 v01 = vec3(squad.x0, squad.y1, squad.z0);\n    vec3 v10 = vec3(squad.x1, squad.y0, squad.z0);\n    vec3 v11 = vec3(squad.x1, squad.y1, squad.z0);\n\n    // compute normals to edges\n    vec3 n0 = normalize(cross(v00, v10));\n    vec3 n1 = normalize(cross(v10, v11));\n    vec3 n2 = normalize(cross(v11, v01));\n    vec3 n3 = normalize(cross(v01, v00));\n\n    // compute internal angles (gamma_i)\n    float g0 = acos(-dot(n0, n1));\n    float g1 = acos(-dot(n1, n2));\n    float g2 = acos(-dot(n2, n3));\n    float g3 = acos(-dot(n3, n0));\n\n    // compute predefined constants\n    squad.b0 = n0.z;\n    squad.b1 = n2.z;\n    squad.b0sq = squad.b0 * squad.b0;\n    squad.k = 2.0*pi_0 - g2 - g3;\n\n    // compute solid angle from internal angles\n    squad.S = g0 + g1 - squad.k;\n\n    return squad;\n}\n\nvec3 SphQuadSample(SphQuad squad, float u, float v)\n{\n    // 1. compute 'cu'\n    float au = u * squad.S + squad.k;\n    float fu = (cos(au) * squad.b0 - squad.b1) / sin(au);\n    float cu = 1.0 / sqrt(fu*fu + squad.b0sq) * (fu > 0.0 ? 1.0 : -1.0);\n    cu = clamp(cu, -1.0, 1.0); // avoid NaNs\n\n    // 2. compute 'xu'\n    float xu = -(cu * squad.z0) / sqrt(1.0 - cu * cu);\n    xu = clamp(xu, squad.x0, squad.x1); // avoid Infs\n\n    // 3. compute 'yv'\n    float d = sqrt(xu * xu + squad.z0sq);\n    float h0 = squad.y0 / sqrt(d*d + squad.y0sq);\n    float h1 = squad.y1 / sqrt(d*d + squad.y1sq);\n    float hv = h0 + v * (h1 - h0), hv2 = hv * hv;\n    float yv = (hv2 < 1.0 - 1e-6) ? (hv * d) / sqrt(1.0 - hv2) : squad.y1;\n\n    // 4. transform (xu, yv, z0) to world coords\n    return squad.o + xu*squad.x + yv*squad.y + squad.z0*squad.z;\n}\n\n// Sample generation\n////////////////////\n\nfloat Halton(int index, float base)\n{\n    float result = 0.0;\n    float f = 1.0/base;\n    float i = float(index);\n    for (int x = 0; x < 8; x++)\n    {\n        if (i <= 0.0) break;\n\n        result += f*mod(i, base);\n        i = floor(i/base);\n        f = f/base;\n    }\n\n    return result;\n}\n\nvoid Halton2D(out vec2 s[NUM_SAMPLES_3020430251], int offset)\n{\n    for (int i = 0; i < NUM_SAMPLES_3020430251; i++)\n    {\n        s[i].x = Halton(i + offset, 2.0);\n        s[i].y = Halton(i + offset, 3.0);\n    }\n}\n\n// Linearly Transformed Cosines\n///////////////////////////////\n\nfloat IntegrateEdge(vec3 v1, vec3 v2)\n{\n    float cosTheta = dot(v1, v2);\n    cosTheta = clamp(cosTheta, -0.9999, 0.9999);\n\n    float theta = acos(cosTheta);\n    float res = cross(v1, v2).z * theta / sin(theta);\n\n    return res;\n}\n\nvoid ClipQuadToHorizon(inout vec3 L[5], out int n)\n{\n    // detect clipping config\n    int config = 0;\n    if (L[0].z > 0.0) config += 1;\n    if (L[1].z > 0.0) config += 2;\n    if (L[2].z > 0.0) config += 4;\n    if (L[3].z > 0.0) config += 8;\n\n    // clip\n    n = 0;\n\n    if (config == 0)\n    {\n        // clip all\n    }\n    else if (config == 1) // V1 clip V2 V3 V4\n    {\n        n = 3;\n        L[1] = -L[1].z * L[0] + L[0].z * L[1];\n        L[2] = -L[3].z * L[0] + L[0].z * L[3];\n    }\n    else if (config == 2) // V2 clip V1 V3 V4\n    {\n        n = 3;\n        L[0] = -L[0].z * L[1] + L[1].z * L[0];\n        L[2] = -L[2].z * L[1] + L[1].z * L[2];\n    }\n    else if (config == 3) // V1 V2 clip V3 V4\n    {\n        n = 4;\n        L[2] = -L[2].z * L[1] + L[1].z * L[2];\n        L[3] = -L[3].z * L[0] + L[0].z * L[3];\n    }\n    else if (config == 4) // V3 clip V1 V2 V4\n    {\n        n = 3;\n        L[0] = -L[3].z * L[2] + L[2].z * L[3];\n        L[1] = -L[1].z * L[2] + L[2].z * L[1];\n    }\n    else if (config == 5) // V1 V3 clip V2 V4) impossible\n    {\n        n = 0;\n    }\n    else if (config == 6) // V2 V3 clip V1 V4\n    {\n        n = 4;\n        L[0] = -L[0].z * L[1] + L[1].z * L[0];\n        L[3] = -L[3].z * L[2] + L[2].z * L[3];\n    }\n    else if (config == 7) // V1 V2 V3 clip V4\n    {\n        n = 5;\n        L[4] = -L[3].z * L[0] + L[0].z * L[3];\n        L[3] = -L[3].z * L[2] + L[2].z * L[3];\n    }\n    else if (config == 8) // V4 clip V1 V2 V3\n    {\n        n = 3;\n        L[0] = -L[0].z * L[3] + L[3].z * L[0];\n        L[1] = -L[2].z * L[3] + L[3].z * L[2];\n        L[2] =  L[3];\n    }\n    else if (config == 9) // V1 V4 clip V2 V3\n    {\n        n = 4;\n        L[1] = -L[1].z * L[0] + L[0].z * L[1];\n        L[2] = -L[2].z * L[3] + L[3].z * L[2];\n    }\n    else if (config == 10) // V2 V4 clip V1 V3) impossible\n    {\n        n = 0;\n    }\n    else if (config == 11) // V1 V2 V4 clip V3\n    {\n        n = 5;\n        L[4] = L[3];\n        L[3] = -L[2].z * L[3] + L[3].z * L[2];\n        L[2] = -L[2].z * L[1] + L[1].z * L[2];\n    }\n    else if (config == 12) // V3 V4 clip V1 V2\n    {\n        n = 4;\n        L[1] = -L[1].z * L[2] + L[2].z * L[1];\n        L[0] = -L[0].z * L[3] + L[3].z * L[0];\n    }\n    else if (config == 13) // V1 V3 V4 clip V2\n    {\n        n = 5;\n        L[4] = L[3];\n        L[3] = L[2];\n        L[2] = -L[1].z * L[2] + L[2].z * L[1];\n        L[1] = -L[1].z * L[0] + L[0].z * L[1];\n    }\n    else if (config == 14) // V2 V3 V4 clip V1\n    {\n        n = 5;\n        L[4] = -L[0].z * L[3] + L[3].z * L[0];\n        L[0] = -L[0].z * L[1] + L[1].z * L[0];\n    }\n    else if (config == 15) // V1 V2 V3 V4\n    {\n        n = 4;\n    }\n\n    if (n == 3)\n        L[3] = L[0];\n    if (n == 4)\n        L[4] = L[0];\n}\n\nvec3 LTC_Evaluate_3020430251(\n    vec3 N, vec3 V, vec3 P, mat3 Minv, vec3 points[4], bool twoSided)\n{\n    // construct orthonormal basis around N\n    vec3 T1, T2;\n    T1 = normalize(V - N*dot(V, N));\n    T2 = cross(N, T1);\n\n    // rotate area light in (T1, T2, R) basis\n    Minv = Minv * transpose(mat3(T1, T2, N));\n\n    // polygon (allocate 5 vertices for clipping)\n    vec3 L[5];\n    L[0] = Minv * (points[0] - P);\n    L[1] = Minv * (points[1] - P);\n    L[2] = Minv * (points[2] - P);\n    L[3] = Minv * (points[3] - P);\n\n    int n;\n    ClipQuadToHorizon(L, n);\n\n    if (n == 0)\n        return vec3(0, 0, 0);\n\n    // project onto sphere\n    L[0] = normalize(L[0]);\n    L[1] = normalize(L[1]);\n    L[2] = normalize(L[2]);\n    L[3] = normalize(L[3]);\n    L[4] = normalize(L[4]);\n\n    // integrate\n    float sum = 0.0;\n\n    sum += IntegrateEdge(L[0], L[1]);\n    sum += IntegrateEdge(L[1], L[2]);\n    sum += IntegrateEdge(L[2], L[3]);\n    if (n >= 4)\n        sum += IntegrateEdge(L[3], L[4]);\n    if (n == 5)\n        sum += IntegrateEdge(L[4], L[0]);\n\n    sum = twoSided ? abs(sum) : max(0.0, -sum);\n\n    vec3 Lo_i = vec3(sum, sum, sum);\n\n    return Lo_i;\n}\n\n// Misc. helpers\n////////////////\n\nvec3 PowVec3(vec3 v, float p)\n{\n    return vec3(pow(v.x, p), pow(v.y, p), pow(v.z, p));\n}\n\nvec3 check(bool test) {\n    if (test) return vec3(0,1,0);\n    else return vec3(1,0.2,0);\n}\n\nvec3 multQuat(vec3 a, vec4 q){\n    float x = a.x;\n    float y = a.y;\n    float z = a.z;\n\n    float qx = q.x;\n    float qy = q.y;\n    float qz = q.z;\n    float qw = q.w;\n\n    float ix =  qw * x + qy * z - qz * y;\n    float iy =  qw * y + qz * x - qx * z;\n    float iz =  qw * z + qx * y - qy * x;\n    float iw = -qx * x - qy * y - qz * z;\n\n    a.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    a.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    a.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n    return a;\n}\n\nvec3 evalAreaLight(AreaLight light, vec3 posWorld, vec3 normalWorld, vec3 diffuseColor, vec3 specularColor, float roughness)\n{\n    vec2 seq[NUM_SAMPLES_3020430251];\n    Halton2D(seq, sampleCount);\n\n    vec3 col = vec3(0);\n\n    // Scene info\n\n    vec3 lcol = toLinear(light.color.rgb) * light.intensity;\n    vec3 dcol = diffuseColor;\n    vec3 scol = specularColor;\n    {\n        Ray ray;\n        ray.origin = uCameraPosition;\n        ray.dir = normalize(posWorld - uCameraPosition);\n        {\n            vec3 pos = posWorld;\n\n            vec3 N = normalWorld;\n            vec3 V = -ray.dir;\n\n            //FIXME: why this has to be -1?\n            vec3 ex = multQuat(vec3(-1, 0, 0), light.rotation)*light.size.x;\n            vec3 ey = multQuat(vec3(0, 1, 0), light.rotation)*light.size.y;\n\n            vec3 p1 = light.position - ex + ey;\n            vec3 p2 = light.position + ex + ey;\n            vec3 p3 = light.position + ex - ey;\n            vec3 p4 = light.position - ex - ey;\n\n            vec3 points[4];\n            points[0] = p1;\n            points[1] = p2;\n            points[2] = p3;\n            points[3] = p4;\n\n            float theta = acos(dot(N, V));\n            vec2 uv = vec2(roughness, theta/(0.5*pi_0));\n            uv = uv*LUT_SCALE_3020430251 + LUT_BIAS_3020430251;\n\n            vec4 t = texture2D(ltc_mat, uv);\n            mat3 Minv = mat3(\n                vec3(  1,   0, t.y),\n                vec3(  0, t.z,   0),\n                vec3(t.w,   0, t.x)\n            );\n\n            vec3 spec = lcol*scol*LTC_Evaluate_3020430251(N, V, pos, Minv, points, false);\n            spec *= texture2D(ltc_mag, uv).w;\n\n            vec3 diff = lcol*dcol*LTC_Evaluate_3020430251(N, V, pos, mat3(1), points, false);\n\n            col  = spec + diff;\n            col /= 2.0*pi_0;\n        }\n\n        //TODO: how to find out we had hit the screen?\n        //float distToRect;\n        //if (RayRectIntersect(ray, rect, distToRect))\n        //    if ((distToRect < distToFloor) || !hitFloor)\n        //        col = lcol;\n    }\n\n    return col;\n}\n\n\nvoid EvaluateAreaLight(inout PBRData data, AreaLight light, float ao) {\n  data.indirectSpecular += ao * evalAreaLight(light, data.positionWorld, data.normalWorld, data.baseColor, data.specularColor, data.roughness);\n}\n#endif\n"},function(e,t){e.exports="\n\n#if NUM_DIRECTIONAL_LIGHTS > 0 || NUM_SPOT_LIGHTS > 0\n\n  //fron depth buf normalized z to linear (eye space) z\n  //http://stackoverflow.com/questions/6652253/getting-the-true-z-value-from-the-depth-buffer\n  // float ndcDepthToEyeSpaceProj(float ndcDepth, float near, float far) {\n  //   return 2.0 * near * far / (far + near - ndcDepth * (far - near));\n  // }\n\n  //otho\n  //z = (f - n) * (zn + (f + n)/(f-n))/2\n  //http://www.ogldev.org/www/tutorial47/tutorial47.html\n  const float DEPTH_TOLERANCE = 0.000001;\n\n  float ndcDepthToEyeSpace(float ndcDepth, float near, float far) {\n    return (far - near) * (ndcDepth + (far + near) / (far - near)) / 2.0;\n  }\n\n  float readDepth(sampler2D depthMap, vec2 coord, float near, float far) {\n    float z_b = texture2D(depthMap, coord).r;\n    float z_n = 2.0 * z_b - 1.0;\n\n    return ndcDepthToEyeSpace(z_n, near, far);\n  }\n\n  float texture2DCompare(sampler2D depthMap, vec2 uv, float compare, float near, float far) {\n    float depth = readDepth(depthMap, uv, near, far);\n    if (depth >= far - DEPTH_TOLERANCE) return 1.0;\n    // if (depth >= far) return 1.0;\n    return step(compare, depth);\n  }\n\n  float texture2DShadowLerp(sampler2D depthMap, vec2 size, vec2 uv, float compare, float near, float far){\n    vec2 texelSize = vec2(1.0)/size;\n    vec2 f = fract(uv * size + 0.5);\n    vec2 centroidUV = floor(uv*size+0.5)/size;\n\n    float lb = texture2DCompare(depthMap, centroidUV+texelSize*vec2(0.0, 0.0), compare, near, far);\n    float lt = texture2DCompare(depthMap, centroidUV+texelSize*vec2(0.0, 1.0), compare, near, far);\n    float rb = texture2DCompare(depthMap, centroidUV+texelSize*vec2(1.0, 0.0), compare, near, far);\n    float rt = texture2DCompare(depthMap, centroidUV+texelSize*vec2(1.0, 1.0), compare, near, far);\n    float a = mix(lb, lt, f.y);\n    float b = mix(rb, rt, f.y);\n    float c = mix(a, b, f.x);\n\n    return c;\n  }\n\n  float PCF3x3(sampler2D depths, vec2 size, vec2 uv, float compare, float near, float far){\n    float result = 0.0;\n    for(int x=-1; x<=1; x++){\n        for(int y=-1; y<=1; y++){\n            vec2 off = vec2(x,y)/float(size);\n            result += texture2DShadowLerp(depths, size, uv+off, compare, near, far);\n        }\n    }\n    return result/9.0;\n  }\n\n  float PCF5x5(sampler2D depths, vec2 size, vec2 uv, float compare, float near, float far){\n    float result = 0.0;\n    for(int x=-2; x<=2; x++){\n        for(int y=-2; y<=2; y++){\n            vec2 off = vec2(x,y)/float(size);\n            result += texture2DShadowLerp(depths, size, uv+off, compare, near, far);\n        }\n    }\n    return result/25.0;\n  }\n\n  float getShadow(sampler2D depths, vec2 size, vec2 uv, float compare, float near, float far) {\n    if (uv.x < 0.0 || uv.y < 0.0 || uv.x > 1.0 || uv.y > 1.0) {\n      return 1.0;\n    }\n    #if SHADOW_QUALITY == 0\n      float illuminated = 1.0;\n    #endif\n    #if SHADOW_QUALITY == 1\n      float illuminated = texture2DCompare(depths, uv, compare, near, far);\n    #endif\n    #if SHADOW_QUALITY == 2\n      float illuminated = texture2DShadowLerp(depths, size, uv, compare, near, far);\n    #endif\n    #if SHADOW_QUALITY == 3\n      float illuminated = PCF3x3(depths, size, uv, compare, near, far);\n    #endif\n    #if SHADOW_QUALITY == 4\n      float illuminated = PCF5x5(depths, size, uv, compare, near, far);\n    #endif\n    return illuminated;\n  }\n#endif\n\n#if NUM_POINT_LIGHTS > 0\n  float getPunctualShadow(samplerCube depths, vec3 posToLight) {\n    float dist = length(posToLight);\n    vec3 N = -normalize(posToLight);\n    float far = 10.0;\n    float depth = unpackDepth(textureCube(depths, N)) * far;\n\n    if (dist - 0.05 > depth) {\n      return 0.0;\n    }\n\n    return 1.0;\n\n    // float depth = textureCube(depths, N).r;\n    // illuminated = (depth - dist);\n    // illuminated = step(dist, depth / 2.0);\n\n    // data.directDiffuse = vec3(fract(depth));\n    // data.directDiffuse = vec3(fract(dist));\n    // data.directDiffuse = vec3(illuminated);\n  }\n#endif\n"},function(e,t){e.exports='\nuniform float uReflectance;\n\n// https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf\n// Distribution\n// Walter et al. 2007, "Microfacet Models for Refraction through Rough Surfaces"\nfloat D_GGX(float linearRoughness, float NoH, const vec3 h, const vec3 normalWorld) {\n#if defined(TARGET_MOBILE)\n  vec3 NxH = cross(normalWorld, h);\n  float oneMinusNoHSquared = dot(NxH, NxH);\n#else\n  float oneMinusNoHSquared = 1.0 - NoH * NoH;\n#endif\n\n  float a = NoH * linearRoughness;\n  float k = linearRoughness / (oneMinusNoHSquared + a * a);\n  float d = k * k * (1.0 / PI);\n  return saturateMediump(d);\n}\n\nfloat distribution(float linearRoughness, float NoH, const vec3 h, const vec3 normalWorld) {\n  return D_GGX(linearRoughness, NoH, h, normalWorld);\n}\n\nfloat distributionClearCoat(float linearRoughness, float NoH, const vec3 h, const vec3 normalWorld) {\n  return D_GGX(linearRoughness, NoH, h, normalWorld);\n}\n\n// Visibility\n// Heitz 2014, "Understanding the Masking-Shadowing Function in Microfacet-Based BRDFs"\nfloat V_SmithGGXCorrelated(float linearRoughness, float NoV, float NoL) {\n  float a2 = linearRoughness * linearRoughness;\n  float lambdaV = NoL * sqrt((NoV - a2 * NoV) * NoV + a2);\n  float lambdaL = NoV * sqrt((NoL - a2 * NoL) * NoL + a2);\n  float v = 0.5 / (lambdaV + lambdaL);\n  // a2=0 => v = 1 / 4*NoL*NoV   => min=1/4, max=+inf\n  // a2=1 => v = 1 / 2*(NoL+NoV) => min=1/4, max=+inf\n  // clamp to the maximum value representable in mediump\n  return saturateMediump(v);\n}\n\n// Hammon 2017, "PBR Diffuse Lighting for GGX+Smith Microsurfaces"\nfloat V_SmithGGXCorrelated_Fast(float linearRoughness, float NoV, float NoL) {\n  float v = 0.5 / mix(2.0 * NoL * NoV, NoL + NoV, linearRoughness);\n  return saturateMediump(v);\n}\n\n// Kelemen 2001, "A Microfacet Based Coupled Specular-Matte BRDF Model with Importance Sampling"\nfloat V_Kelemen(float LoH) {\n  return saturateMediump(0.25 / (LoH * LoH));\n}\n\n// Neubelt and Pettineo 2013, "Crafting a Next-gen Material Pipeline for The Order: 1886"\nfloat V_Neubelt(float NoV, float NoL) {\n  return saturateMediump(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\n\nfloat visibility(float linearRoughness, float NoV, float NoL) {\n  #if !defined(TARGET_MOBILE)\n    return V_SmithGGXCorrelated(linearRoughness, NoV, NoL);\n  #else\n    return V_SmithGGXCorrelated_Fast(linearRoughness, NoV, NoL);\n  #endif\n}\n\nfloat visibilityClearCoat(float roughness, float linearRoughness, float LoH) {\n  return V_Kelemen(LoH);\n}\n\n// Fresnel\n// Schlick 1994, "An Inexpensive BRDF Model for Physically-Based Rendering"\nvec3 F_Schlick(const vec3 f0, float f90, float VoH) {\n  return f0 + (f90 - f0) * pow(1.0 - VoH, 5.0);\n}\n\nvec3 F_Schlick(const vec3 f0, float VoH) {\n  float f = pow(1.0 - VoH, 5.0);\n  return f + f0 * (1.0 - f);\n}\n\nfloat F_Schlick(float f0, float f90, float VoH) {\n  return f0 + (f90 - f0) * pow(1.0 - VoH, 5.0);\n}\n\nvec3 fresnel(const vec3 f0, float LoH) {\n  #if defined(TARGET_MOBILE)\n    return F_Schlick(f0, LoH); // f90 = 1.0\n  #else\n    float f90 = saturate(dot(f0, vec3(50.0 * 0.33)));\n    return F_Schlick(f0, f90, LoH);\n  #endif\n}\n\n// Diffuse\nfloat DiffuseLambert() {\n  return 1.0 / PI;\n}\n\n// Burley 2012, "Physically-Based Shading at Disney"\nfloat DiffuseBurley(float linearRoughness, float NoV, float NoL, float LoH) {\n  float f90 = 0.5 + 2.0 * linearRoughness * LoH * LoH;\n  float lightScatter = F_Schlick(1.0, f90, NoL);\n  float viewScatter  = F_Schlick(1.0, f90, NoV);\n  return lightScatter * viewScatter * (1.0 / PI);\n}\n'},function(e,t){e.exports="\n#ifdef USE_CLEAR_COAT\n  uniform float uClearCoat;\n  uniform float uClearCoatRoughness;\n\n  #ifdef USE_CLEAR_COAT_NORMAL_MAP\n    uniform sampler2D uClearCoatNormalMap;\n    uniform float uClearCoatNormalMapScale;\n\n    #ifdef USE_CLEAR_COAT_NORMAL_MAP_TEX_COORD_TRANSFORM\n      uniform mat3 uClearCoatNormalMapTexCoordTransform;\n    #endif\n\n    void getClearCoatNormal(inout PBRData data) {\n      #ifdef USE_CLEAR_COAT_NORMAL_MAP_TEX_COORD_TRANSFORM\n        vec2 texCoord = getTextureCoordinates(data, CLEAR_COAT_NORMAL_MAP_TEX_COORD_INDEX, uClearCoatNormalMapTexCoordTransform);\n      #else\n        vec2 texCoord = getTextureCoordinates(data, CLEAR_COAT_NORMAL_MAP_TEX_COORD_INDEX);\n      #endif\n\n      vec3 normalMap = texture2D(uClearCoatNormalMap, texCoord).rgb * 2.0 - 1.0;\n      normalMap.y *= uClearCoatNormalMapScale;\n      normalMap = normalize(normalMap);\n\n      vec3 N = normalize(data.normalView);\n      vec3 V = normalize(data.eyeDirView);\n\n      vec3 normalView;\n\n      #ifdef USE_TANGENTS\n        vec3 bitangent = cross(N, data.tangentView.xyz) * sign(data.tangentView.w);\n        mat3 TBN = mat3(data.tangentView.xyz, bitangent, N);\n        normalView = normalize(TBN * normalMap);\n      #else\n        normalMap.xy *= float(gl_FrontFacing) * 2.0 - 1.0;\n        // make the output normalView match glTF expected right handed orientation\n        normalMap.y *= -1.0;\n        normalView = perturb(normalMap, N, V, texCoord);\n      #endif\n\n      data.clearCoatNormal = normalize(vec3(data.inverseViewMatrix * vec4(normalView, 0.0)));\n    }\n  #else\n    void getClearCoatNormal(inout PBRData data) {\n      // geometric normal without perturbation from normalMap\n      data.clearCoatNormal = normalize(vec3(data.inverseViewMatrix * vec4(normalize(data.normalView), 0.0)));\n    }\n  #endif\n\n\n  // IOR = 1.5, F0 = 0.04\n  vec3 f0ClearCoatToSurface(const vec3 f0) {\n    #if defined(TARGET_MOBILE)\n      return saturate(f0 * (f0 * 0.526868 + 0.529324) - 0.0482256);\n    #else\n      return saturate(f0 * (f0 * (0.941892 - 0.263008 * f0) + 0.346479) - 0.0285998);\n    #endif\n  }\n\n  float clearCoatLobe(const PBRData data, const vec3 h, float NoH, float LoH, out float Fcc) {\n    #if defined(USE_NORMAL_MAP) || defined(USE_CLEAR_COAT_NORMAL_MAP)\n      float clearCoatNoH = saturate(dot(data.clearCoatNormal, h));\n    #else\n      float clearCoatNoH = NoH;\n    #endif\n    float D = distributionClearCoat(data.clearCoatLinearRoughness, clearCoatNoH, h, data.normalWorld);\n    float V = visibilityClearCoat(uClearCoatRoughness, data.clearCoatLinearRoughness, LoH);\n    // IOR = 1.5, F0 = 0.04\n    float F = F_Schlick(0.04, 1.0, LoH) * uClearCoat;\n\n    Fcc = F;\n    return D * V * F;\n  }\n#endif\n"},function(e,t){e.exports="\nvec3 getIrradiance(vec3 normalWorld, sampler2D map, int encoding) {\n  vec2 uv = envMapOctahedral(normalWorld);\n  float width = 2048.0;\n  float irrSize = 64.0;\n  uv += 0.5 / irrSize;\n  uv /= irrSize / (irrSize - 1.0);\n  uv = (uv * irrSize + vec2(2048.0 - irrSize)) / width;\n  return decode(texture2D(map, uv), encoding).rgb;\n}\n"},function(e,t){e.exports="\nstruct Light {\n  vec3 l;\n  vec4 color;\n  float attenuation;\n};\n\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nfloat getDistanceAttenuation(const highp vec3 posToLight, float falloff) {\n  // Square Falloff Attenuation\n  float distanceSquare = dot(posToLight, posToLight);\n  float factor = distanceSquare * falloff;\n  float smoothFactor = saturate(1.0 - factor * factor);\n  float attenuation = smoothFactor * smoothFactor;\n\n  return attenuation * 1.0 / max(distanceSquare, 1e-4);\n}\n\nfloat getAngleAttenuation(const vec3 lightDir, const vec3 l, const vec2 scaleOffset) {\n  float cd = dot(lightDir, l);\n  float attenuation  = saturate(cd * scaleOffset.x + scaleOffset.y);\n  return attenuation * attenuation;\n}\n\nvoid getSurfaceShading(inout PBRData data, Light light, float illuminated) {\n  vec3 N = data.normalWorld;\n  vec3 V = data.viewWorld;\n  vec3 L = normalize(light.l);\n  vec3 H = normalize(V + L);\n\n  float NdotV = saturate(abs(dot(N, V)) + FLT_EPS);\n  float NdotL = saturate(dot(N, L));\n\n  if (NdotL <= 0.0) return;\n\n  float NdotH = saturate(dot(N, H));\n  float LdotH = saturate(dot(L, H));\n\n  float D = distribution(data.linearRoughness, NdotH, H, data.normalWorld);\n  float G = visibility(data.linearRoughness, NdotV, NdotL);\n  vec3 F = fresnel(data.f0, LdotH);\n\n  vec3 lightColor = decode(light.color, 3).rgb;\n  lightColor *= light.color.a; // intensity\n\n  vec3 Fd = DiffuseLambert() * data.diffuseColor;\n  // vec3 Fd = DiffuseBurley(data.linearRoughness, NdotV, NdotL, LdotH) * data.diffuseColor;\n  vec3 Fr = (D * G) * F;\n  // TODO\n  float energyCompensation = 1.0;\n\n  #ifdef USE_CLEAR_COAT\n    float Fcc;\n    float clearCoat = clearCoatLobe(data, H, NdotH, LdotH, Fcc);\n    float attenuation = 1.0 - Fcc;\n\n    #if defined(USE_NORMAL_MAP) || defined(USE_CLEAR_COAT_NORMAL_MAP)\n      vec3 color = (Fd + Fr * (energyCompensation * attenuation)) * attenuation * NdotL;\n\n      float clearCoatNoL = saturate(dot(data.clearCoatNormal, light.l));\n      color += clearCoat * clearCoatNoL;\n\n      data.directColor += (color * lightColor) * (light.color.w * light.attenuation * illuminated);\n      return;\n    #else\n      vec3 color = (Fd + Fr * (energyCompensation * attenuation)) * attenuation + clearCoat;\n    #endif\n  #else\n    vec3 color = Fd + Fr * energyCompensation;\n  #endif\n\n  data.directColor += (color * lightColor) * (light.color.a * light.attenuation * NdotL * illuminated);\n}\n"},function(e,t){e.exports="\n#ifdef USE_REFLECTION_PROBES\n  uniform sampler2D uReflectionMap;\n  uniform int uReflectionMapEncoding;\n\n  #define MAX_MIPMAP_LEVEL 5.0\n\n  float computeSpecularAO(float NoV, float ao, float roughness) {\n    #if defined(USE_AO) || defined(USE_OCCLUSION_MAP)\n      return saturate(pow(NoV + ao, exp2(-16.0 * roughness - 1.0)) - 1.0 + ao);\n    #else\n      return 1.0;\n    #endif\n  }\n\n  vec3 getPrefilteredReflection(vec3 reflected, float roughness) {\n    // float lod = pow(roughness, 2.0) * MAX_MIPMAP_LEVEL; // TODO: verify reflection probe blurring code\n    float lod = pow(roughness, 1.5) * MAX_MIPMAP_LEVEL;\n    float upLod = floor(lod);\n    float downLod = ceil(lod);\n\n    vec3 a = decode(texture2D(uReflectionMap, envMapOctahedral(reflected, 0.0, upLod)), uReflectionMapEncoding).rgb;\n    vec3 b = decode(texture2D(uReflectionMap, envMapOctahedral(reflected, 0.0, downLod)), uReflectionMapEncoding).rgb;\n\n    return mix(a, b, lod - upLod);\n  }\n\n  vec3 EnvBRDFApprox( vec3 SpecularColor, float Roughness, float NoV ) {\n    const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022 );\n    const vec4 c1 = vec4( 1.0, 0.0425, 1.04, -0.04 );\n    vec4 r = Roughness * c0 + c1;\n    float a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;\n    vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n    return SpecularColor * AB.x + AB.y;\n  }\n\n  #if defined(USE_CLEAR_COAT)\n    // https://google.github.io/filament/Filament.md.html#lighting/imagebasedlights/clearcoat\n    void evaluateClearCoatIBL(const PBRData data, float specularAO, inout vec3 Fd, inout vec3 Fr) {\n      #if defined(USE_NORMAL_MAP) || defined(USE_CLEAR_COAT_NORMAL_MAP)\n        float clearCoatNoV = abs(dot(data.clearCoatNormal, data.viewWorld)) + FLT_EPS;\n        vec3 clearCoatR = reflect(-data.viewWorld, data.clearCoatNormal);\n      #else\n        float clearCoatNoV = data.NdotV;\n        vec3 clearCoatR = data.reflectionWorld;\n      #endif\n      // The clear coat layer assumes an IOR of 1.5 (4% reflectance)\n      float Fc = F_Schlick(0.04, 1.0, clearCoatNoV) * uClearCoat;\n      float attenuation = 1.0 - Fc;\n      Fr *= (attenuation * attenuation);\n      Fr += getPrefilteredReflection(clearCoatR, uClearCoatRoughness) * (specularAO * Fc);\n      Fd *= attenuation;\n    }\n  #endif\n\n  void EvaluateLightProbe(inout PBRData data, float ao) {\n    // TODO\n    float energyCompensation = 1.0;\n    float diffuseBRDF = ao;\n    float specularAO = computeSpecularAO(data.NdotV, ao, data.roughness);\n\n    vec3 diffuseIrradiance = getIrradiance(data.normalWorld, uReflectionMap, uReflectionMapEncoding);\n    vec3 Fd = data.diffuseColor * diffuseIrradiance * diffuseBRDF;\n\n    vec3 prefilteredRadiance = getPrefilteredReflection(data.reflectionWorld, data.roughness);\n    vec3 specularReflectance = EnvBRDFApprox(data.specularColor, data.roughness, data.NdotV);\n\n    vec3 Fr = specularReflectance * prefilteredRadiance;\n    Fr *= specularAO * energyCompensation;\n\n    #ifdef USE_CLEAR_COAT\n      evaluateClearCoatIBL(data, specularAO, Fd, Fr);\n    #endif\n\n    data.indirectDiffuse += Fd;\n    data.indirectSpecular += Fr;\n  }\n#endif\n"},function(e,t){e.exports="\nvec2 envMapEquirect(vec3 wcNormal) {\n  float flipEnvMap = -1.0;\n\n  // I assume envMap texture has been flipped the WebGL way (pixel 0,0 is a the bottom)\n  // therefore we flip wcNorma.y as acos(1) = 0\n  float phi = acos(-wcNormal.y);\n  float theta = atan(wcNormal.x, flipEnvMap * wcNormal.z) + PI;\n  return vec2(theta / TWO_PI, phi / PI);\n}\n"},function(e,t){e.exports="\nvec2 envMapOctahedral(vec3 dir) {\n  dir /= dot(vec3(1.0), abs(dir));\n  // Add epsylon to avoid bottom face flickering when sampling irradiance\n  dir += 0.00001;\n  if (dir.y < 0.0) {\n    dir.xy = vec2(1.0 - abs(dir.zx)) * sign(dir.xz);\n  }\n  else {\n    dir.xy = dir.xz;\n  }\n  dir.xy = dir.xy * 0.5;\n  dir.xy += 0.5; // move to center\n  // dir.xy = (dir.xy * 64.0 + 1.0) / 66.0;\n  return dir.xy;\n}\n\nvec2 envMapOctahedral(vec3 dir, float textureSize) {\n  dir /= dot(vec3(1.0), abs(dir));\n  if (dir.y < 0.0) {\n    dir.xy = vec2(1.0 - abs(dir.zx)) * sign(dir.xz);\n  }\n  else {\n    dir.xy = dir.xz;\n  }\n  dir.xy = dir.xy * 0.5;\n  dir.xy += 0.5; // move to center\n\n  // center on texels\n  dir.xy += 0.5 / textureSize;\n  dir.xy /= textureSize / (textureSize - 1.0);\n\n  return dir.xy;\n}\n\nvec2 envMapOctahedral(vec3 dir, float mipmapLevel, float roughnessLevel) {\n  float width = 2048.0;\n  float maxLevel = 11.0; // this should come from log of size\n  float levelSizeInPixels = pow(2.0, 1.0 + mipmapLevel + roughnessLevel);\n  float levelSize = max(64.0, width / levelSizeInPixels);\n  float roughnessLevelWidth = width / pow(2.0, 1.0 + roughnessLevel);\n  float vOffset = (width - pow(2.0, maxLevel - roughnessLevel));\n  float hOffset = 2.0 * roughnessLevelWidth - pow(2.0, log2(2.0 * roughnessLevelWidth) - mipmapLevel);\n  vec2 uv = envMapOctahedral(dir, levelSize);\n  uv *= levelSize;\n\n  return (uv + vec2(hOffset, vOffset)) / width;\n}\n"},function(e,t){e.exports="\nvec2 signed(vec2 v) {\n  return step(0.0, v) * 2.0 - 1.0;\n}\n\n// size = target octMap size\nvec3 octMapUVToDir (vec2 uv, float size) {\n  // center pixels with texels\n  // https://msdn.microsoft.com/en-us/library/windows/desktop/bb219690(v=vs.85).aspx\n  // creates 2 pixel border on the seams so the texture will filter properly\n  // uv = (uv * size - 0.5) / (size - 1.0); // THIS!!!\n\n  // float uBorder = 5.0;\n  // uv = uv * 2.0 - 1.0;\n  // uv *= (size + uBorder) / size;\n  // uv = (uv + 1.0) / 2.0;\n\n  // if (uv.x < 0.0) { uv.x *= -1.0; uv.y = 1.0 - uv.y; }\n  // else if (uv.x > 1.0) { uv.x = 2.0 - uv.x; uv.y = 1.0 - uv.y; }\n  // if (uv.y < 0.0) { uv.y *= -1.0; uv.x = 1.0 - uv.x; }\n  // else if (uv.y > 1.0) { uv.y = 2.0 - uv.y; uv.x = 1.0 - uv.x; }\n\n  uv = uv * 2.0 - 1.0;\n\n  vec2 auv = abs(uv);\n  float len = dot(auv, vec2(1.0));\n\n  if (len > 1.0) {\n    //y < 0 case\n    uv = (auv.yx - 1.0) * -1.0 * signed(uv);\n  }\n  return normalize(vec3(uv.x, 1.0 - len, uv.y));\n}\n\n// size = target octMap size\nvec3 octMapUVToDir (vec2 uv) {\n  // center pixels with texels\n  // https://msdn.microsoft.com/en-us/library/windows/desktop/bb219690(v=vs.85).aspx\n  // uv = (uv * size - 0.5) / (size - 1.0); // THIS!!!\n\n  // uv = uv * 2.0 - 1.0;\n  // uv *= (uTextureSize + uBorder) / uTextureSize;\n  // uv = (uv + 1.0) / 2.0;\n\n  // if (uv.x < 0.0) { uv.x *= -1.0; uv.y = 1.0 - uv.y; }\n  // else if (uv.x > 1.0) { uv.x = 2.0 - uv.x; uv.y = 1.0 - uv.y; }\n  // if (uv.y < 0.0) { uv.y *= -1.0; uv.x = 1.0 - uv.x; }\n  // else if (uv.y > 1.0) { uv.y = 2.0 - uv.y; uv.x = 1.0 - uv.x; }\n\n  uv = uv * 2.0 - 1.0;\n\n  vec2 auv = abs(uv);\n  float len = dot(auv, vec2(1.0));\n\n  if (len > 1.0) {\n    //y < 0 case\n    uv = (auv.yx - 1.0) * -1.0 * signed(uv);\n  }\n  return normalize(vec3(uv.x, 1.0 - len, uv.y));\n}\n"},function(e,t){e.exports="\nvec2 getTextureCoordinates(in PBRData data, in int index) {\n  #ifdef USE_TEXCOORD_1\n    if (index == 1) return data.texCoord1;\n  #endif\n\n  return data.texCoord0;\n}\n\nvec2 getTextureCoordinates(in PBRData data, in int index, in mat3 texCoordTransform) {\n  vec2 texCoord = getTextureCoordinates(data, index);\n\n  return (texCoordTransform * vec3(texCoord.xy, 1)).xy;\n}\n"},function(e,t){e.exports="\nuniform vec4 uBaseColor; // TODO: gltf assumes sRGB color, not linear\n\n#ifdef USE_BASE_COLOR_MAP\n  uniform sampler2D uBaseColorMap; // assumes sRGB color, not linear\n\n  #ifdef USE_BASE_COLOR_MAP_TEX_COORD_TRANSFORM\n    uniform mat3 uBaseColorMapTexCoordTransform;\n  #endif\n\n  void getBaseColor(inout PBRData data) {\n    #ifdef USE_BASE_COLOR_MAP_TEX_COORD_TRANSFORM\n      vec2 texCoord = getTextureCoordinates(data, BASE_COLOR_MAP_TEX_COORD_INDEX, uBaseColorMapTexCoordTransform);\n    #else\n      vec2 texCoord = getTextureCoordinates(data, BASE_COLOR_MAP_TEX_COORD_INDEX);\n    #endif\n    vec4 texelColor = texture2D(uBaseColorMap, texCoord);\n\n    #if !defined(DEPTH_PASS_ONLY) && !defined(DEPTH_PRE_PASS_ONLY)\n      data.baseColor = decode(uBaseColor, 3).rgb * decode(texelColor, 3).rgb;\n    #endif\n\n    #if defined(USE_VERTEX_COLORS) || defined(USE_INSTANCED_COLOR)\n      #if !defined(DEPTH_PASS_ONLY) && !defined(DEPTH_PRE_PASS_ONLY)\n        data.baseColor *= decode(vColor, 3).rgb;\n      #endif\n      data.opacity = uBaseColor.a * texelColor.a * vColor.a;\n    #else\n      data.opacity = uBaseColor.a * texelColor.a;\n    #endif\n  }\n#else\n  void getBaseColor(inout PBRData data) {\n    #if !defined(DEPTH_PASS_ONLY) && !defined(DEPTH_PRE_PASS_ONLY)\n      data.baseColor = decode(uBaseColor, 3).rgb;\n    #endif\n\n    #if defined(USE_VERTEX_COLORS) || defined(USE_INSTANCED_COLOR)\n      #if !defined(DEPTH_PASS_ONLY) && !defined(DEPTH_PRE_PASS_ONLY)\n        data.baseColor *= decode(vColor, 3).rgb;\n      #endif\n      data.opacity = uBaseColor.a * vColor.a;\n    #else\n      data.opacity = uBaseColor.a;\n    #endif\n  }\n#endif\n"},function(e,t){e.exports="\n#ifdef USE_EMISSIVE_COLOR\n  uniform vec4 uEmissiveColor; // TODO: gltf assumes sRGB color, not linear\n  uniform float uEmissiveIntensity;\n#endif\n\n#ifdef USE_EMISSIVE_COLOR_MAP\n  uniform sampler2D uEmissiveColorMap; //assumes sRGB color, not linear\n\n  #ifdef USE_EMISSIVE_COLOR_MAP_TEX_COORD_TRANSFORM\n    uniform mat3 uEmissiveColorMapTexCoordTransform;\n  #endif\n\n  void getEmissiveColor(inout PBRData data) {\n    #ifdef USE_EMISSIVE_COLOR_MAP_TEX_COORD_TRANSFORM\n      vec2 texCoord = getTextureCoordinates(data, EMISSIVE_COLOR_MAP_TEX_COORD_INDEX, uEmissiveColorMapTexCoordTransform);\n    #else\n      vec2 texCoord = getTextureCoordinates(data, EMISSIVE_COLOR_MAP_TEX_COORD_INDEX);\n    #endif\n\n    data.emissiveColor = decode(texture2D(uEmissiveColorMap, texCoord), SRGB).rgb;\n\n    #ifdef USE_EMISSIVE_COLOR\n      data.emissiveColor *= uEmissiveIntensity * decode(uEmissiveColor, SRGB).rgb;\n    #endif\n  }\n#elif defined(USE_EMISSIVE_COLOR)\n  void getEmissiveColor(inout PBRData data) {\n    data.emissiveColor = uEmissiveIntensity * decode(uEmissiveColor, SRGB).rgb;\n  }\n#else\n  void getEmissiveColor(inout PBRData data) {\n    data.emissiveColor = vec3(0.0);\n  }\n#endif\n"},function(e,t){e.exports="\n#ifdef USE_ALPHA_MAP\n  uniform sampler2D uAlphaMap;\n\n  #ifdef ALPHA_MAP_TEX_COORD_TRANSFORM\n    uniform mat3 uAlphaMapTexCoordTransform;\n  #endif\n#endif\n\n#ifdef USE_ALPHA_TEST\n  uniform float uAlphaTest; // assumes sRGB color, not linear\n\n  void alphaTest(inout PBRData data) {\n    if (data.opacity < uAlphaTest) discard;\n    // if (length(data.emissiveColor) < 0.1) discard;\n    // else data.baseColor = vec3(1.0, 0.0, 0.0);\n  }\n#endif\n"},function(e,t){e.exports="\n#ifdef USE_AO\n  uniform sampler2D uAO;\n  uniform vec2 uScreenSize;\n#endif\n\n#ifdef USE_OCCLUSION_MAP\n  uniform sampler2D uOcclusionMap;\n\n  #ifdef USE_OCCLUSION_MAP_TEX_COORD_TRANSFORM\n    uniform mat3 uOcclusionMapTexCoordTransform;\n  #endif\n#endif\n"},function(e,t){e.exports="\n#ifdef USE_NORMAL_MAP\nuniform sampler2D uNormalMap;\nuniform float uNormalScale;\n\n#ifdef USE_NORMAL_MAP_TEX_COORD_TRANSFORM\n  uniform mat3 uNormalMapTexCoordTransform;\n#endif\n\nvoid getNormal(inout PBRData data) {\n  #ifdef USE_NORMAL_MAP_TEX_COORD_TRANSFORM\n    vec2 texCoord = getTextureCoordinates(data, NORMAL_MAP_TEX_COORD_INDEX, uNormalMapTexCoordTransform);\n  #else\n    vec2 texCoord = getTextureCoordinates(data, NORMAL_MAP_TEX_COORD_INDEX);\n  #endif\n\n  vec3 normalMap = texture2D(uNormalMap, texCoord).rgb * 2.0 - 1.0;\n  normalMap.y *= uNormalScale;\n  normalMap = normalize(normalMap);\n\n  vec3 N = normalize(data.normalView);\n  vec3 V = normalize(data.eyeDirView);\n\n  vec3 normalView;\n\n  #ifdef USE_TANGENTS\n    vec3 bitangent = cross(N, data.tangentView.xyz) * sign(data.tangentView.w);\n    mat3 TBN = mat3(data.tangentView.xyz, bitangent, N);\n    normalView = normalize(TBN * normalMap);\n  #else\n    normalMap.xy *= float(gl_FrontFacing) * 2.0 - 1.0;\n    // make the output normalView match glTF expected right handed orientation\n    normalMap.y *= -1.0;\n    normalView = perturb(normalMap, N, V, texCoord);\n  #endif\n\n  data.normalWorld = normalize(vec3(data.inverseViewMatrix * vec4(normalView, 0.0)));\n}\n// #elif defined(USE_DISPLACEMENT_MAP)\n//   uniform sampler2D uDisplacementMap;\n//   uniform float uDisplacement;\n//   uniform float uDisplacementNormalScale;\n\n//   vec3 getNormal() {\n//     float scale = uDisplacement * uDisplacementNormalScale;\n//     float h = scale * texture2D(uDisplacementMap, texCoord).r;\n//     float hx = scale * texture2D(uDisplacementMap, texCoord + vec2(1.0 / 2048.0, 0.0)).r;\n//     float hz = scale * texture2D(uDisplacementMap, texCoord + vec2(0.0, 1.0 / 2048.0)).r;\n//     float meshSize = 20.0;\n//     vec3 a = vec3(0.0, h, 0.0);\n//     vec3 b = vec3(1.0 / 2048.0 * meshSize, hx, 0.0);\n//     vec3 c = vec3(0.0, hz, 1.0 / 2048.0 * meshSize);\n//     vec3 N = normalize(cross(normalize(c - a), normalize(b - a)));\n//     // FIXME: this is model space normal, need to multiply by modelWorld\n//     // N = mat3(uModelMatrix) * N;\n//     return N;\n//   }\n#else\nvoid getNormal(inout PBRData data) {\n  // NOP\n}\n#endif\n"},function(e,t){e.exports="\n#if !defined(USE_TANGENTS) && (defined(USE_NORMAL_MAP) || defined(USE_CLEAR_COAT_NORMAL_MAP))\n  //http://www.thetenthplanet.de/archives/1180\n  mat3 cotangentFrame(vec3 N, vec3 p, vec2 uv) {\n    // get edge vectors of the pixel triangle\n    vec3 dp1 = dFdx(p);\n    vec3 dp2 = dFdy(p);\n    vec2 duv1 = dFdx(uv);\n    vec2 duv2 = dFdy(uv);\n\n    // solve the linear system\n    vec3 dp2perp = cross(dp2, N);\n    vec3 dp1perp = cross(N, dp1);\n    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;\n    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;\n\n    // construct a scale-invariant frame\n    float invmax = 1.0 / sqrt(max(dot(T,T), dot(B,B)));\n    return mat3(normalize(T * invmax), normalize(B * invmax), N);\n  }\n\n  vec3 perturb(vec3 map, vec3 N, vec3 V, vec2 texcoord) {\n    mat3 TBN = cotangentFrame(N, -V, texcoord);\n    return normalize(TBN * map);\n  }\n#endif\n"},function(e,t){e.exports="\n#ifdef USE_METALLIC_ROUGHNESS_WORKFLOW\n\n  #define MIN_ROUGHNESS 0.045\n\n  #ifdef USE_METALLIC_ROUGHNESS_MAP\n    // R = ?, G = roughness, B = metallic\n    uniform sampler2D uMetallicRoughnessMap;\n\n    #ifdef USE_METALLIC_ROUGHNESS_MAP_TEX_COORD_TRANSFORM\n      uniform mat3 uMetallicRoughnessMapTexCoordTransform;\n    #endif\n\n    // TODO: sampling the same texture twice\n    void getMetallic(inout PBRData data) {\n      #ifdef USE_METALLIC_ROUGHNESS_MAP_TEX_COORD_TRANSFORM\n        vec2 texCoord = getTextureCoordinates(data, METALLIC_ROUGHNESS_MAP_TEX_COORD_INDEX, uMetallicRoughnessMapTexCoordTransform);\n      #else\n        vec2 texCoord = getTextureCoordinates(data, METALLIC_ROUGHNESS_MAP_TEX_COORD_INDEX);\n      #endif\n      vec4 texelColor = texture2D(uMetallicRoughnessMap, texCoord);\n      data.metallic = texelColor.b;\n      data.roughness = texelColor.g;\n    }\n\n    void getRoughness(inout PBRData data) {\n      // NOP, already read in getMetallic\n    }\n  #else\n    uniform float uMetallic;\n    uniform float uRoughness;\n\n    #ifdef USE_METALLIC_MAP\n      uniform sampler2D uMetallicMap; //assumes linear, TODO: check gltf\n\n      #ifdef USE_METALLIC_MAP_TEX_COORD_TRANSFORM\n        uniform mat3 uMetallicMapTexCoordTransform;\n      #endif\n\n      void getMetallic(inout PBRData data) {\n        #ifdef USE_METALLIC_MAP_TEX_COORD_TRANSFORM\n          vec2 texCoord = getTextureCoordinates(data, METALLIC_MAP_TEX_COORD_INDEX, uMetallicMapTexCoordTransform);\n        #else\n          vec2 texCoord = getTextureCoordinates(data, METALLIC_MAP_TEX_COORD_INDEX);\n        #endif\n        data.metallic = uMetallic * texture2D(uMetallicMap, texCoord).r;\n      }\n    #else\n      void getMetallic(inout PBRData data) {\n        data.metallic = uMetallic;\n      }\n    #endif\n\n    #ifdef USE_ROUGHNESS_MAP\n      uniform sampler2D uRoughnessMap; //assumes linear, TODO: check glTF\n\n      #ifdef USE_ROUGHNESS_MAP_TEX_COORD_TRANSFORM\n        uniform mat3 uRoughnessMapTexCoordTransform;\n      #endif\n\n      void getRoughness(inout PBRData data) {\n        #ifdef USE_ROUGHNESS_MAP_TEX_COORD_TRANSFORM\n          vec2 texCoord = getTextureCoordinates(data, ROUGHNESS_MAP_TEX_COORD_INDEX, uRoughnessMapTexCoordTransform);\n        #else\n          vec2 texCoord = getTextureCoordinates(data, ROUGHNESS_MAP_TEX_COORD_INDEX);\n        #endif\n        data.roughness = uRoughness * texture2D(uRoughnessMap, getTextureCoordinates(data, ROUGHNESS_MAP_TEX_COORD_INDEX)).r + 0.01;\n      }\n    #else\n      void getRoughness(inout PBRData data) {\n        data.roughness = uRoughness + 0.01;\n      }\n    #endif\n  #endif\n#endif\n"},function(e,t){e.exports="\n#ifdef USE_SPECULAR_GLOSSINESS_WORKFLOW\n  uniform vec4 uDiffuse;\n  uniform vec3 uSpecular;\n  uniform float uGlossiness;\n\n  #ifdef USE_DIFFUSE_MAP\n    uniform sampler2D uDiffuseMap;\n    uniform float uDiffuseMapEncoding;\n\n    #ifdef USE_DIFFUSE_MAP_TEX_COORD_TRANSFORM\n      uniform mat3 uDiffuseMapTexCoordTransform;\n    #endif\n\n    vec4 getDiffuse(in PBRData data) {\n      // assumes sRGB texture\n      #ifdef USE_DIFFUSE_MAP_TEX_COORD_TRANSFORM\n        vec2 texCoord = getTextureCoordinates(data, DIFFUSE_MAP_TEX_COORD_INDEX, uDiffuseMapTexCoordTransform);\n      #else\n        vec2 texCoord = getTextureCoordinates(data, DIFFUSE_MAP_TEX_COORD_INDEX);\n      #endif\n      vec4 texelColor = texture2D(uDiffuseMap, texCoord);\n      return vec4(decode(uDiffuse, 3).rgb, uDiffuse.a) * vec4(decode(texelColor, 3).rgb, texelColor.a);\n    }\n  #else\n    vec4 getDiffuse(in PBRData data) {\n      return vec4(decode(uDiffuse, 3).rgb, uDiffuse.a);\n    }\n  #endif\n\n  #ifdef USE_SPECULAR_GLOSSINESS_MAP\n    uniform sampler2D uSpecularGlossinessMap;\n\n    #ifdef USE_SPECULAR_GLOSSINESS_MAP_TEX_COORD_TRANSFORM\n      uniform mat3 uSpecularGlossinessMapTexCoordTransform;\n    #endif\n\n    vec4 getSpecularGlossiness(in PBRData data) {\n      // assumes specular is sRGB and glossiness is linear\n      #ifdef USE_SPECULAR_GLOSSINESS_MAP_TEX_COORD_TRANSFORM\n        vec2 texCoord = getTextureCoordinates(data, SPECULAR_GLOSSINESS_MAP_TEX_COORD_INDEX, uSpecularGlossinessMapTexCoordTransform);\n      #else\n        vec2 texCoord = getTextureCoordinates(data, SPECULAR_GLOSSINESS_MAP_TEX_COORD_INDEX);\n      #endif\n      vec4 specGloss = texture2D(uSpecularGlossinessMap, texCoord);\n      //TODO: should i move uSpecular to linear?\n      return vec4(uSpecular, uGlossiness) * vec4(decode(vec4(specGloss.rgb, 1.0), 3).rgb, specGloss.a);\n    }\n  #else\n    vec4 getSpecularGlossiness(in PBRData data) {\n      return vec4(uSpecular, uGlossiness);\n    }\n  #endif\n\n  // assumes linear color\n  float perceivedBrightness(vec3 c) {\n    return 0.299 * c.r + 0.587 * c.g + 0.114 * c.b;\n  }\n\n  float maxComponent(vec3 c) {\n    return max(c.r, max(c.b, c.g));\n  }\n\n  float solveMetallic(float diffuse, float specular, float oneMinusSpecularStrength) {\n    if (specular < 0.04) {\n      return 0.0;\n    }\n\n    float a = 0.04;\n    float b = diffuse * oneMinusSpecularStrength / (1.0 - a) + specular - 2.0 * a;\n    float c = a - specular;\n    float D = max(b * b - 4.0 * a * c, 0.0);\n    return clamp((-b + sqrt(D)) / (2.0 * a), 0.0, 1.0);\n  }\n\n  void getBaseColorAndMetallicRoughnessFromSpecularGlossiness(inout PBRData data) {\n    vec4 specularGlossiness = getSpecularGlossiness(data);\n\n    vec3 specular = specularGlossiness.rgb;\n    data.specularColor = specular;\n    data.f0 = specular;\n\n    float glossiness = specularGlossiness.a;\n    data.roughness = 1.0 - glossiness;\n\n    vec4 diffuseRGBA = getDiffuse(data);\n    vec3 diffuse = diffuseRGBA.rgb;\n    data.opacity = diffuseRGBA.a;\n    float epsilon = 1e-6;\n    float a = 0.04;\n\n    // ported from https://github.com/KhronosGroup/glTF/blob/master/extensions/Khronos/KHR_materials_pbrSpecularGlossiness/examples/convert-between-workflows/js/three.pbrUtilities.js\n    float oneMinusSpecularStrength = 1.0 - maxComponent(specular);\n    data.metallic = solveMetallic(perceivedBrightness(diffuse), perceivedBrightness(specular), oneMinusSpecularStrength);\n\n    vec3 baseColorFromDiffuse = diffuse * oneMinusSpecularStrength / (1.0 - a) / max(1.0 - data.metallic, epsilon);\n    vec3 baseColorFromSpecular = (specular - a * (1.0 - data.metallic)) * (1.0 / max(data.metallic, epsilon));\n    data.baseColor = mix(baseColorFromDiffuse, baseColorFromSpecular, data.metallic * data.metallic);\n\n    #if defined(USE_VERTEX_COLORS) || defined(USE_INSTANCED_COLOR)\n      vec3 tint = decode(vColor, SRGB).rgb;\n      data.baseColor *= tint;\n      data.specularColor *= tint;\n      data.opacity *= vColor.a;\n    #endif\n  }\n#endif\n"},function(e,t){e.exports="\nfloat readDepth(const in sampler2D depthMap, const in vec2 coord, const in float near, const in float far) {\n  float z_b = texture2D(depthMap, coord).r;\n  float z_n = 2.0 * z_b - 1.0;\n  float z_e = 2.0 * near * far / (far + near - z_n * (far - near));\n  return z_e;\n}\n"},function(e,t){e.exports="\nfloat unpackDepth (const in vec4 rgba_depth) {\n  const vec4 bit_shift = vec4(1.0/(256.0*256.0*256.0), 1.0/(256.0*256.0), 1.0/256.0, 1.0);\n  float depth = dot(rgba_depth, bit_shift);\n  return depth;\n}\n"},function(e,t){e.exports="\n//from http://spidergl.org/example.php?id=6\nvec4 packDepth(const in float depth) {\n  const vec4 bit_shift = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);\n  const vec4 bit_mask  = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);\n  vec4 res = fract(depth * bit_shift);\n  res -= res.xxyz * bit_mask;\n  return res;\n}\n"},function(e,t){e.exports='\n/*\n\nBased on "A Practical Analytic Model for Daylight"\naka The Preetham Model, the de facto standard analytic skydome model\nhttp://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\n\nFirst implemented by Simon Wallner http://www.simonwallner.at/projects/atmospheric-scattering\n\nImproved by Martin Upitis http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n\nThree.js integration by zz85 http://twitter.com/blurspline\n\nPlask / Pex integration by Marcin Ignac http://twitter.com/marcinignac, 2015-09\n*/\n\n\nvec3 cameraPos = vec3(0.0, 0.0, 0.0);\n\nconst float luminance = 1.0;\nconst float turbidity = 10.0;\nconst float reileigh = 2.0;\nconst float mieCoefficient = 0.005;\nconst float mieDirectionalG = 0.8;\n\n//uniform float luminance; //1.0\n//uniform float turbidity; //10.0\n//uniform float reileigh; //2.0\n//uniform float mieCoefficient; //0.005\n//uniform float mieDirectionalG; //0.8\n\n\nfloat reileighCoefficient = reileigh;\n\n// constants for atmospheric scattering\nconst float e = 2.71828182845904523536028747135266249775724709369995957;\nconst float pi = 3.141592653589793238462643383279502884197169;\n\nconst float n = 1.0003; // refractive index of air\nconst float N = 2.545E25; // number of molecules per unit volume for air at\n// 288.15K and 1013mb (sea level -45 celsius)\nconst float pn = 0.035; // depolatization factor for standard air\n\n// wavelength of used primaries, according to preetham\nconst vec3 lambda = vec3(680E-9, 550E-9, 450E-9);\n\n// mie stuff\n// K coefficient for the primaries\nconst vec3 K = vec3(0.686, 0.678, 0.666);\nconst float v = 4.0;\n\n// optical length at zenith for molecules\nconst float rayleighZenithLength = 8.4E3;\nconst float mieZenithLength = 1.25E3;\nconst vec3 up = vec3(0.0, 1.0, 0.0);\n\nconst float EE = 1000.0;\nconst float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;\n// 66 arc seconds -> degrees, and the cosine of that\n\n// earth shadow hack\nconst float cutoffAngle = pi/1.95;\nconst float steepness = 1.5;\n\n\nvec3 totalRayleigh(vec3 lambda)\n{\n    return (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn));\n}\n\n// A simplied version of the total Reayleigh scattering to works on browsers that use ANGLE\nvec3 simplifiedRayleigh()\n{\n    return 0.0005 / vec3(94, 40, 18);\n}\n\nfloat rayleighPhase(float cosTheta)\n{\n    return (3.0 / (16.0*pi)) * (1.0 + pow(cosTheta, 2.0));\n    // return (1.0 / (3.0*pi)) * (1.0 + pow(cosTheta, 2.0));\n    // return (3.0 / 4.0) * (1.0 + pow(cosTheta, 2.0));\n}\n\nvec3 totalMie(vec3 lambda, vec3 K, float T)\n{\n    float c = (0.2 * T ) * 10E-18;\n    return 0.434 * c * pi * pow((2.0 * pi) / lambda, vec3(v - 2.0)) * K;\n}\n\nfloat hgPhase(float cosTheta, float g)\n{\n    return (1.0 / (4.0*pi)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0*g*cosTheta + pow(g, 2.0), 1.5));\n}\n\nfloat sunIntensity(float zenithAngleCos)\n{\n    return EE * max(0.0, 1.0 - exp(-((cutoffAngle - acos(zenithAngleCos))/steepness)));\n}\n\n// float logLuminance(vec3 c)\n// {\n// return log(c.r * 0.2126 + c.g * 0.7152 + c.b * 0.0722);\n// }\n\n// Filmic ToneMapping http://filmicgames.com/archives/75\nfloat A = 0.15;\nfloat B = 0.50;\nfloat C = 0.10;\nfloat D = 0.20;\nfloat E = 0.02;\nfloat F = 0.30;\nfloat W = 1000.0;\n\nvec3 Uncharted2Tonemap(vec3 x)\n{\n    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\n}\n\n\nvec3 sky(vec3 sunPosition, vec3 worldNormal) {\n    vec3 sunDirection = normalize(sunPosition);\n    float sunfade = 1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);\n\n    // luminance = 1.0 ;// vWorldPosition.y / 450000. + 0.5; //sunPosition.y / 450000. * 1. + 0.5;\n\n    // gl_FragColor = vec4(sunfade, sunfade, sunfade, 1.0);\n\n    reileighCoefficient = reileighCoefficient - (1.0* (1.0-sunfade));\n\n    float sunE = sunIntensity(dot(sunDirection, up));\n\n    // extinction (absorbtion + out scattering)\n    // rayleigh coefficients\n    //vec3 betaR = totalRayleigh(lambda) * reileighCoefficient;\n    vec3 betaR = simplifiedRayleigh() * reileighCoefficient;\n\n    // mie coefficients\n    vec3 betaM = totalMie(lambda, K, turbidity) * mieCoefficient;\n\n    // optical length\n    // cutoff angle at 90 to avoid singularity in next formula.\n    //float zenithAngle = acos(max(0.0, dot(up, normalize(vWorldPosition - cameraPos))));\n    float zenithAngle = acos(max(0.0, dot(up, normalize(worldNormal))));\n    float sR = rayleighZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\n    float sM = mieZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));\n\n\n\n    // combined extinction factor\n    vec3 Fex = exp(-(betaR * sR + betaM * sM));\n\n    // in scattering\n    float cosTheta = dot(normalize(worldNormal), sunDirection);\n\n    float rPhase = rayleighPhase(cosTheta*0.5+0.5);\n    vec3 betaRTheta = betaR * rPhase;\n\n    float mPhase = hgPhase(cosTheta, mieDirectionalG);\n    vec3 betaMTheta = betaM * mPhase;\n\n\n    vec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex),vec3(1.5));\n    Lin *= mix(vec3(1.0),pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up, sunDirection),5.0),0.0,1.0));\n\n    //nightsky\n    vec3 direction = normalize(worldNormal);\n    float theta = acos(direction.y); // elevation --\x3e y-axis, [-pi/2, pi/2]\n    float phi = atan(direction.z, direction.x); // azimuth --\x3e x-axis [-pi/2, pi/2]\n    vec2 uv = vec2(phi, theta) / vec2(2.0*pi, pi) + vec2(0.5, 0.0);\n    // vec3 L0 = texture2D(skySampler, uv).rgb+0.1 * Fex;\n    vec3 L0 = vec3(0.1) * Fex;\n\n    // composition + solar disc\n    //if (cosTheta > sunAngularDiameterCos)\n    float sundisk = smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);\n    // if (normalize(vWorldPosition - cameraPos).y>0.0)\n    L0 += (sunE * 19000.0 * Fex)*sundisk;\n\n\n    vec3 whiteScale = 1.0/Uncharted2Tonemap(vec3(W));\n\n    vec3 texColor = (Lin+L0);\n    texColor *= 0.04 ;\n    texColor += vec3(0.0,0.001,0.0025)*0.3;\n\n    float g_fMaxLuminance = 1.0;\n    float fLumScaled = 0.1 / luminance;\n    float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (g_fMaxLuminance * g_fMaxLuminance)))) / (1.0 + fLumScaled);\n\n    float ExposureBias = fLumCompressed;\n\n    vec3 curr = Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);\n    //vec3 curr = texColor;\n    vec3 color = curr*whiteScale;\n\n    vec3 retColor = pow(color,vec3(1.0/(1.2+(1.2*sunfade))));\n\n    //VRG hack\n    retColor = pow(retColor, vec3(2.2));\n    return retColor;\n}\n'},function(e,t){e.exports="\nuniform float       uFogDensity;\n\nuniform vec3        uSunColor;\nuniform float       uSunDispertion;\nuniform float       uSunIntensity;\nuniform vec3        uInscatteringCoeffs;\nuniform vec3        uFogColor;\n\n// Fog adapted from from Iñigo Quilez article on fog\n// http://www.iquilezles.org/www/articles/fog/fog.htm\nvec4 fog(vec3 rgb, float dist, vec3 rayDir, vec3 sunDir) {\n  vec3 sunColor = toLinear(uSunColor).rgb;\n  vec3 fogColor = toLinear(uFogColor).rgb;\n\n  float minSc         = 0.02;\n  float density       = -(dist+1.0) * uFogDensity * 0.15 - dist * 0.0025;\n  float sunAmount     = pow(max(dot(rayDir, sunDir), 0.0), 1.0 / (0.008 + uSunDispertion*3.0));\n  sunAmount           = uSunIntensity * 10.0 * pow(sunAmount,10.0);\n  sunAmount           = max(0.0, min(sunAmount, 1.0));\n  vec3 sunFogColor    = mix(fogColor, sunColor, sunAmount);\n  vec3 insColor       = vec3(1.0) - clamp( vec3(\n        exp(density*(uInscatteringCoeffs.x+minSc)),\n        exp(density*(uInscatteringCoeffs.y+minSc)),\n        exp(density*(uInscatteringCoeffs.z+minSc))),\n      vec3(0), vec3(1));\n\n  return vec4(mix(rgb, sunFogColor, insColor), 1.0);\n}\n"},function(e,t){e.exports="\nfloat A = 0.15;\nfloat B = 0.50;\nfloat C = 0.10;\nfloat D = 0.20;\nfloat E = 0.02;\nfloat F = 0.30;\nfloat W = 11.2;\n\nvec3 Uncharted2Tonemap(vec3 x) {\n  return ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;\n}\n\n// Based on Filmic Tonemapping Operators http://filmicgames.com/archives/75\nvec3 tonemapUncharted2(vec3 color) {\n  float ExposureBias = 2.0;\n  vec3 curr = Uncharted2Tonemap(ExposureBias * color);\n\n  vec3 whiteScale = 1.0 / Uncharted2Tonemap(vec3(W));\n  return curr * whiteScale;\n}\n"},function(e,t){e.exports="\n#ifndef FXAA_REDUCE_MIN\n    #define FXAA_REDUCE_MIN   (1.0/ 128.0)\n#endif\n#ifndef FXAA_REDUCE_MUL\n    #define FXAA_REDUCE_MUL   (1.0 / 8.0)\n#endif\n#ifndef FXAA_SPAN_MAX\n    #define FXAA_SPAN_MAX     8.0\n#endif\n\n//optimized version for mobile, where dependent\n//texture reads can be a bottleneck\nvec4 fxaa_calc(sampler2D tex, vec2 fragCoord, vec2 resolution,\n            vec2 v_rgbNW, vec2 v_rgbNE,\n            vec2 v_rgbSW, vec2 v_rgbSE,\n            vec2 v_rgbM) {\n    vec4 color;\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\n    vec4 texColor = texture2D(tex, v_rgbM);\n    vec3 rgbM  = texColor.xyz;\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n\n    mediump vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n\n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n              dir * rcpDirMin)) * inverseVP;\n\n    vec3 rgbA = 0.5 * (\n        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n        texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\n\n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\n        color = vec4(rgbA, texColor.a);\n    else\n        color = vec4(rgbB, texColor.a);\n    return color;\n}\n\nvoid texcoords(vec2 fragCoord, vec2 resolution,\n\t\t\tout vec2 v_rgbNW, out vec2 v_rgbNE,\n\t\t\tout vec2 v_rgbSW, out vec2 v_rgbSE,\n\t\t\tout vec2 v_rgbM) {\n\tvec2 inverseVP = 1.0 / resolution.xy;\n\tv_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\n\tv_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\n\tv_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\n\tv_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\n\tv_rgbM = vec2(fragCoord * inverseVP);\n}\n\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution) {\n\tmediump vec2 v_rgbNW;\n\tmediump vec2 v_rgbNE;\n\tmediump vec2 v_rgbSW;\n\tmediump vec2 v_rgbSE;\n\tmediump vec2 v_rgbM;\n\n\t// compute the texture coords\n\ttexcoords(fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n\n\t// compute FXAA\n\treturn fxaa_calc(tex, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n}\n"},function(e,t,n){const o=n(1);e.exports=`\n// https://gist.github.com/fisch0920/6770311\n// Updated by marcin.ignac@gmail.com 2017-05-08\n#extension GL_OES_standard_derivatives : enable\n\nprecision mediump float;\n\n// total number of samples at each fragment\n#define NUM_SAMPLES 11\n\n#define NUM_SPIRAL_TURNS 7\n\n#define USE_ACTUAL_NORMALS false\n\n#define VARIATION 1\n\n#define PI 3.14159265359\n\nuniform sampler2D uDepthMap;\nuniform sampler2D uNormalMap;\nuniform sampler2D uNoiseMap;\n\nuniform float uFOV;\nuniform float uIntensity;\nuniform vec2  uNoiseScale;\nuniform float uSampleRadiusWS;\nuniform float uBias;\nuniform float uNear;\nuniform float uFar;\nuniform float uFov;\nuniform mat4 viewProjectionInverseMatrix;\nuniform mat4 viewMatrix;\nuniform vec2 uScreenSize;\nuniform vec3 cameraPositionWorldSpace;\n\n// reconstructs view-space unit normal from view-space position\n${o.depthRead}\n\nvec3 getPositionVSOld(vec2 uv) {\n  // float depth = decodeGBufferDepth(uDepthMap, uv, clipFar);\n  float depth = readDepth(uDepthMap, uv, uNear, uFar);\n\n  vec2 uv2  = uv * 2.0 - vec2(1.0);\n  vec4 temp = viewProjectionInverseMatrix * vec4(uv2, -1.0, 1.0);\n  vec3 cameraFarPlaneWS = (temp / temp.w).xyz;\n\n  vec3 cameraToPositionRay = normalize(cameraFarPlaneWS - cameraPositionWorldSpace);\n  vec3 originWS = cameraToPositionRay * depth + cameraPositionWorldSpace;\n  vec3 originVS = (viewMatrix * vec4(originWS, 1.0)).xyz;\n\n  return originVS;\n}\n\nvec3 getFarViewDir(vec2 tc) {\n  float hfar = 2.0 * tan(uFov/2.0) * uFar;\n  float wfar = hfar * uScreenSize.x / uScreenSize.y;\n  vec3 dir = (vec3(wfar * (tc.x - 0.5), hfar * (tc.y - 0.5), -uFar));\n  return dir;\n}\n\nvec3 getViewRay(vec2 tc) {\n  vec3 ray = normalize(getFarViewDir(tc));\n  return ray;\n}\n\n\n//asumming z comes from depth buffer (ndc coords) and it's not a linear distance from the camera but\n//perpendicular to the near/far clipping planes\n//http://mynameismjp.wordpress.com/2010/09/05/position-from-depth-3/\n//assumes z = eye space z\nvec3 reconstructPositionFromDepth(vec2 texCoord, float z) {\n  vec3 ray = getFarViewDir(texCoord);\n  vec3 pos = ray;\n  return pos * z / uFar;\n}\n\nvec3 getPositionVS(vec2 uv) {\n  float depth = readDepth(uDepthMap, uv, uNear, uFar);\n  return reconstructPositionFromDepth(uv, depth);\n}\n\n// returns a unit vector and a screen-space radius for the tap on a unit disk\n// (the caller should scale by the actual disk radius)\nvec2 tapLocation(int sampleNumber, float spinAngle, out float radiusSS) {\n  // radius relative to radiusSS\n  float alpha = (float(sampleNumber) + 0.5) * (1.0 / float(NUM_SAMPLES));\n  float angle = alpha * (float(NUM_SPIRAL_TURNS) * 6.28) + spinAngle;\n\n  radiusSS = alpha;\n  return vec2(cos(angle), sin(angle));\n}\n\nvec3 getOffsetPositionVS(vec2 uv, vec2 unitOffset, float radiusSS) {\n  uv = uv + radiusSS * unitOffset * (1.0 / uScreenSize);\n\n  return getPositionVS(uv);\n}\n\nfloat sampleAO(vec2 uv, vec3 positionVS, vec3 normalVS, float sampleRadiusSS,\n               int tapIndex, float rotationAngle)\n{\n  const float epsilon = 0.01;\n  float radius2 = uSampleRadiusWS * uSampleRadiusWS;\n\n  // offset on the unit disk, spun for this pixel\n  float radiusSS = 0.0;\n  vec2 unitOffset = tapLocation(tapIndex, rotationAngle, radiusSS);\n  radiusSS *= sampleRadiusSS;\n\n  vec3 Q = getOffsetPositionVS(uv, unitOffset, radiusSS);\n  vec3 v = Q - positionVS;\n\n  float vv = dot(v, v);\n  float vn = dot(v, normalVS) - uBias;\n\n  // return vv;\n\n#if VARIATION == 0\n\n  // (from the HPG12 paper)\n  // Note large epsilon to avoid overdarkening within cracks\n  return float(vv < radius2) * max(vn / (epsilon + vv), 0.0);\n\n#elif VARIATION == 1 // default / recommended\n\n  // Smoother transition to zero (lowers contrast, smoothing out corners). [Recommended]\n  float f = max(radius2 - vv, 0.0) / radius2;\n  // gl_FragColor = vec4(sampleRadiusSS, 0.0, 0.0, 1.0);\n  // return vv / 1000.0;\n  return f * f * f * max((vn) / (epsilon + vv), 0.0);\n\n#elif VARIATION == 2\n\n  // Medium contrast (which looks better at high radii), no division.  Note that the\n  // contribution still falls off with radius^2, but we've adjusted the rate in a way that is\n  // more computationally efficient and happens to be aesthetically pleasing.\n  float invRadius2 = 1.0 / radius2;\n  return 4.0 * max(1.0 - vv * invRadius2, 0.0) * max(vn, 0.0);\n\n#else\n\n  // Low contrast, no division operation\n  return 2.0 * float(vv < radius2) * max(vn, 0.0);\n\n#endif\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid main() {\n  vec2 vUV = vec2(gl_FragCoord.x / uScreenSize.x, gl_FragCoord.y / uScreenSize.y);\n  vec3 originVS = getPositionVS(vUV);\n\n  vec3 normalVS = texture2D(uNormalMap, vUV).rgb * 2.0 - 1.0;\n\n  vec3 sampleNoise = texture2D(uNoiseMap, vUV * uNoiseScale).xyz;\n\n  //float randomPatternRotationAngle = 2.0 * PI * sampleNoise.x;\n  float randomPatternRotationAngle = rand(gl_FragCoord.xy) * PI * 2.0 * sampleNoise.x;\n\n  float radiusSS  = 0.0; // radius of influence in screen space\n  float radiusWS  = 0.0; // radius of influence in world space\n  float occlusion = 0.0;\n\n  // TODO (travis): don't hardcode projScale\n  float projScale = 40.0;//1.0 / (2.0 * tan(uFOV * 0.5));\n   // Matrix4 P;\n    // camera.getProjectUnitMatrix(Rect2D::xywh(0, 0, width, height), P);\n    // const Vector4 projConstant\n        // (float(-2.0 / (width * P[0][0])),\n         // float(-2.0 / (height * P[1][1])),\n         // float((1.0 - (double)P[0][2]) / P[0][0]),\n         // float((1.0 + (double)P[1][2]) / P[1][1]));\n\n  // float projScale = 4.0 / (2.0 * tan(uFov * 0.5));\n  radiusWS = uSampleRadiusWS;\n  radiusSS = projScale * radiusWS / originVS.z;// / originVS.y; // WAT?\n\n  for (int i = 0; i < NUM_SAMPLES; ++i) {\n    occlusion += sampleAO(vUV, originVS, normalVS, radiusSS, i,\n                          randomPatternRotationAngle);\n  }\n\n  occlusion = 1.0 - occlusion / (4.0 * float(NUM_SAMPLES));\n  occlusion = clamp(pow(occlusion, 1.0 + uIntensity), 0.0, 1.0);\n  gl_FragColor = vec4(occlusion, occlusion, occlusion, 1.0);\n}\n`},function(e,t,n){const o=n(1);e.exports=`\nprecision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform float near;\nuniform float far;\n\nuniform sampler2D image;\nuniform vec2 imageSize;\n\nuniform sampler2D depthMap;\nuniform vec2 depthMapSize;\n\nuniform vec2 direction;\n\nuniform float sharpness;\nuniform float uDOFDepth;\nuniform float uDOFRange;\n\n${o.depthRead}\n\n//blur weight based on https://github.com/nvpro-samples/gl_ssao/blob/master/hbao_blur.frag.glsl\nvec4 bilateralBlur(sampler2D image, vec2 imageResolution, sampler2D depthMap, vec2 depthMapResolution, vec2 uv, vec2 direction) {\n  vec4 color = vec4(0.0);\n  const int numSamples = 9;\n  const float blurRadius = float(numSamples) / 2.0;\n  const float blurSigma = blurRadius * 0.5;\n  const float blurFalloff = 1.0 / (2.0*blurSigma*blurSigma);\n\n  float centerDepth = readDepth(depthMap, uv, near, far);\n  float dist = 0.0;\n  if (uDOFDepth > 0.0) {\n    dist = max(0.0, min(abs(centerDepth - uDOFDepth) / uDOFRange, 1.0));\n    direction *= dist;\n  }\n  float weightSum = 0.0;\n  for (float i = -8.0; i <= 8.0; i += 2.0) {\n    float r = i;\n    vec2 off = direction * r;\n    float sampleDepth = readDepth(depthMap, uv + (off / imageResolution), near, far);\n    float diff = (sampleDepth - centerDepth) * sharpness;\n    float weight = exp2(-r * r * blurFalloff - diff * diff);\n    weightSum += weight;\n    color += texture2D(image, uv + (off / imageResolution)) * weight;\n  }\n  color /= weightSum;\n  return color;\n}\n\nvoid main() {\n  vec2 vUV = vec2(gl_FragCoord.x / depthMapSize.x, gl_FragCoord.y / depthMapSize.y);\n  gl_FragColor = bilateralBlur(image, imageSize, depthMap, depthMapSize, vUV, direction);\n}\n`},function(e,t){e.exports="\nprecision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform float near;\nuniform float far;\nuniform float fov;\n\nuniform sampler2D image;\nuniform sampler2D emissiveTex;\nuniform vec2 imageSize;\n\nuniform float uExposure;\nuniform float uBloomThreshold;\n\nfloat perceivedBrightness(vec3 c) {\n  return (c.r + c.g + c.b) / 3.0;\n  //return 0.299 * c.r + 0.587 * c.g + 0.114 * c.b;\n}\n\nvoid main() {\n  vec2 vUV = vec2(gl_FragCoord.x / imageSize.x, gl_FragCoord.y / imageSize.y);\n  vec4 color = texture2D(image, vUV);\n  color.rgb *= uExposure;\n  float brightness = perceivedBrightness(color.rgb);\n  if (brightness > uBloomThreshold) {\n    gl_FragColor = color;\n  } else {\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n  }\n\n  gl_FragColor += texture2D(emissiveTex, vUV);\n}\n"},function(e,t){e.exports="\nprecision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform float near;\nuniform float far;\nuniform float fov;\n\nuniform sampler2D image;\nuniform vec2 imageSize;\n\nuniform vec2 direction;\n\nuniform float sharpness;\n\nfloat random(vec2 co)\n{\n    float a = 12.9898;\n    float b = 78.233;\n    float c = 43758.5453;\n    float dt= dot(co.xy ,vec2(a,b));\n    float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\n//blur weight based on https://github.com/nvpro-samples/gl_ssao/blob/master/hbao_blur.frag.glsl\nvec4 bloom(sampler2D image, vec2 imageResolution, vec2 uv, vec2 direction) {\n  vec4 color = vec4(0.0);\n  const int numSamples = 9;\n  const float blurRadius = float(numSamples) / 2.0;\n  const float blurSigma = blurRadius * 0.5;\n  const float blurFalloff = 1.0 / (2.0*blurSigma*blurSigma);\n\n  float weightSum = 0.0;\n  for (float i = -8.0; i <= 8.0; i += 2.0) {\n    float r = i + random(uv);\n    vec2 off = direction * r;\n    float weight = exp2(-r * r * blurFalloff);\n    weightSum += weight;\n    color += texture2D(image, uv + (off / imageResolution)) * weight;\n  }\n  color /= weightSum;\n  return color;\n}\n\nvoid main() {\n  vec2 vUV = vec2(gl_FragCoord.x / imageSize.x, gl_FragCoord.y / imageSize.y);\n  gl_FragColor = bloom(image, imageSize, vUV, direction);\n}\n"},function(e,t,n){const o=n(0),i=n(3),r=n(4),a=n(14),s=n(97),l=n(99),u=n(5).clamp,c=n(5).lerp,f=n(5).toRadians,d=n(5).toDegrees,h=n(101),p=n(102),m=n(103);function g(e){this.type="Orbiter",this.enabled=!0,this.changed=new o,this.entity=null,this.dirty=!1;const t={target:[0,0,0],position:[0,0,5],matrix:i.create(),invViewMatrix:i.create(),dragging:!1,lat:0,lon:0,currentLat:0,currentLon:0,easing:.1,element:e.element||document,width:0,height:0,clickPosWindow:[0,0],dragPos:[0,0,0],dragPosWindow:[0,0],distance:1,currentDistance:1,minDistance:.1,maxDistance:10,minLat:-89.5,maxLat:89.5,minLon:-1/0,maxLon:1/0,zoomSlowdown:400,zoom:!0,pan:!0,drag:!0,dragSlowdown:4,clickTarget:[0,0,0],clickPosPlane:[0,0,0],dragPosPlane:[0,0,0],clickPosWorld:[0,0,0],dragPosWorld:[0,0,0],panPlane:null,autoUpdate:!0};this.set(t),this.set(e)}g.prototype.init=function(e){this.entity=e,this.setup()},g.prototype.set=function(e){if(Object.assign(this,e),e.target||e.position){const t=r.distance(this.position,this.target),n=p(r.normalize(r.sub(r.copy(this.position),this.target)));this.lat=n[0],this.lon=n[1],this.currentLat=this.lat,this.currentLon=this.lon,this.distance=t,this.currentDistance=this.distance,this.minDistance=e.minDistance||t/10,this.maxDistance=e.maxDistance||10*t,this.minLat=e.minLat||-89.5,this.maxLat=e.maxLat||89.5,this.minLon=e.minLon||-1/0,this.maxLon=e.maxLon||1/0}Object.keys(e).forEach(e=>this.changed.dispatch(e))},g.prototype.update=function(){const e=this.entity.getComponent("Camera");this.updateMatrix();const t=this.entity.transform,n=t.rotation;a.fromMat4(n,this.matrix),e?(t.set({position:this.position,rotation:n}),"orthographic"===e.projection&&e.set({zoom:this.distance})):t.set({rotation:n})},g.prototype.updateWindowSize=function(){const e=this.element.clientWidth||this.element.innerWidth,t=this.element.clientHeight||this.element.innerHeight;e!==this.width&&(this.width=e,this.height=t)},g.prototype.updateMatrix=function(){const e=this.entity.getComponent("Camera"),t=this.position,n=this.target;this.lat=u(this.lat,this.minLat,this.maxLat),this.lon=u(this.lon,this.minLon,this.maxLon)%360,this.currentLat=d(l((f(this.currentLat)+2*Math.PI)%(2*Math.PI),(f(this.lat)+2*Math.PI)%(2*Math.PI),this.easing)),this.currentLon=d(l((f(this.currentLon)+2*Math.PI)%(2*Math.PI),(f(this.lon)+2*Math.PI)%(2*Math.PI),this.easing)),this.currentDistance=c(this.currentDistance,this.distance,this.easing),h(this.currentLat,this.currentLon,t),r.scale(t,this.currentDistance),r.add(t,n),i.identity(this.matrix);i.lookAt(this.matrix,t,n,[0,1,0]),e&&i.invert(this.matrix)},g.prototype.setup=function(){const e=this;function t(e,t){return e.touches?m(e.touches[0],t):m(e,t)}function n(n){if(!e.enabled)return;const o=t(n,e.element);!function(t,n,o){const i=e.entity.getComponent("Camera");if(e.dragging=!0,e.dragPos[0]=t,e.dragPos[1]=n,i&&o&&e.pan){e.updateWindowSize(),e.clickPosWindow[0]=t,e.clickPosWindow[1]=n,r.set(e.clickTarget,e.target);const o=r.multMat4(r.copy(e.clickTarget),i.viewMatrix);e.panPlane=[o,[0,0,1]],s.hitTestPlane(i.getViewRay(e.clickPosWindow[0],e.clickPosWindow[1],e.width,e.height),e.panPlane[0],e.panPlane[1],e.clickPosPlane),s.hitTestPlane(i.getViewRay(e.dragPosWindow[0],e.dragPosWindow[1],e.width,e.height),e.panPlane[0],e.panPlane[1],e.dragPosPlane)}else e.panPlane=null}(o[0],o[1],n.shiftKey||n.touches&&2===n.touches.length)}function o(n){if(!e.enabled)return;const o=t(n,e.element);!function(t,n,o){const a=e.entity.getComponent("Camera");if(e.dragging)if(a&&o&&e.panPlane){e.dragPosWindow[0]=t,e.dragPosWindow[1]=n,s.hitTestPlane(a.getViewRay(e.clickPosWindow[0],e.clickPosWindow[1],e.width,e.height),e.panPlane[0],e.panPlane[1],e.clickPosPlane),s.hitTestPlane(a.getViewRay(e.dragPosWindow[0],e.dragPosWindow[1],e.width,e.height),e.panPlane[0],e.panPlane[1],e.dragPosPlane),i.set(e.invViewMatrix,a.viewMatrix),i.invert(e.invViewMatrix),r.multMat4(r.set(e.clickPosWorld,e.clickPosPlane),e.invViewMatrix),r.multMat4(r.set(e.dragPosWorld,e.dragPosPlane),e.invViewMatrix);const o=r.sub(r.copy(e.dragPosWorld),e.clickPosWorld),l=r.sub(r.copy(e.clickTarget),o);e.set({target:l})}else if(e.drag){const o=t-e.dragPos[0],i=n-e.dragPos[1];e.dragPos[0]=t,e.dragPos[1]=n,e.lat+=i/e.dragSlowdown,e.lon-=o/e.dragSlowdown}}(o[0],o[1],n.shiftKey||n.touches&&2===n.touches.length)}function a(){e.enabled&&(e.dragging=!1,e.panPlane=null)}function l(t){var n;e.enabled&&(n=t.deltaY,e.zoom&&(e.distance*=1+n/e.zoomSlowdown,e.distance=u(e.distance,e.minDistance,e.maxDistance)),t.preventDefault())}function c(t){e.enabled&&(t.preventDefault(),n(t))}function f(t){e.enabled&&(t.preventDefault(),o(t))}this._onMouseDown=n,this._onTouchStart=c,this._onMouseMove=o,this._onTouchMove=f,this._onMouseUp=a,this._onWheel=l,this.element.addEventListener("mousedown",n),this.element.addEventListener("wheel",l),this.element.addEventListener("touchstart",c),this.element.addEventListener("touchmove",f,{passive:!1}),this.element.addEventListener("touchend",a),document.addEventListener("mousemove",o),document.addEventListener("mouseup",a)},g.prototype.dispose=function(){this.element.removeEventListener("mousedown",this._onMouseDown),this.element.removeEventListener("wheel",this._onWheel),this.element.removeEventListener("touchstart",this._onTouchStart),this.element.removeEventListener("touchmove",this._onMouseMove),this.element.removeEventListener("touchend",this._onMouseUp),document.removeEventListener("mousemove",this._onMouseMove),document.removeEventListener("mouseup",this._onMouseUp)},e.exports=function(e){return new g(e)}},function(e,t,n){var o=n(98),i=o.create(),r=o.create(),a=o.create(),s=o.create(),l=o.create(),u=o.create(),c=o.create(),f=o.create(),d=1e-6;e.exports={create:function(){return[[0,0,0],[0,0,1]]},hitTestTriangle:function(e,t,n){var h=t[0],p=t[1],m=t[2],g=e[0],v=e[1],x=o.sub(o.set(i,p),h),_=o.sub(o.set(r,m),h),M=o.cross(o.set(a,x),_);if(o.length(M)<d)return-1;var S=o.sub(o.set(s,g),h),C=-o.dot(M,S),y=o.dot(M,v);if(Math.abs(y)<d)return 0===C?-2:-3;var b=C/y;if(b<-d)return-4;var w=o.add(o.set(l,g),o.scale(o.set(u,v),b)),E=o.dot(x,x),T=o.dot(x,_),L=o.dot(_,_),O=o.sub(o.set(c,w),h),A=o.dot(O,x),P=o.dot(O,_),R=T*T-E*L,D=(T*P-L*A)/R;if(D<-d||D>1+d)return-5;var N=(T*A-E*P)/R;return N<-d||D+N>1+d?-6:(n=void 0===n?o.create():n,o.set(n,x),o.scale(n,D),o.add(n,o.scale(o.set(f,_),N)),o.add(n,h),1)},hitTestPlane:function(e,t,n,s){var l=o.set(i,e[0]),u=o.set(r,e[1]);t=o.set(a,t);var c=o.dot(u,n);if(0===c)return-1;var f=o.dot(o.sub(t,l),n)/c;return f<0?-2:(s=void 0===s?o.create():s,o.set(s,o.add(l,o.scale(u,f))),1)},intersectsAABB:function(e,t){var n=e[0],o=e[1],i=1/o[0],r=1/o[1],a=1/o[2],s=t[0],l=t[1],u=s[0],c=s[1],f=s[2],d=l[0],h=l[1],p=l[2],m=(u-n[0])*i,g=(d-n[0])*i,v=(c-n[1])*r,x=(h-n[1])*r,_=(f-n[2])*a,M=(p-n[2])*a,S=Math.max(Math.max(Math.min(m,g),Math.min(v,x)),Math.min(_,M)),C=Math.min(Math.min(Math.max(m,g),Math.max(v,x)),Math.max(_,M));return!(C<0||S>C)}}},function(e,t){var n={create:function(){return[0,0,0]},set:function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e},copy:function(e){return e.slice(0)},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]},add:function(e,t){return e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e},addScaled:function(e,t,n){return e[0]+=t[0]*n,e[1]+=t[1]*n,e[2]+=t[2]*n,e},sub:function(e,t){return e[0]-=t[0],e[1]-=t[1],e[2]-=t[2],e},scale:function(e,t){return e[0]*=t,e[1]*=t,e[2]*=t,e},multMat4:function(e,t){var n=e[0],o=e[1],i=e[2];return e[0]=t[0]*n+t[4]*o+t[8]*i+t[12],e[1]=t[1]*n+t[5]*o+t[9]*i+t[13],e[2]=t[2]*n+t[6]*o+t[10]*i+t[14],e},multQuat:function(e,t){var n=e[0],o=e[1],i=e[2],r=t[0],a=t[1],s=t[2],l=t[3],u=l*n+a*i-s*o,c=l*o+s*n-r*i,f=l*i+r*o-a*n,d=-r*n-a*o-s*i;return e[0]=u*l+d*-r+c*-s-f*-a,e[1]=c*l+d*-a+f*-r-u*-s,e[2]=f*l+d*-s+u*-a-c*-r,e},dot:function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]},cross:function(e,t){var n=e[0],o=e[1],i=e[2],r=t[0],a=t[1],s=t[2];return e[0]=o*s-a*i,e[1]=i*r-s*n,e[2]=n*a-r*o,e},length:function(e){var t=e[0],n=e[1],o=e[2];return Math.sqrt(t*t+n*n+o*o)},lengthSq:function(e){var t=e[0],n=e[1],o=e[2];return t*t+n*n+o*o},normalize:function(e){var t=e[0],n=e[1],o=e[2],i=Math.sqrt(t*t+n*n+o*o);return i=1/(i||1),e[0]*=i,e[1]*=i,e[2]*=i,e},distance:function(e,t){var n=t[0]-e[0],o=t[1]-e[1],i=t[2]-e[2];return Math.sqrt(n*n+o*o+i*i)},distanceSq:function(e,t){var n=t[0]-e[0],o=t[1]-e[1],i=t[2]-e[2];return n*n+o*o+i*i},limit:function(e,t){var n=e[0],o=e[1],i=e[2],r=n*n+o*o+i*i,a=t*t;if(a>0&&r>a){var s=t/Math.sqrt(r);e[0]*=s,e[1]*=s,e[2]*=s}return e},lerp:function(e,t,n){var o=e[0],i=e[1],r=e[2];return e[0]=o+(t[0]-o)*n,e[1]=i+(t[1]-i)*n,e[2]=r+(t[2]-r)*n,e},toString:function(e,t){var n=Math.pow(10,void 0!==t?t:4),o="[";return o+=Math.floor(e[0]*n)/n+", ",o+=Math.floor(e[1]*n)/n+", ",o+=Math.floor(e[2]*n)/n+"]"}};e.exports=n},function(e,t,n){var o=n(100),i=Math.PI,r=2*Math.PI;e.exports=function(e,t,n){return e=(e+r)%r,t=(t+r)%r,Math.abs(e-t)<i?o(e,t,n):e>t?o(e-=r,t,n):t>e?o(e,t-=r,n):void 0}},function(e,t){e.exports=function(e,t,n){return e*(1-n)+t*n}},function(e,t){e.exports=function(e,t,n){n=n||[0,0,0];const o=(t+90)/180*Math.PI,i=(90-e)/180*Math.PI;return n[0]=Math.sin(i)*Math.sin(o),n[1]=Math.cos(i),n[2]=Math.sin(i)*Math.cos(o),n}},function(e,t){e.exports=function(e,t){return(t=t||[0,0])[0]=90-Math.acos(e[1])/Math.PI*180,t[1]=-Math.atan2(e[2],e[0])/Math.PI*180,t}},function(e,t){var n={left:0,top:0};e.exports=function(e,t,o){t=t||e.currentTarget||e.srcElement,Array.isArray(o)||(o=[0,0]);var i=e.clientX||0,r=e.clientY||0,a=(s=t,s===window||s===document||s===document.body?n:s.getBoundingClientRect());var s;return o[0]=i-a.left,o[1]=r-a.top,o}},function(e,t,n){const o=n(0);function i(e){this.type="AmbientLight",this.enabled=!0,this.changed=new o,this.color=[1,1,1,1],this.intensity=1,this.set(e)}i.prototype.init=function(e){this.entity=e},i.prototype.set=function(e){Object.assign(this,e),void 0===e.color&&void 0===e.intensity||(this.color[3]=this.intensity),Object.keys(e).forEach(e=>this.changed.dispatch(e))},e.exports=function(e){return new i(e)}},function(e,t,n){const o=n(0),i=n(3),r=n(106)("pex-renderer:directional-light");function a(e){this.type="DirectionalLight",this.enabled=!0,this.changed=new o,this.shadows=!1,this.color=[1,1,1,1],this.intensity=1,this.bias=.1,this.castShadows=!1;const t=e.ctx;this._ctx=t,this._left=-10,this._right=10,this._bottom=-10,this._top=10,this._near=2,this._far=40,this._viewMatrix=i.create(),this._projectionMatrix=i.create(),this.set(e)}a.prototype.init=function(e){this.entity=e},a.prototype.set=function(e){Object.assign(this,e),void 0===e.color&&void 0===e.intensity||(this.color[3]=this.intensity),Object.keys(e).forEach(e=>this.changed.dispatch(e)),e.castShadows&&!this._ctx.capabilities.depthTexture&&(console.warn("DirectionalLight.castShadows is not supported. WEBGL_depth_texture missing."),this.castShadows=!1),this.castShadows?this._colorMap||this.allocateResources():this._colorMap&&this.disposeResources()},a.prototype.allocateResources=function(){r("allocatedResources");const e=this._ctx;this._colorMap=e.texture2D({name:"directionalLightColorMap",width:1024,height:1024,pixelFormat:e.PixelFormat.RGBA8,encoding:e.Encoding.Linear,min:e.Filter.Linear,mag:e.Filter.Linear}),this._shadowMap=e.texture2D({name:"directionalLightShadowMap",width:1024,height:1024,pixelFormat:e.PixelFormat.Depth,encoding:e.Encoding.Linear}),this._shadowMapDrawCommand={name:"DirectionalLight.shadowMap",pass:e.pass({name:"DirectionalLight.shadowMap",color:[this._colorMap],depth:this._shadowMap,clearColor:[0,0,0,1],clearDepth:1}),viewport:[0,0,1024,1024]}},a.prototype.disposeResources=function(){r("disposeResources");const e=this._ctx;e.dispose(this._colorMap),this._colorMap=null,e.dispose(this._shadowMap),this._shadowMap=null,e.dispose(this._shadowMapDrawCommand.pipeline),this._shadowMapDrawCommand=null},e.exports=function(e){return new a(e)}},function(e,t,n){(function(o){t.log=function(...e){return"object"==typeof console&&console.log&&console.log(...e)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let o=0,i=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(o++,"%c"===e&&(i=o))}),t.splice(i,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}!e&&void 0!==o&&"env"in o&&(e=o.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(107)(t);const{formatters:i}=e.exports;i.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}).call(this,n(11))},function(e,t,n){e.exports=function(e){function t(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return o.colors[Math.abs(t)%o.colors.length]}function o(e){let n;function a(...e){if(!a.enabled)return;const t=a,i=Number(new Date),r=i-(n||i);t.diff=r,t.prev=n,t.curr=i,n=i,e[0]=o.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return n;s++;const r=o.formatters[i];if("function"==typeof r){const o=e[s];n=r.call(t,o),e.splice(s,1),s--}return n}),o.formatArgs.call(t,e),(t.log||o.log).apply(t,e)}return a.namespace=e,a.enabled=o.enabled(e),a.useColors=o.useColors(),a.color=t(e),a.destroy=i,a.extend=r,"function"==typeof o.init&&o.init(a),o.instances.push(a),a}function i(){const e=o.instances.indexOf(this);return-1!==e&&(o.instances.splice(e,1),!0)}function r(e,t){const n=o(this.namespace+(void 0===t?":":t)+e);return n.log=this.log,n}function a(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return o.debug=o,o.default=o,o.coerce=function(e){return e instanceof Error?e.stack||e.message:e},o.disable=function(){const e=[...o.names.map(a),...o.skips.map(a).map(e=>"-"+e)].join(",");return o.enable(""),e},o.enable=function(e){let t;o.save(e),o.names=[],o.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),i=n.length;for(t=0;t<i;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?o.skips.push(new RegExp("^"+e.substr(1)+"$")):o.names.push(new RegExp("^"+e+"$")));for(t=0;t<o.instances.length;t++){const e=o.instances[t];e.enabled=o.enabled(e.namespace)}},o.enabled=function(e){if("*"===e[e.length-1])return!0;let t,n;for(t=0,n=o.skips.length;t<n;t++)if(o.skips[t].test(e))return!1;for(t=0,n=o.names.length;t<n;t++)if(o.names[t].test(e))return!0;return!1},o.humanize=n(108),Object.keys(e).forEach(t=>{o[t]=e[t]}),o.instances=[],o.names=[],o.skips=[],o.formatters={},o.selectColor=t,o.enable(o.load()),o}},function(e,t){var n=1e3,o=60*n,i=60*o,r=24*i,a=7*r,s=365.25*r;function l(e,t,n,o){var i=t>=1.5*n;return Math.round(e/n)+" "+o+(i?"s":"")}e.exports=function(e,t){t=t||{};var u=typeof e;if("string"===u&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var l=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return l*s;case"weeks":case"week":case"w":return l*a;case"days":case"day":case"d":return l*r;case"hours":case"hour":case"hrs":case"hr":case"h":return l*i;case"minutes":case"minute":case"mins":case"min":case"m":return l*o;case"seconds":case"second":case"secs":case"sec":case"s":return l*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return l;default:return}}(e);if("number"===u&&!1===isNaN(e))return t.long?function(e){var t=Math.abs(e);if(t>=r)return l(e,t,r,"day");if(t>=i)return l(e,t,i,"hour");if(t>=o)return l(e,t,o,"minute");if(t>=n)return l(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=r)return Math.round(e/r)+"d";if(t>=i)return Math.round(e/i)+"h";if(t>=o)return Math.round(e/o)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){const o=n(0),i=n(10).mat4;function r(e){this.type="PointLight",this.enabled=!0,this.changed=new o,this.color=[1,1,1,1],this.intensity=1,this.range=10,this.castShadows=!1;const t=e.ctx;this._ctx=t,this.set(e)}r.prototype.init=function(e){this.entity=e},r.prototype.set=function(e){Object.assign(this,e),void 0===e.color&&void 0===e.intensity||(this.color[3]=this.intensity),e.castShadows&&!this._ctx.capabilities.depthTexture&&(console.warn("PointLight.castShadows is not supported. WEBGL_depth_texture missing."),this.castShadows=!1),Object.keys(e).forEach(e=>this.changed.dispatch(e)),this.castShadows?this._shadowCubemap||this.allocateResources():this._shadowCubemap&&this.disposeResources()},r.prototype.allocateResources=function(){const e=this._ctx;this._shadowCubemap=e.textureCube({width:512,height:512,pixelFormat:this.rgbm?e.PixelFormat.RGBA8:e.PixelFormat.RGBA16F,encoding:this.rgbm?e.Encoding.RGBM:e.Encoding.Linear}),this._shadowMap=e.texture2D({name:"pointLightShadowMap",width:512,height:512,pixelFormat:e.PixelFormat.Depth,encoding:e.Encoding.Linear}),this._sides=[{eye:[0,0,0],target:[1,0,0],up:[0,-1,0]},{eye:[0,0,0],target:[-1,0,0],up:[0,-1,0]},{eye:[0,0,0],target:[0,1,0],up:[0,0,1]},{eye:[0,0,0],target:[0,-1,0],up:[0,0,-1]},{eye:[0,0,0],target:[0,0,1],up:[0,-1,0]},{eye:[0,0,0],target:[0,0,-1],up:[0,-1,0]}].map((t,n)=>(t.projectionMatrix=i.perspective(i.create(),Math.PI/2,1,.1,100),t.viewMatrix=i.lookAt(i.create(),t.eye,t.target,t.up),t.drawPassCmd={name:"PointLight.sidePass",pass:e.pass({name:"PointLight.sidePass",depth:this._shadowMap,color:[{texture:this._shadowCubemap,target:e.gl.TEXTURE_CUBE_MAP_POSITIVE_X+n}],clearColor:[0,0,0,1],clearDepth:1})},t))},r.prototype.disposeResources=function(){const e=this._ctx;e.dispose(this._shadowCubemap),this._shadowCubemap=null,e.dispose(this._shadowMap),this._shadowMap=null,this._sides.forEach(t=>{e.dispose(t.drawPassCmd.pass)}),this._sides=null},e.exports=function(e){return new r(e)}},function(e,t,n){const o=n(0),i=n(10).mat4;function r(e){this.type="SpotLight",this.enabled=!0,this.changed=new o,this.target=[0,0,0],this.color=[1,1,1,1],this.intensity=1,this.angle=Math.PI/4,this.innerAngle=0,this.range=10,this.castShadows=!1,this.bias=.1;const t=e.ctx;this._ctx=t,this._near=2,this._far=40,this._viewMatrix=i.create(),this._projectionMatrix=i.create(),this.set(e)}r.prototype.init=function(e){this.entity=e},r.prototype.set=function(e){Object.assign(this,e),void 0===e.color&&void 0===e.intensity||(this.color[3]=this.intensity),e.castShadows&&!this._ctx.capabilities.depthTexture&&(console.warn("SpotLight.castShadows is not supported. WEBGL_depth_texture missing."),this.castShadows=!1),this.castShadows?this._colorMap||this.allocateResources():this._colorMap&&this.disposeResources(),Object.keys(e).forEach(e=>this.changed.dispatch(e))},r.prototype.allocateResources=function(){const e=this._ctx;this._colorMap=e.texture2D({name:"spotLightColorMap",width:1024,height:1024,pixelFormat:e.PixelFormat.RGBA8,encoding:e.Encoding.Linear,min:e.Filter.Linear,mag:e.Filter.Linear}),this._shadowMap=e.texture2D({name:"spotLightShadowMap",width:1024,height:1024,pixelFormat:e.PixelFormat.Depth,encoding:e.Encoding.Linear}),this._shadowMapDrawCommand={name:"SpotLight.shadowMap",pass:e.pass({name:"SpotLight.shadowMap",color:[this._colorMap],depth:this._shadowMap,clearColor:[0,0,0,1],clearDepth:1}),viewport:[0,0,1024,1024]}},r.prototype.disposeResources=function(){const e=this._ctx;e.dispose(this._colorMap),this._colorMap=null,e.dispose(this._shadowMap),this._shadowMap=null,e.dispose(this._shadowMapDrawCommand.pipeline),this._shadowMapDrawCommand=null},e.exports=function(e){return new r(e)}},function(e,t,n){const o=n(0),i=n(112);function r(e){this.type="AreaLight",this.enabled=!0,this.changed=new o,this.color=[1,1,1,1],this.intensity=1,this.castShadows=!1,this.set(e);const t=e.ctx;r.areaLightTexturesRefs||(r.ltc_mat_texture=t.texture2D({data:i.mat,width:64,height:64,pixelFormat:t.PixelFormat.RGBA32F,encoding:t.Encoding.Linear,min:t.Filter.Linear,mag:t.Filter.Linear}),r.ltc_mag_texture=t.texture2D({data:i.mag,width:64,height:64,pixelFormat:t.PixelFormat.R32F,encoding:t.Encoding.Linear,min:t.Filter.Linear,mag:t.Filter.Linear})),r.areaLightTexturesRefs=(r.areaLightTexturesRefs||0)+1,this.ltc_mat_texture=r.ltc_mat_texture,this.ltc_mag_texture=r.ltc_mag_texture}r.prototype.init=function(e){this.entity=e},r.prototype.set=function(e){Object.assign(this,e),Object.keys(e).forEach(e=>this.changed.dispatch(e)),void 0===e.color&&void 0===e.intensity||(this.color[3]=this.intensity)},r.prototype.dispose=function(){0==--r.areaLightTexturesRefs&&(this.ctx.dispose(r.ltc_mat_texture),r.ltc_mat_texture=null,this.ctx.dispose(r.ltc_mag_texture),r.ltc_mag_texture=null)},e.exports=function(e){return new r(e)}},function(e,t){e.exports.mat=[2e-4,-0,1,-0,504e-6,-0,1,-0,.002016,-0,1,-0,.004535,-0,1,-0,.008063,-0,1,-0,.012598,-0,1,-0,.018141,-0,1,-0,.024692,-0,1,-0,.032252,-0,1,-0,.040821,-0,1,-0,.0504,-0,1,-0,.060989,-0,1,-0,.072591,-0,1,-0,.085206,-0,1,-0,.098836,-0,1,-0,.113483,-0,1,-0,.129147,-0,1,-0,.145828,-0,1,-0,.163499,-0,1,-0,.181972,-0,1,-0,.199498,-0,1,-0,.220031,-0,1,-0,.241588,-0,1,-0,.26412,-0,1,-0,.287521,-0,1,-0,.311478,-0,1,-0,.335127,-0,1,-0,.359811,-0,1,-0,.386446,-0,1,-0,.413161,-0,1,-0,.439142,-0,1,-0,.467039,-0,1,-0,.49517,-0,1,-0,.522324,-0,1,-0,.551482,-0,1,-0,.579621,-0,1,-0,.608255,-0,1,-0,.636515,-0,1,-0,.664835,-0,1,-0,.692549,-0,1,-0,.720375,-0,1,-0,.747238,-0,1,-0,.773956,-0,1,-0,.799879,-0,1,-0,.824889,-0,1,-0,.849357,-0,1,-0,.873016,-0,1,-0,.89567,-0,1,-0,.917194,-0,1,-0,.937978,-0,1,-0,.957872,-0,1,-0,.976736,-0,1,-0,.994433,-0,1,-0,1.011206,-0,1,-0,1.02682,-0,1,-0,1.04172,-0,1,-0,1.055657,-0,1,-0,1.068642,-0,1,-0,1.080646,-0,1,-0,1.091637,-0,1,-0,1.101837,-0,1,-0,1.111292,-0,1,-0,1.120025,-0,1,-0,1.127918,-0,1,-0,2e-4,-5e-6,1.000623,.024938,504e-6,-13e-6,1.000643,.024938,.002016,-5e-5,1.000618,.024938,.004535,-113e-6,1.000621,.024938,.008063,-201e-6,1.000746,.024938,.012596,-314e-6,1.000463,.024937,.01814,-452e-6,1.000511,.024939,.024693,-616e-6,1.000541,.024938,.032253,-804e-6,1.000684,.024938,.040815,-.001018,1.000524,.02494,.050399,-.001257,1.000582,.024937,.060989,-.001521,1.000655,.024937,.072591,-.00181,1.000608,.024938,.085204,-.002125,1.000622,.024939,.098835,-.002465,1.000632,.024937,.113483,-.00283,1.00064,.024939,.129143,-.00322,1.000568,.024938,.14583,-.003633,1.000635,.024938,.163497,-.004062,1.000626,.024938,.181956,-.004424,1.000612,.024924,.199791,-.004593,1.000627,.02489,.220029,-.00548,1.000594,.024935,.241586,-.00601,1.000616,.024933,.264115,-.00655,1.000607,.024927,.287514,-.007072,1.000595,.024909,.311455,-.007472,1.000616,.024872,.335083,-.007491,1.000589,.024755,.359805,-.00881,1.000601,.024877,.386438,-.009282,1.00064,.024824,.413131,-.009534,1.000599,.024708,.439249,-.009701,1.000497,.024573,.466997,-.010878,1.000467,.024652,.495138,-.010959,1.000539,.024455,.522654,-.011386,1.000518,.024318,.551415,-.012022,1.000533,.024216,.57961,-.011805,1.000495,.023867,.608185,-.012773,1.000474,.023834,.636492,-.012377,1.000488,.023327,.664826,-.013172,1.000576,.023205,.692674,-.012847,1.000505,.022708,.720341,-.013141,1.000424,.022349,.747373,-.013227,1.000449,.021871,.77398,-.012739,1.000478,.021171,.799839,-.012999,1.000396,.020606,.825113,-.012727,1.000425,.020006,.849579,-.01217,1.000469,.019089,.873046,-.011855,1.000411,.018291,.895777,-.011711,1.000426,.017534,.917518,-.011107,1.000373,.016542,.938264,-.010439,1.000322,.015512,.958032,-.009807,1.000324,.014491,.976838,-.009268,1.000341,.013468,.994631,-.008662,1.000318,.012376,1.011434,-.007923,1.000289,.011187,1.027169,-.007132,1.000216,.010078,1.041929,-.006332,1.000096,.008924,1.055767,-.005554,1.000156,.00777,1.068595,-.004811,1.000084,.006611,1.080612,-.00395,1.000047,.005485,1.091785,-.003174,1.000109,.004352,1.101998,-.002363,1.000029,.00318,1.111423,-.001552,.999985,.002091,1.120007,-786e-6,.999947,991e-6,1.127918,4e-6,1,-4e-6,2e-4,-1e-5,1.002495,.049907,504e-6,-25e-6,1.002476,.049908,.002016,-101e-6,1.0025,.049908,.004535,-226e-6,1.002487,.049908,.008062,-402e-6,1.002364,.049908,.012598,-629e-6,1.002412,.049908,.01814,-905e-6,1.002379,.049908,.024691,-.001232,1.00249,.049907,.032251,-.00161,1.002398,.049908,.040821,-.002037,1.002392,.049908,.050398,-.002515,1.002431,.049907,.060989,-.003044,1.002475,.049908,.072592,-.003623,1.002546,.049907,.085204,-.004252,1.002467,.049907,.098832,-.004932,1.00245,.049908,.113481,-.005663,1.002482,.049907,.129145,-.006443,1.002443,.049907,.145825,-.007271,1.002495,.049906,.163491,-.008128,1.002475,.049903,.181911,-.008826,1.002459,.049879,.200065,-.009285,1.002443,.049824,.220025,-.010966,1.00245,.049897,.241581,-.012025,1.002463,.049893,.264099,-.013105,1.002395,.049881,.287493,-.014145,1.00239,.049855,.311399,-.014925,1.002414,.049769,.335096,-.015239,1.002363,.049591,.359815,-.017559,1.002415,.049777,.386365,-.018554,1.002354,.049675,.413017,-.019043,1.002297,.049444,.439519,-.019815,1.002284,.049253,.466938,-.021741,1.002307,.049327,.494999,-.021887,1.002181,.048922,.522922,-.022844,1.002107,.048677,.55127,-.024014,1.002101,.048478,.579771,-.024156,1.00206,.047904,.608156,-.025317,1.002077,.047594,.636662,-.025321,1.001975,.046876,.664846,-.026018,1.001992,.046354,.692877,-.026041,1.001846,.045504,.720316,-.026252,1.001846,.044655,.747658,-.026159,1.001931,.04367,.774252,-.026086,1.001845,.042515,.800179,-.025653,1.001794,.041211,.825525,-.02517,1.001787,.039823,.850013,-.024788,1.001806,.038409,.873593,-.023992,1.001688,.036767,.896343,-.022985,1.001666,.0349,.918062,-.022005,1.001548,.03301,.938928,-.02111,1.001503,.031143,.958667,-.019893,1.001341,.029059,.977457,-.018546,1.001194,.026888,.995243,-.017152,1.001095,.024713,1.012023,-.01575,1.0011,.022496,1.027614,-.014289,1.000851,.020153,1.042389,-.012688,1.000724,.017839,1.056161,-.011118,1.000572,.015529,1.068968,-.00954,1.000407,.01324,1.080866,-.007963,1.000258,.01094,1.091944,-.006416,1.000254,.008716,1.102104,-.004771,1.000175,.006434,1.111571,-.003056,1.000148,.004169,1.120084,-.001458,1.00005,.002033,1.127981,21e-6,.999987,-27e-6,2e-4,-15e-6,1.00562,.07494,504e-6,-38e-6,1.00565,.074939,.002016,-151e-6,1.005613,.074939,.004535,-34e-5,1.005618,.074939,.008062,-604e-6,1.005614,.074939,.012597,-944e-6,1.005616,.07494,.018141,-.001359,1.005558,.074939,.024695,-.001851,1.005495,.07494,.032253,-.002417,1.005616,.074939,.040822,-.003059,1.005591,.07494,.050399,-.003777,1.005596,.07494,.060989,-.00457,1.005599,.074939,.072591,-.00544,1.005616,.07494,.085203,-.006385,1.005616,.074939,.098833,-.007406,1.005595,.074938,.113481,-.008502,1.005605,.074938,.129147,-.009674,1.005605,.074937,.145817,-.010916,1.005513,.074937,.163485,-.012199,1.005579,.074928,.181824,-.013172,1.005552,.074885,.200274,-.0141,1.005524,.074825,.220017,-.016464,1.005529,.074928,.241568,-.018052,1.00549,.074914,.264084,-.019671,1.005457,.074898,.28745,-.021217,1.005431,.07486,.311281,-.022341,1.005395,.074717,.335228,-.023296,1.00532,.074526,.360047,-.025965,1.005302,.074649,.386273,-.027808,1.005285,.074575,.412855,-.028504,1.005167,.074237,.439705,-.030007,1.005129,.074013,.466975,-.032263,1.005082,.073967,.494874,-.032931,1.00496,.073475,.523066,-.034348,1.004834,.073084,.551198,-.035739,1.004806,.072657,.579889,-.036575,1.004687,.072029,.608282,-.037434,1.004605,.071309,.636812,-.038323,1.004589,.070507,.66501,-.038676,1.004403,.069424,.693063,-.039237,1.00434,.06837,.72075,-.039332,1.004224,.066988,.747911,-.039179,1.004117,.065447,.774576,-.03911,1.004035,.063838,.800737,-.038542,1.004027,.061923,.825966,-.037966,1.003825,.059859,.850534,-.036943,1.003786,.057529,.874289,-.035853,1.00356,.055081,.897152,-.03473,1.003549,.052476,.919029,-.033242,1.003454,.049647,.939851,-.031508,1.003215,.04667,.959599,-.029695,1.002916,.043588,.978293,-.027845,1.00272,.040401,.996085,-.025775,1.002445,.03706,1.012768,-.023607,1.002133,.033726,1.028404,-.021374,1.001822,.030217,1.04315,-.019108,1.001602,.02682,1.05676,-.016823,1.001274,.023372,1.069471,-.014378,1.000964,.019891,1.081283,-.011884,1.000684,.016405,1.092238,-.009398,1.000514,.01295,1.102384,-.00703,1.000319,.009579,1.111737,-.004751,1.000225,.006384,1.120274,-.002404,1.000046,.003192,1.128182,31e-6,1.00002,33e-6,2e-4,-2e-5,1.010006,.100065,504e-6,-5e-5,1.009927,.100065,.002016,-202e-6,1.010026,.100064,.004535,-454e-6,1.010018,.100065,.008062,-807e-6,1.009891,.100064,.012599,-.001261,1.010175,.100064,.018141,-.001815,1.010067,.100065,.024692,-.002471,1.010014,.100066,.032251,-.003227,1.00995,.100065,.040818,-.004084,1.009963,.100067,.050401,-.005043,1.010032,.100064,.060988,-.006102,1.009979,.100064,.072588,-.007263,1.009984,.100063,.085205,-.008525,1.010023,.100063,.098832,-.009888,1.00996,.100062,.113479,-.011352,1.009974,.100063,.129142,-.012916,1.009945,.100062,.145817,-.014573,1.009924,.100058,.163468,-.016276,1.009912,.10005,.181674,-.017411,1.009859,.099975,.200435,-.019002,1.009842,.099932,.220005,-.021978,1.00982,.100043,.24155,-.024096,1.009778,.100031,.264058,-.02625,1.009765,.100002,.287399,-.028286,1.009724,.099939,.311134,-.029698,1.009596,.099748,.33535,-.031442,1.009508,.099582,.360295,-.034401,1.009475,.099613,.386112,-.03703,1.009329,.099558,.412733,-.038163,1.00925,.099137,.439833,-.04025,1.009125,.098866,.467099,-.042583,1.009011,.098626,.494828,-.044299,1.008803,.098149,.523217,-.045876,1.008712,.0976,.551338,-.04744,1.008509,.096929,.579917,-.048995,1.008371,.096178,.608454,-.049901,1.008212,.095145,.636785,-.051224,1.007963,.094151,.66522,-.051675,1.007741,.092728,.693194,-.052278,1.007616,.091195,.721008,-.052406,1.007327,.089384,.748196,-.052529,1.007219,.087461,.774975,-.05195,1.006851,.085133,.801129,-.051456,1.006732,.082628,.826668,-.050569,1.006612,.079817,.851291,-.049328,1.006374,.07671,.875056,-.047988,1.006183,.073481,.897872,-.046149,1.005742,.069943,.919803,-.044144,1.005514,.066151,.940701,-.042095,1.005153,.062247,.96058,-.03973,1.004843,.058158,.979427,-.037104,1.004535,.05385,.997157,-.034369,1.004023,.049403,1.013777,-.031555,1.003622,.044944,1.029452,-.028571,1.003212,.040414,1.044029,-.025416,1.002698,.035723,1.057586,-.022217,1.002202,.031072,1.070148,-.019037,1.001703,.026429,1.081875,-.015936,1.001322,.021896,1.092789,-.012734,1.001053,.017288,1.102704,-.009454,1.000604,.012841,1.112011,-.006199,1.000387,.008446,1.12059,-.00301,1.000166,.004122,1.128283,27e-6,.999956,-38e-6,2e-4,-25e-6,1.015664,.125315,504e-6,-63e-6,1.015664,.125316,.002016,-253e-6,1.015727,.125315,.004535,-568e-6,1.015695,.125314,.008063,-.00101,1.015823,.125316,.012599,-.001579,1.015867,.125315,.018141,-.002273,1.015758,.125316,.024691,-.003094,1.015662,.125316,.032252,-.004042,1.015674,.125316,.04082,-.005115,1.015678,.125316,.0504,-.006316,1.015684,.125315,.060989,-.007642,1.015685,.125315,.07259,-.009096,1.015703,.125314,.085203,-.010676,1.015654,.125314,.098833,-.012383,1.01567,.125315,.113477,-.014215,1.015635,.125312,.129138,-.016173,1.015599,.125311,.145815,-.018246,1.01561,.125306,.16345,-.02036,1.015564,.125294,.181595,-.021807,1.01546,.125204,.200563,-.023971,1.01544,.125165,.220186,-.02728,1.015412,.12525,.241528,-.030164,1.015342,.125267,.26402,-.032847,1.015269,.125233,.287311,-.035345,1.015232,.125138,.310993,-.037108,1.015063,.124903,.335467,-.039653,1.01497,.124749,.360497,-.042914,1.014819,.124702,.385986,-.046142,1.014685,.124623,.412703,-.04805,1.014543,.124193,.439929,-.050527,1.014315,.123833,.467163,-.05288,1.014087,.123375,.494824,-.055672,1.013898,.122982,.523222,-.057388,1.013647,.122166,.551557,-.059328,1.013403,.121343,.579884,-.061315,1.013059,.12043,.608619,-.062531,1.012745,.11914,.637014,-.063778,1.012425,.117721,.665425,-.064734,1.012067,.116069,.69358,-.065315,1.011712,.114146,.721194,-.065535,1.0112,.111846,.748586,-.065501,1.010896,.109309,.775437,-.065091,1.010576,.106504,.801554,-.064332,1.010136,.103308,.827079,-.063078,1.009629,.099695,.851693,-.061728,1.009233,.095946,.875586,-.059853,1.008726,.091802,.898589,-.057727,1.008412,.087339,.920421,-.055377,1.007767,.082687,.941533,-.052571,1.007529,.077716,.961426,-.049544,1.006929,.072574,.980287,-.0464,1.006393,.067217,.99808,-.042966,1.005872,.061757,1.01494,-.039321,1.005346,.056072,1.030455,-.035585,1.004609,.05041,1.045078,-.031823,1.004151,.044622,1.058555,-.027947,1.003421,.038893,1.071009,-.023891,1.002704,.032977,1.082594,-.019822,1.002023,.02729,1.093265,-.015765,1.001403,.021543,1.103132,-.01179,1.000944,.016072,1.112348,-.007784,1.00055,.010511,1.120845,-.003849,1.000224,.005174,1.128573,57e-6,.999975,-39e-6,2e-4,-3e-5,1.022609,.150725,504e-6,-76e-6,1.022728,.150725,.002016,-304e-6,1.022728,.150725,.004535,-684e-6,1.022733,.150725,.008062,-.001215,1.022715,.150725,.012598,-.001899,1.02272,.150725,.018141,-.002734,1.022659,.150725,.024694,-.003722,1.022801,.150724,.032254,-.004861,1.022779,.150726,.040815,-.006152,1.022693,.150724,.0504,-.007596,1.022716,.150725,.06099,-.009192,1.022733,.150725,.072587,-.010939,1.02263,.150723,.085203,-.012839,1.022676,.150725,.098828,-.014891,1.022659,.150725,.113473,-.017095,1.022589,.15072,.129137,-.019449,1.022572,.150716,.145803,-.021938,1.022508,.150712,.163417,-.024443,1.022471,.150691,.18158,-.026329,1.022406,.1506,.200667,-.028997,1.022336,.150553,.220429,-.032584,1.022296,.15061,.241497,-.03626,1.022202,.150658,.263975,-.039465,1.022119,.150619,.28721,-.042385,1.021988,.15049,.310935,-.044758,1.021771,.150241,.335556,-.047922,1.021658,.150076,.360667,-.051493,1.021437,.149931,.386028,-.054931,1.021228,.149754,.412665,-.058007,1.021023,.1494,.439951,-.060813,1.020723,.148913,.467262,-.063461,1.020332,.148319,.494972,-.066738,1.020097,.147798,.523153,-.068976,1.01963,.146903,.5517,-.071268,1.019245,.145863,.580046,-.073439,1.018797,.144695,.608649,-.075193,1.018201,.143237,.637239,-.076536,1.017746,.141463,.665388,-.077771,1.017111,.139462,.693755,-.078344,1.016609,.137082,.721345,-.078817,1.015863,.134403,.748879,-.078512,1.01539,.131252,.77556,-.078128,1.014652,.127866,.801897,-.077094,1.013877,.123928,.827193,-.075863,1.013021,.119733,.85199,-.073973,1.012395,.115055,.875823,-.071765,1.011595,.110098,.898655,-.069241,1.010862,.104722,.920915,-.066232,1.010185,.098991,.941969,-.06298,1.009588,.093044,.961882,-.059507,1.008777,.086925,.980952,-.055606,1.008252,.08052,.998955,-.051503,1.007633,.07389,1.015756,-.047292,1.006908,.067302,1.031571,-.042804,1.006338,.060412,1.046095,-.038132,1.005512,.053497,1.059542,-.03338,1.004592,.046569,1.072006,-.028613,1.003731,.039679,1.083348,-.023811,1.002871,.032772,1.093969,-.01893,1.002068,.025894,1.103697,-.014098,1.001284,.019178,1.112813,-.009339,1.00082,.012652,1.121193,-.004661,1.000324,.006226,1.12893,52e-6,.999988,-8e-6,2e-4,-35e-6,1.030857,.176327,504e-6,-89e-6,1.031137,.176326,.002016,-355e-6,1.031049,.176325,.004535,-8e-4,1.031105,.176326,.008062,-.001422,1.030973,.176326,.012598,-.002221,1.031168,.176326,.018141,-.003199,1.031093,.176326,.024695,-.004354,1.031297,.176326,.032253,-.005687,1.031091,.176327,.040821,-.007197,1.031012,.176326,.050399,-.008886,1.031068,.176325,.060987,-.010752,1.030967,.176323,.072588,-.012797,1.031028,.176324,.0852,-.015019,1.030985,.176322,.098829,-.017419,1.030983,.17632,.113474,-.019997,1.030953,.176317,.129133,-.022748,1.030891,.176312,.1458,-.025655,1.030825,.176306,.163372,-.02851,1.030781,.176279,.181578,-.030914,1.030683,.176187,.200761,-.034076,1.030574,.176139,.220645,-.037985,1.030476,.17616,.241473,-.042391,1.030384,.176238,.263922,-.046105,1.030241,.176175,.287074,-.04939,1.030049,.176013,.310915,-.052511,1.029839,.175776,.335604,-.056236,1.029608,.175578,.360775,-.060118,1.029355,.175359,.386196,-.063907,1.029052,.175083,.412599,-.067997,1.028766,.174791,.439916,-.071088,1.028326,.174174,.467444,-.074247,1.02789,.173487,.495132,-.077728,1.027374,.172774,.523117,-.080822,1.026763,.171824,.551783,-.083228,1.026205,.170554,.580234,-.085682,1.025614,.16909,.608568,-.08786,1.024668,.167468,.637357,-.089346,1.023939,.165283,.665507,-.090704,1.022946,.162966,.693704,-.091388,1.02201,.160131,.721396,-.091783,1.021085,.156957,.748676,-.091688,1.019894,.153292,.77537,-.090992,1.018608,.149158,.801547,-.089881,1.017646,.144551,.827013,-.088267,1.016355,.139614,.851708,-.086132,1.015446,.134026,.875652,-.083707,1.014321,.128101,.898703,-.080619,1.013454,.121841,.920904,-.07728,1.012634,.115379,.942077,-.073484,1.01177,.108355,.962245,-.069252,1.010894,.101153,.981385,-.064807,1.010114,.093666,.999379,-.06008,1.009294,.086007,1.016494,-.055007,1.008591,.078194,1.032357,-.04976,1.007821,.070328,1.047061,-.044468,1.006871,.062358,1.060675,-.03896,1.006062,.054279,1.073032,-.033343,1.004911,.046158,1.084293,-.027699,1.003791,.038111,1.094724,-.02213,1.002744,.030239,1.104302,-.016508,1.001815,.022397,1.11329,-.010846,1.001083,.014747,1.121649,-.005294,1.00049,.007234,1.12923,71e-6,.999975,-53e-6,2e-4,-4e-5,1.040431,.202155,504e-6,-102e-6,1.040912,.202154,.002016,-407e-6,1.041328,.202152,.004535,-917e-6,1.040877,.202154,.008063,-.00163,1.040867,.202153,.012598,-.002547,1.04087,.202153,.01814,-.003667,1.040808,.202153,.024692,-.004991,1.040861,.202153,.032252,-.006519,1.040861,.202153,.040822,-.008252,1.040864,.202153,.050397,-.010187,1.040717,.202151,.060988,-.012327,1.040791,.202152,.072582,-.014669,1.04064,.202149,.085198,-.017217,1.040716,.202147,.098827,-.019968,1.040748,.202141,.113467,-.022921,1.040632,.202142,.129129,-.026074,1.040606,.202137,.145793,-.029399,1.040566,.202127,.163294,-.032524,1.040459,.202078,.181589,-.035552,1.040315,.201996,.200844,-.039208,1.040221,.201948,.220835,-.043489,1.040047,.201945,.241471,-.048523,1.039921,.202031,.263854,-.052764,1.039756,.201957,.286935,-.056387,1.039497,.201743,.310902,-.060338,1.039252,.201531,.335642,-.064594,1.038954,.201286,.360859,-.068772,1.038582,.200983,.386419,-.073086,1.03816,.200651,.412588,-.077887,1.037724,.200343,.439836,-.081391,1.037182,.199618,.467538,-.085121,1.036602,.198839,.495286,-.088718,1.035893,.197895,.523231,-.092514,1.035121,.196887,.55173,-.095238,1.034127,.19539,.580302,-.097949,1.033131,.193668,.608559,-.100418,1.031962,.191773,.637224,-.102129,1.030838,.189319,.665597,-.103578,1.029511,.186529,.693535,-.104652,1.028263,.183303,.721325,-.104766,1.026611,.179497,.748384,-.104717,1.025128,.175283,.775058,-.103846,1.023385,.170493,.801387,-.102728,1.022236,.165187,.826412,-.100679,1.019908,.159362,.851314,-.098451,1.018839,.153059,.8751,-.095363,1.017306,.146284,.89828,-.092008,1.016151,.138975,.92045,-.088095,1.01488,.131361,.941727,-.08369,1.013556,.123417,.962308,-.079077,1.012998,.115201,.981364,-.073894,1.011841,.106711,.999798,-.068435,1.011021,.098063,1.016983,-.06283,1.010194,.089183,1.033039,-.056914,1.009292,.08019,1.047994,-.050721,1.008474,.07101,1.06158,-.044454,1.007386,.061867,1.074023,-.038145,1.006135,.052711,1.08547,-.031679,1.00489,.043595,1.095673,-.025157,1.003627,.034506,1.105,-.018702,1.002331,.025468,1.113795,-.012458,1.001278,.016834,1.122012,-.006169,1.000548,.008265,1.129683,78e-6,.999988,-72e-6,2e-4,-46e-6,1.052496,.228243,504e-6,-115e-6,1.052079,.228243,.002016,-46e-5,1.052079,.228241,.004535,-.001035,1.052091,.228242,.008062,-.00184,1.051962,.228242,.012598,-.002875,1.052087,.228242,.018141,-.00414,1.052088,.228242,.024692,-.005636,1.052096,.228239,.032251,-.007361,1.052029,.228243,.04082,-.009316,1.052038,.228241,.050399,-.011501,1.052042,.228239,.06099,-.013917,1.052046,.228238,.072586,-.016562,1.05199,.228236,.085198,-.019437,1.051946,.228234,.098824,-.022542,1.051879,.228229,.113467,-.025875,1.051841,.228227,.129121,-.02943,1.051724,.228219,.14578,-.03317,1.051672,.228205,.163222,-.036567,1.051556,.228143,.181604,-.040245,1.051382,.228069,.200913,-.044395,1.05123,.22801,.221005,-.049088,1.051062,.227988,.241667,-.054506,1.050881,.228044,.263777,-.059437,1.050643,.227986,.286841,-.06359,1.050312,.227755,.310879,-.068224,1.050009,.227525,.33565,-.072986,1.049597,.227253,.360869,-.077435,1.049121,.226845,.386609,-.082385,1.048587,.226466,.412742,-.08757,1.047987,.226059,.439789,-.091929,1.047308,.225331,.467558,-.096038,1.046423,.224409,.495406,-.099938,1.045481,.223288,.523417,-.10405,1.044512,.222066,.551755,-.107503,1.043408,.220487,.580468,-.110234,1.042016,.218451,.608904,-.112993,1.040535,.2162,.63723,-.115173,1.038934,.213458,.665566,-.116433,1.036961,.210158,.693413,-.117589,1.03513,.206457,.721025,-.117885,1.03308,.202197,.748054,-.117606,1.030752,.197296,.774631,-.116771,1.028608,.191813,.800677,-.115194,1.02635,.185691,.826062,-.113138,1.024472,.179053,.85059,-.110359,1.022174,.171839,.87455,-.107072,1.020381,.164067,.897567,-.103268,1.018777,.155959,.919609,-.098794,1.016886,.14732,.941177,-.094067,1.01588,.138365,.961752,-.08867,1.014616,.129051,.981518,-.082965,1.013807,.119515,.99988,-.076971,1.012793,.109897,1.01737,-.070518,1.011894,.099872,1.033661,-.06383,1.010943,.089883,1.048672,-.05704,1.009802,.079691,1.062479,-.049917,1.00867,.069458,1.075052,-.042735,1.007429,.059191,1.086371,-.035513,1.005991,.048894,1.096623,-.028359,1.004468,.03877,1.105871,-.021111,1.002927,.028745,1.114481,-.013908,1.001728,.018884,1.12261,-.006843,1.00074,.009264,1.130165,62e-6,.999983,-6e-6,2e-4,-51e-6,1.064931,.25463,504e-6,-128e-6,1.064668,.25463,.002016,-513e-6,1.064794,.25463,.004535,-.001155,1.064851,.25463,.008063,-.002053,1.064966,.25463,.012598,-.003208,1.06484,.25463,.01814,-.004619,1.064602,.254631,.024695,-.006288,1.064965,.254632,.032251,-.008211,1.064795,.25463,.040821,-.010393,1.064802,.254628,.050398,-.01283,1.064758,.254627,.060987,-.015525,1.064731,.254625,.072584,-.018474,1.064615,.254621,.085199,-.021682,1.064672,.254619,.098826,-.025144,1.06463,.254613,.113465,-.02886,1.064515,.254606,.129119,-.032823,1.064416,.254598,.145767,-.036969,1.064347,.254579,.16319,-.040754,1.064132,.254506,.181622,-.044989,1.063951,.254437,.200981,-.049642,1.063745,.25437,.221145,-.054776,1.063547,.254324,.241896,-.060538,1.063289,.254346,.263684,-.066113,1.063013,.254296,.286796,-.070925,1.062625,.254059,.310867,-.076187,1.062216,.253817,.335644,-.081406,1.061703,.253481,.360917,-.086336,1.061066,.253005,.386786,-.09179,1.060454,.252558,.412921,-.09723,1.059568,.252008,.439722,-.102574,1.058706,.251323,.467559,-.106972,1.057682,.250239,.495605,-.111329,1.056612,.248944,.523589,-.115561,1.055101,.247471,.551787,-.119732,1.053745,.245777,.580426,-.122711,1.051829,.243448,.608778,-.125436,1.049642,.240769,.637069,-.127993,1.047749,.237739,.665251,-.129448,1.045244,.233928,.692977,-.130408,1.042279,.22964,.720346,-.130931,1.039693,.224829,.747365,-.130392,1.036675,.219144,.773734,-.12954,1.033719,.212965,.799578,-.127689,1.030774,.206047,.825002,-.125456,1.028551,.198576,.849564,-.122291,1.0258,.190471,.873412,-.11872,1.023657,.181739,.896628,-.114323,1.021381,.172586,.918952,-.109587,1.019674,.162914,.940602,-.104093,1.018126,.153039,.960917,-.098187,1.016339,.142774,.980911,-.091963,1.01544,.132316,.999686,-.085159,1.014377,.121453,1.017538,-.078139,1.013498,.110527,1.033918,-.070797,1.012332,.099437,1.04939,-.063129,1.011368,.088157,1.063402,-.055354,1.010111,.076951,1.076096,-.047522,1.008774,.065616,1.087562,-.039447,1.007202,.05431,1.097591,-.031359,1.005346,.042948,1.106782,-.023393,1.00371,.031799,1.115234,-.015461,1.002116,.020943,1.123166,-.007589,1.000858,.010288,1.130796,104e-6,1.000032,-24e-6,2e-4,-56e-6,1.07878,.281356,504e-6,-142e-6,1.079271,.281355,.002015,-567e-6,1.078635,.281355,.004535,-.001276,1.079164,.281356,.008064,-.002269,1.0793,.281355,.012598,-.003544,1.079149,.281355,.018143,-.005104,1.079329,.281355,.024691,-.006947,1.079073,.281353,.032254,-.009074,1.079253,.281354,.040822,-.011484,1.079176,.281353,.050399,-.014177,1.079057,.281349,.060987,-.017153,1.079007,.281347,.072586,-.020412,1.078998,.281343,.085203,-.023956,1.078962,.281336,.098823,-.027778,1.078839,.281332,.113464,-.031882,1.078783,.281325,.129114,-.036255,1.078633,.281315,.145748,-.04079,1.078545,.281287,.163179,-.045024,1.078311,.281208,.181649,-.049791,1.078135,.281137,.201042,-.054953,1.077845,.281063,.221267,-.060551,1.077576,.281006,.242114,-.066663,1.077257,.280978,.263568,-.072771,1.076897,.280925,.286744,-.078349,1.076405,.280689,.31084,-.084201,1.075898,.280418,.335612,-.089846,1.075287,.28002,.360975,-.095394,1.074482,.279513,.386932,-.10129,1.073617,.278961,.413171,-.107042,1.072719,.278283,.439886,-.113083,1.071698,.277547,.467535,-.11801,1.070213,.276311,.495701,-.122793,1.068857,.274867,.523772,-.127278,1.067037,.273153,.551849,-.131671,1.064923,.271176,.580338,-.135293,1.062749,.268626,.608771,-.138065,1.059944,.265569,.636756,-.140565,1.056851,.262054,.664574,-.142434,1.053461,.257807,.692151,-.143237,1.04991,.25293,.719376,-.143717,1.046426,.247414,.745852,-.143117,1.042377,.241001,.7723,-.141975,1.038789,.233797,.79805,-.140114,1.03529,.226218,.82337,-.137379,1.032374,.217785,.847735,-.134119,1.028853,.208748,.871897,-.129985,1.026395,.198877,.89495,-.125324,1.023787,.188803,.917909,-.120007,1.022073,.178493,.939567,-.114099,1.020098,.167466,.960534,-.107748,1.018851,.156223,.980423,-.100748,1.017362,.144716,.999334,-.093494,1.015961,.133028,1.017561,-.085728,1.015059,.120953,1.034225,-.077627,1.013888,.108943,1.049937,-.069375,1.012898,.096678,1.064265,-.060807,1.011635,.08435,1.077188,-.052052,1.010095,.071964,1.088637,-.043304,1.008399,.059531,1.098766,-.034458,1.006397,.047134,1.107697,-.025637,1.004354,.034887,1.116055,-.016932,1.002611,.022948,1.123819,-.008437,1.001023,.011386,1.131333,87e-6,.999952,-97e-6,2e-4,-62e-6,1.095622,.308458,504e-6,-155e-6,1.094863,.308458,.002016,-622e-6,1.095169,.308458,.004535,-.001399,1.095156,.308458,.008063,-.002487,1.095413,.308455,.012598,-.003886,1.095147,.308458,.018141,-.005596,1.09515,.308457,.024692,-.007616,1.09514,.308457,.032252,-.009947,1.095098,.308456,.040822,-.012589,1.095096,.308453,.050399,-.015541,1.09507,.308451,.060985,-.018803,1.094922,.308448,.072583,-.022375,1.094902,.308444,.085197,-.026258,1.094882,.308438,.098822,-.030448,1.094775,.308429,.11346,-.034944,1.094641,.308419,.129112,-.039731,1.09453,.308403,.145711,-.04461,1.094332,.308365,.163178,-.049362,1.094149,.308285,.181679,-.054666,1.093876,.30821,.201109,-.060336,1.093603,.308132,.221388,-.066414,1.09325,.308047,.242315,-.072881,1.092835,.307985,.263651,-.079453,1.092391,.307902,.28672,-.085882,1.091866,.307688,.310817,-.092274,1.091225,.307379,.335562,-.098306,1.090346,.306906,.361043,-.104572,1.089423,.306374,.387051,-.110843,1.088437,.30571,.413405,-.117062,1.087228,.304906,.440122,-.123501,1.085879,.304017,.467522,-.129245,1.084197,.302783,.495721,-.134285,1.082284,.301104,.523925,-.139143,1.080109,.299142,.551814,-.143638,1.077043,.296825,.579878,-.147774,1.074071,.294071,.608316,-.150724,1.070621,.290519,.636059,-.153168,1.06639,.286424,.663481,-.155139,1.062069,.281559,.690753,-.155944,1.057211,.276024,.717767,-.156176,1.052682,.269622,.743937,-.155783,1.047747,.262532,.770214,-.154245,1.04351,.254609,.795542,-.152192,1.039121,.246007,.821099,-.149256,1.035962,.236663,.845452,-.145605,1.03232,.226751,.86978,-.141186,1.02939,.216165,.893141,-.136137,1.026485,.204937,.916034,-.130332,1.024389,.193624,.938089,-.12404,1.02227,.181756,.959488,-.117011,1.020457,.169339,.979594,-.109617,1.018871,.156875,.998912,-.101562,1.017533,.144288,1.0171,-.093164,1.016445,.13137,1.034413,-.084488,1.015453,.118322,1.050347,-.075377,1.014259,.104963,1.064958,-.066108,1.013057,.091722,1.078045,-.056702,1.011491,.078231,1.089749,-.047106,1.009662,.064797,1.099831,-.037467,1.007417,.051315,1.108789,-.02799,1.005144,.038064,1.116865,-.018464,1.002925,.025008,1.124609,-.009068,1.001221,.01225,1.13204,93e-6,.999984,-71e-6,2e-4,-67e-6,1.112554,.335981,504e-6,-169e-6,1.11266,.335981,.002016,-677e-6,1.112827,.335981,.004533,-.001523,1.112147,.335982,.008063,-.002709,1.112882,.335979,.012598,-.004233,1.112891,.33598,.018141,-.006095,1.112882,.33598,.024693,-.008296,1.112877,.335978,.032252,-.010834,1.11286,.335976,.040824,-.013713,1.112965,.335974,.050398,-.016927,1.112753,.335971,.060991,-.020482,1.112826,.33597,.072587,-.024371,1.112676,.335962,.085199,-.028597,1.112593,.335955,.098822,-.033159,1.112453,.335943,.113461,-.038052,1.112329,.33593,.129108,-.043255,1.112144,.33591,.145665,-.048412,1.111905,.335857,.163185,-.053786,1.111668,.335781,.18171,-.059608,1.111345,.335696,.201166,-.065794,1.110979,.335606,.221489,-.072361,1.110553,.335505,.242471,-.079184,1.110112,.335396,.2639,-.086213,1.109584,.335271,.286688,-.093491,1.108927,.335089,.310773,-.100406,1.108091,.334737,.335573,-.106987,1.107169,.334208,.361117,-.113844,1.106097,.3336,.387175,-.120463,1.104826,.332828,.413665,-.127245,1.103415,.331929,.440386,-.133927,1.101632,.330851,.467527,-.140496,1.099563,.329538,.49563,-.145874,1.096956,.327618,.523864,-.150997,1.094201,.32539,.551705,-.155713,1.090342,.322688,.579383,-.159993,1.08601,.319483,.607301,-.163238,1.081226,.315522,.634873,-.165667,1.076065,.31084,.662028,-.167606,1.070466,.305377,.688755,-.168626,1.064601,.299056,.715612,-.168578,1.059269,.291963,.741604,-.167961,1.053648,.284018,.767757,-.166439,1.048928,.275474,.793264,-.164023,1.044343,.266056,.818165,-.160965,1.039909,.25575,.843255,-.156896,1.03618,.244843,.867249,-.152262,1.032303,.233464,.890994,-.146655,1.029365,.221128,.913829,-.140574,1.026607,.208554,.936508,-.13364,1.024512,.195772,.95772,-.12622,1.022421,.18242,.97894,-.118164,1.021293,.168852,.998285,-.109558,1.019444,.155261,1.016764,-.100562,1.017825,.141395,1.034387,-.091064,1.016996,.127311,1.050916,-.081468,1.015945,.113089,1.065652,-.071463,1.014547,.098879,1.079155,-.06124,1.013066,.084468,1.090822,-.05098,1.010788,.06994,1.1011,-.040549,1.008563,.055475,1.109824,-.030101,1.00595,.041033,1.117828,-.019884,1.003453,.027022,1.125443,-.0099,1.001484,.013306,1.132869,94e-6,1.000004,-46e-6,2e-4,-73e-6,1.132849,.36397,504e-6,-183e-6,1.132155,.363969,.002016,-734e-6,1.132516,.363969,.004535,-.001651,1.132256,.363969,.008062,-.002934,1.132318,.363966,.012597,-.004585,1.132386,.363968,.018141,-.006602,1.132457,.363967,.024693,-.008987,1.132511,.363967,.032252,-.011737,1.132488,.363965,.040819,-.014853,1.132241,.363959,.050398,-.018336,1.132372,.363958,.060988,-.022185,1.132373,.363954,.072582,-.026396,1.132137,.363943,.085195,-.030973,1.132071,.363935,.098822,-.035913,1.131978,.363922,.113461,-.041209,1.131801,.363905,.129116,-.046833,1.131535,.363867,.14564,-.052346,1.13129,.363814,.163199,-.058275,1.131046,.363734,.181742,-.064623,1.130671,.363642,.201227,-.071336,1.130224,.363539,.221587,-.078396,1.129758,.363419,.242625,-.085545,1.129213,.363256,.264183,-.09311,1.128549,.363097,.286668,-.101206,1.127767,.362939,.310745,-.108586,1.126796,.362516,.335602,-.115827,1.125686,.361953,.361202,-.123212,1.124451,.361275,.387298,-.130294,1.122861,.360376,.413918,-.137553,1.121154,.359362,.44068,-.144577,1.118825,.358069,.467667,-.151558,1.116002,.356581,.495449,-.157621,1.112778,.354531,.523514,-.162844,1.108842,.351915,.55125,-.167744,1.104075,.348797,.578629,-.172132,1.098733,.345222,.605757,-.175733,1.092224,.340665,.633392,-.178109,1.086201,.335286,.660783,-.180009,1.08011,.329286,.687219,-.181105,1.073419,.322319,.713873,-.181046,1.06741,.314616,.740094,-.180219,1.061414,.306014,.765233,-.178559,1.055287,.296704,.790885,-.175806,1.049727,.286394,.815464,-.172354,1.044519,.275189,.840259,-.168048,1.040375,.263441,.864285,-.162904,1.03601,.250918,.888806,-.157194,1.033525,.237611,.911682,-.150486,1.02949,.223809,.934481,-.143212,1.026778,.209705,.956337,-.135233,1.024632,.195281,.97738,-.12665,1.022737,.180878,.997427,-.117552,1.02111,.166112,1.016666,-.107814,1.019869,.151231,1.034337,-.097814,1.018543,.136375,1.051082,-.08733,1.017476,.121187,1.066326,-.076614,1.016083,.106043,1.079897,-.065793,1.014227,.090566,1.092136,-.054654,1.012334,.074988,1.102315,-.043516,1.009627,.059577,1.111105,-.032509,1.006808,.044202,1.118861,-.021381,1.003917,.028995,1.126363,-.010489,1.00167,.014269,1.133598,83e-6,.999989,-35e-6,2e-4,-79e-6,1.155026,.39247,504e-6,-198e-6,1.154184,.392469,.002016,-791e-6,1.15399,.392469,.004535,-.00178,1.154045,.392469,.008063,-.003164,1.154007,.392466,.012598,-.004944,1.154022,.392469,.018141,-.007119,1.154015,.392468,.024692,-.00969,1.154017,.392466,.032254,-.012656,1.154069,.392465,.040826,-.016018,1.15398,.392459,.050399,-.019771,1.153911,.392456,.060987,-.023919,1.15386,.392447,.072588,-.028461,1.153777,.392442,.085197,-.033393,1.153582,.392428,.098822,-.038716,1.153434,.392412,.113462,-.044422,1.153271,.39239,.129101,-.050455,1.153019,.392359,.145642,-.056392,1.152721,.392283,.163223,-.062859,1.152404,.392201,.181779,-.069721,1.151941,.392099,.201289,-.076968,1.151422,.391978,.221678,-.084518,1.150861,.391833,.242752,-.092017,1.150156,.391618,.264474,-.100184,1.149402,.391421,.286768,-.108921,1.148545,.391249,.310719,-.116815,1.147388,.390773,.335638,-.124785,1.146042,.390168,.36124,-.13263,1.144529,.389394,.387443,-.140298,1.142602,.388391,.414067,-.147913,1.140361,.387199,.440904,-.155362,1.137612,.385742,.467771,-.162574,1.133659,.383926,.494907,-.169312,1.129246,.381715,.522801,-.174778,1.124228,.378678,.550751,-.179824,1.118697,.375158,.578018,-.184284,1.112019,.370851,.605291,-.188215,1.105151,.365928,.632269,-.19076,1.097677,.360114,.659432,-.192457,1.090816,.353498,.685839,-.193458,1.083286,.346094,.711876,-.193502,1.076245,.337754,.738184,-.192371,1.069684,.328412,.763723,-.190531,1.063249,.318164,.789192,-.187726,1.057265,.3069,.813744,-.183783,1.051177,.295021,.838408,-.179328,1.045902,.282144,.862116,-.173573,1.040853,.268438,.885636,-.16735,1.036515,.254108,.909342,-.160229,1.033269,.239082,.931962,-.152529,1.029627,.224024,.954671,-.14408,1.027507,.208393,.975707,-.135023,1.024657,.19263,.996644,-.125258,1.022998,.176741,1.015817,-.115089,1.021234,.160926,1.034301,-.104317,1.020025,.145042,1.051131,-.093218,1.018739,.129052,1.066836,-.081828,1.017419,.112905,1.081027,-.070132,1.015714,.096578,1.093225,-.058382,1.013465,.080077,1.103691,-.046527,1.010853,.06358,1.112431,-.034624,1.007702,.047118,1.120035,-.022913,1.004551,.031018,1.127336,-.011284,1.001924,.015283,1.13451,17e-5,.999937,-58e-6,2e-4,-84e-6,1.177044,.421534,504e-6,-212e-6,1.177312,.421533,.002016,-85e-5,1.17773,.421533,.004535,-.001912,1.177722,.421533,.008063,-.003399,1.177844,.421529,.012598,-.00531,1.177768,.421533,.018141,-.007646,1.17773,.421531,.024692,-.010407,1.177663,.42153,.032252,-.013592,1.177681,.421527,.040821,-.017201,1.177562,.421524,.050401,-.021234,1.177445,.421516,.060988,-.025688,1.177461,.421509,.07259,-.030565,1.177364,.421498,.0852,-.03586,1.177205,.421482,.098823,-.041572,1.177011,.421462,.113465,-.047694,1.176794,.421436,.129094,-.054122,1.176504,.421396,.145652,-.06053,1.176203,.421311,.163245,-.067517,1.175805,.421218,.181825,-.074919,1.175271,.421108,.20136,-.0827,1.174717,.420974,.221773,-.090727,1.174021,.420795,.242908,-.098719,1.173173,.420536,.264742,-.107417,1.172285,.420296,.287091,-.116601,1.171326,.420065,.310723,-.125265,1.169907,.419582,.335685,-.133876,1.168352,.418912,.361285,-.14214,1.166322,.418006,.387562,-.150436,1.164136,.416899,.414175,-.158388,1.161162,.415513,.441021,-.166258,1.157608,.413836,.467698,-.17372,1.152519,.411702,.49473,-.180843,1.14702,.409102,.522524,-.186906,1.141256,.405789,.550055,-.192004,1.134114,.401759,.577512,-.196588,1.127086,.397153,.604348,-.20042,1.119029,.391767,.63097,-.20332,1.110308,.385573,.658023,-.204883,1.102643,.378245,.684422,-.205716,1.094573,.370191,.710405,-.205767,1.086405,.361231,.736417,-.204513,1.078712,.351106,.761836,-.202281,1.071619,.340096,.78714,-.199395,1.064873,.328139,.812197,-.195185,1.058313,.315044,.836342,-.190191,1.052085,.300933,.860311,-.184343,1.046705,.286411,.883597,-.177415,1.041072,.270897,.906852,-.170003,1.036797,.254825,.929991,-.161592,1.033264,.238176,.952478,-.152792,1.03025,.221581,.974216,-.143032,1.027331,.204378,.995372,-.132922,1.025135,.18747,1.01533,-.122009,1.02325,.170538,1.03407,-.11074,1.022021,.153777,1.051295,-.099016,1.020271,.136916,1.06746,-.08692,1.018948,.11988,1.082022,-.074729,1.017336,.102565,1.094378,-.062036,1.01482,.084994,1.104998,-.049413,1.011999,.06765,1.113773,-.036812,1.008711,.050148,1.121263,-.024274,1.005141,.032976,1.12842,-.012038,1.002196,.016239,1.135496,106e-6,1.000042,-62e-6,2e-4,-9e-5,1.203048,.451217,504e-6,-227e-6,1.203226,.451215,.002016,-909e-6,1.20345,.451215,.004535,-.002046,1.203569,.451215,.008062,-.003638,1.203609,.451209,.012598,-.005684,1.20358,.451214,.018141,-.008185,1.203515,.451212,.024694,-.011141,1.203618,.451211,.032253,-.014549,1.203609,.451207,.040815,-.018409,1.203302,.451203,.050401,-.022727,1.203454,.451195,.06099,-.027495,1.20348,.451188,.072591,-.032713,1.20322,.451172,.085203,-.038378,1.203058,.451154,.098829,-.044489,1.202838,.45113,.113466,-.051031,1.20253,.451098,.129084,-.057808,1.20227,.451041,.145669,-.064769,1.201904,.450956,.163278,-.072278,1.201411,.450853,.18188,-.080224,1.200825,.450721,.201436,-.088537,1.200164,.450566,.221865,-.097009,1.199335,.450351,.243083,-.105591,1.198383,.450062,.265033,-.114818,1.19738,.449769,.287456,-.124372,1.196137,.449438,.310758,-.133892,1.194554,.448974,.335721,-.143052,1.192649,.448216,.361348,-.151868,1.190233,.447202,.387573,-.160644,1.187211,.445926,.414159,-.169028,1.183452,.444313,.44095,-.177169,1.178562,.442315,.467998,-.18509,1.17354,.43996,.494566,-.192396,1.166344,.436989,.52173,-.198915,1.159283,.433439,.549405,-.20424,1.151503,.428984,.576755,-.208861,1.143004,.423839,.603635,-.212734,1.134099,.418012,.629979,-.215712,1.124555,.411445,.656597,-.217385,1.115293,.403628,.683317,-.218093,1.10646,.394639,.70899,-.217835,1.097389,.385012,.734898,-.216774,1.08894,.373999,.760342,-.21412,1.080385,.362128,.785517,-.210821,1.072959,.349184,.809933,-.206443,1.06545,.33508,.834339,-.200942,1.058701,.320257,.858793,-.194938,1.052711,.304133,.8823,-.187615,1.047044,.287771,.90556,-.179626,1.042083,.270571,.927916,-.170753,1.037077,.252741,.950415,-.16127,1.0332,.234656,.97292,-.151239,1.030418,.216652,.993893,-.140358,1.027479,.198252,1.014204,-.128963,1.024897,.180113,1.033878,-.117128,1.023648,.162282,1.051754,-.104678,1.02223,.144366,1.067924,-.092,1.020453,.126455,1.082643,-.078837,1.018518,.108194,1.095503,-.065669,1.016199,.089966,1.10629,-.052345,1.013113,.07153,1.115219,-.039024,1.009636,.053158,1.122587,-.025789,1.005801,.034959,1.129461,-.012622,1.002442,.017222,1.136468,152e-6,.999964,-65e-6,2e-4,-96e-6,1.231156,.481574,504e-6,-243e-6,1.232187,.481572,.002016,-971e-6,1.231948,.481572,.004535,-.002184,1.231919,.481572,.008061,-.003882,1.231453,.481566,.012597,-.006066,1.2318,.481572,.018142,-.008736,1.231756,.481569,.024693,-.011889,1.232062,.48157,.032254,-.015528,1.231915,.481563,.040822,-.01965,1.231863,.481559,.050402,-.024255,1.231737,.48155,.060992,-.029342,1.231678,.481537,.072592,-.034908,1.231537,.481521,.085207,-.040953,1.231336,.481499,.098834,-.047469,1.231071,.481469,.113474,-.054441,1.230757,.481431,.129077,-.061556,1.230424,.481359,.145691,-.069091,1.230022,.481269,.163321,-.077151,1.229461,.481156,.181936,-.085636,1.228718,.481011,.201516,-.094484,1.228023,.48083,.221963,-.103362,1.227057,.480562,.243264,-.112628,1.225997,.480247,.265291,-.122366,1.224744,.479891,.287824,-.132256,1.223255,.479461,.310927,-.142614,1.221348,.478978,.335749,-.152326,1.218953,.478132,.361361,-.161747,1.215806,.476971,.38748,-.170879,1.211853,.475477,.414231,-.179865,1.207783,.473686,.441065,-.188331,1.202051,.471415,.467923,-.196454,1.195463,.468647,.494526,-.204048,1.187542,.465459,.521318,-.21102,1.179235,.46165,.548654,-.21652,1.17011,.456868,.575778,-.221098,1.160163,.451227,.60261,-.224923,1.149751,.444866,.628891,-.227895,1.139169,.437577,.655635,-.23002,1.129736,.429369,.682115,-.230419,1.119516,.419673,.707514,-.229789,1.108277,.409143,.733169,-.22852,1.099159,.397296,.758342,-.225793,1.089839,.384578,.783477,-.222049,1.081428,.370323,.808497,-.217562,1.073742,.355253,.83279,-.211697,1.06585,.339282,.856677,-.204989,1.058834,.322181,.880662,-.197653,1.053291,.30461,.903474,-.188858,1.046822,.286042,.926313,-.179746,1.041663,.267224,.948458,-.169542,1.036532,.247978,.970873,-.159005,1.033008,.228535,.992958,-.147658,1.029844,.208819,1.013413,-.135771,1.02693,.189486,1.033483,-.123256,1.025545,.170422,1.051872,-.110401,1.023935,.152075,1.068396,-.09686,1.022092,.133169,1.083731,-.083259,1.020221,.114022,1.096849,-.069266,1.017663,.094772,1.107864,-.055203,1.014524,.075432,1.1166,-.041097,1.010514,.05598,1.123871,-.027083,1.006313,.036839,1.130718,-.01351,1.002778,.018156,1.137649,154e-6,1.000033,-28e-6,2e-4,-103e-6,1.264025,.51267,504e-6,-258e-6,1.262437,.512667,.002016,-.001033,1.262691,.512668,.004535,-.002325,1.262834,.512667,.008063,-.004133,1.262783,.512659,.012598,-.006458,1.262803,.512666,.018141,-.009299,1.26272,.512665,.024683,-.012652,1.262061,.512655,.032257,-.016532,1.262858,.512656,.040826,-.020919,1.262709,.512649,.050403,-.02582,1.262685,.512639,.060993,-.031233,1.262544,.512625,.072597,-.037157,1.262435,.512607,.085211,-.043587,1.262209,.512581,.098842,-.05052,1.261907,.512544,.113484,-.057926,1.261575,.5125,.129097,-.06546,1.261293,.51242,.145727,-.073543,1.260736,.512316,.163375,-.082134,1.260117,.51219,.182011,-.091173,1.259299,.512024,.201598,-.10054,1.258381,.51181,.222084,-.109931,1.257293,.511505,.243446,-.119838,1.25605,.511151,.265574,-.13009,1.254607,.510724,.28823,-.140421,1.252808,.510191,.311336,-.151343,1.250489,.509627,.335719,-.161689,1.247279,.508688,.361314,-.171748,1.243467,.507393,.387541,-.181399,1.239145,.505758,.414204,-.190768,1.23376,.503676,.441092,-.199659,1.227433,.501129,.467789,-.207934,1.219247,.498078,.494454,-.215747,1.210441,.49463,.52095,-.222869,1.200559,.490467,.547802,-.228881,1.189872,.485444,.575563,-.23376,1.180081,.479268,.602426,-.237566,1.168544,.472272,.628772,-.240447,1.156546,.46439,.654963,-.242427,1.145123,.455345,.681384,-.24298,1.134322,.444885,.707173,-.24215,1.122665,.433338,.732477,-.240435,1.111733,.420647,.757567,-.237806,1.101271,.406799,.782341,-.233503,1.091341,.391761,.80669,-.228346,1.082042,.375576,.830804,-.222386,1.073504,.358545,.85494,-.215141,1.06588,.340431,.878709,-.207207,1.05885,.32169,.901928,-.198273,1.052588,.30193,.924845,-.188476,1.046521,.281513,.946932,-.177996,1.040966,.261234,.969256,-.166644,1.03667,.240356,.991323,-.154968,1.032694,.219748,1.013013,-.142425,1.030061,.199103,1.032845,-.129456,1.027254,.178936,1.051887,-.115763,1.025497,.159243,1.069179,-.101851,1.023807,.13956,1.084499,-.087357,1.021441,.119607,1.097921,-.072796,1.01878,.099501,1.109281,-.058037,1.015566,.079211,1.118194,-.043226,1.011494,.058873,1.125351,-.028633,1.007089,.038736,1.132002,-.013996,1.003014,.019063,1.138951,132e-6,1.000036,-7e-6,2e-4,-109e-6,1.296791,.544571,504e-6,-274e-6,1.296055,.544568,.002016,-.001098,1.297239,.544568,.004535,-.00247,1.2966,.544568,.008062,-.00439,1.296368,.544559,.012597,-.00686,1.296454,.544566,.018141,-.009878,1.296522,.544565,.024693,-.013444,1.296536,.54456,.032256,-.017559,1.296638,.544557,.040824,-.022218,1.296491,.544547,.050408,-.027426,1.296552,.544532,.060997,-.033173,1.296283,.544518,.0726,-.039463,1.296113,.544496,.08522,-.046292,1.295894,.544466,.098851,-.053648,1.295545,.544422,.113496,-.061487,1.295201,.544371,.129112,-.069467,1.294754,.544273,.145765,-.078092,1.294209,.54416,.163431,-.087231,1.293534,.544017,.182088,-.096837,1.29258,.543828,.201698,-.106713,1.291586,.543585,.222231,-.116699,1.290325,.543238,.243653,-.127208,1.288888,.542836,.265855,-.137949,1.287131,.542329,.288623,-.148847,1.284936,.5417,.31183,-.160204,1.282109,.540997,.335728,-.171324,1.278036,.540045,.361403,-.181915,1.273912,.538603,.387647,-.192124,1.268881,.536741,.414217,-.201807,1.262363,.534432,.44109,-.211093,1.254755,.531623,.467823,-.219678,1.245456,.528314,.494361,-.227581,1.234953,.524391,.521264,-.235087,1.224839,.519902,.547881,-.241508,1.213175,.514574,.574965,-.246315,1.200505,.507837,.601847,-.250061,1.187901,.500286,.628207,-.252822,1.174601,.491502,.654445,-.254691,1.161944,.481726,.680175,-.255318,1.149305,.470727,.706168,-.254257,1.136708,.458045,.731458,-.2521,1.124047,.444438,.756378,-.249115,1.112942,.429611,.781311,-.244899,1.1018,.413501,.805755,-.239225,1.091662,.395889,.829867,-.23283,1.082291,.37786,.853067,-.225193,1.07282,.358704,.877084,-.216648,1.065415,.338413,.900123,-.20739,1.058403,.317596,.92337,-.197095,1.051412,.296301,.946021,-.186084,1.045877,.274498,.967669,-.174262,1.040316,.252565,.989761,-.161814,1.035489,.230312,1.012163,-.149076,1.03254,.208746,1.032547,-.135299,1.029598,.18718,1.052032,-.121277,1.027355,.166482,1.069907,-.106582,1.025622,.145939,1.085563,-.091589,1.023244,.125362,1.099447,-.076263,1.020661,.104087,1.110848,-.060825,1.017035,.083036,1.119923,-.045319,1.012675,.061719,1.126805,-.029852,1.007668,.040583,1.133282,-.014846,1.003335,.019969,1.140128,149e-6,1.000024,-37e-6,2e-4,-116e-6,1.334863,.57735,504e-6,-291e-6,1.33335,.577348,.002015,-.001164,1.332853,.577347,.004535,-.002618,1.333295,.577347,.008062,-.004655,1.333189,.577336,.012598,-.007273,1.333309,.577345,.018141,-.010472,1.333274,.577342,.024694,-.014253,1.333231,.577339,.032254,-.018614,1.333265,.577332,.040827,-.023556,1.333261,.577321,.0504,-.029069,1.332893,.577309,.061,-.035166,1.332998,.577288,.072608,-.041833,1.332901,.577263,.085227,-.049067,1.332603,.577226,.098864,-.05686,1.332264,.577177,.113507,-.065114,1.331825,.577109,.129146,-.07361,1.331311,.577005,.145808,-.082766,1.330639,.576872,.163494,-.092458,1.329878,.576709,.182176,-.102639,1.328889,.576501,.201804,-.112983,1.32771,.576207,.222394,-.12365,1.326256,.575823,.243881,-.13478,1.324593,.575363,.266122,-.145931,1.322426,.574751,.289043,-.1575,1.319837,.574033,.31233,-.169208,1.316301,.573181,.33612,-.181125,1.312251,.572188,.361506,-.192232,1.307003,.570631,.387757,-.202981,1.301068,.568558,.414365,-.21316,1.293695,.566027,.440986,-.222617,1.283958,.562942,.467943,-.231583,1.274057,.559219,.494821,-.239881,1.262864,.554913,.521486,-.247336,1.250633,.549953,.547884,-.253921,1.237448,.544251,.574582,-.259099,1.223164,.53712,.601342,-.262695,1.208784,.52865,.627861,-.265337,1.194424,.518978,.653745,-.266872,1.179361,.508525,.679348,-.267403,1.16501,.496705,.705068,-.266429,1.151693,.482926,.730312,-.263829,1.137584,.468519,.755576,-.260491,1.125328,.452213,.780371,-.256166,1.113759,.435127,.804632,-.250079,1.101656,.416833,.828983,-.243181,1.091235,.397009,.852585,-.235383,1.081475,.376647,.875237,-.226031,1.071806,.355506,.899152,-.216343,1.064453,.333133,.922121,-.205772,1.057161,.311073,.944523,-.19398,1.050447,.287781,.967313,-.18192,1.044531,.26435,.989042,-.168822,1.039312,.241128,1.010881,-.15535,1.035298,.218138,1.032368,-.141231,1.032073,.195579,1.052254,-.126521,1.029395,.173399,1.070207,-.111243,1.026938,.151866,1.086528,-.095617,1.024957,.130711,1.10067,-.079687,1.021924,.108865,1.112461,-.063593,1.018281,.08676,1.121588,-.047313,1.013747,.064575,1.128522,-.031385,1.008433,.042499,1.134759,-.015356,1.003569,.02084,1.141448,114e-6,.999978,-56e-6,2e-4,-122e-6,1.372763,.611086,503e-6,-308e-6,1.371456,.611084,.002016,-.001232,1.37344,.611084,.004535,-.002771,1.373387,.611083,.008061,-.004926,1.372916,.611083,.012601,-.0077,1.373956,.611084,.018142,-.011084,1.373419,.611078,.024695,-.015087,1.373492,.611074,.032255,-.019701,1.37336,.611066,.040827,-.02493,1.373327,.611055,.050408,-.030769,1.373222,.611037,.061004,-.037217,1.373079,.611014,.072613,-.04427,1.372895,.610982,.085238,-.051923,1.372624,.610941,.098878,-.060161,1.372252,.610883,.113522,-.068785,1.371785,.610798,.129176,-.077863,1.371103,.610683,.145876,-.087593,1.370541,.610537,.16357,-.097847,1.369496,.610349,.182283,-.108592,1.368477,.610109,.20193,-.11942,1.36698,.609763,.22257,-.130789,1.365375,.609343,.244123,-.142514,1.363456,.608815,.266437,-.154232,1.360916,.608114,.289467,-.16637,1.357909,.607291,.312861,-.178505,1.353588,.606272,.336736,-.19098,1.349211,.605153,.36174,-.202859,1.343319,.603548,.387878,-.213997,1.335908,.601268,.414357,-.224584,1.326676,.598499,.441442,-.234664,1.317331,.595066,.468409,-.243875,1.305818,.590996,.494999,-.252121,1.291863,.586293,.52173,-.259714,1.278212,.58084,.547894,-.266242,1.262656,.574494,.573865,-.271578,1.246364,.567007,.601124,-.275503,1.231274,.557771,.627606,-.277954,1.215252,.547255,.654004,-.279404,1.199977,.535766,.679554,-.279632,1.183995,.522792,.70428,-.278457,1.167428,.508488,.72983,-.275706,1.15276,.492425,.754376,-.27164,1.137942,.475285,.779209,-.266911,1.125222,.456679,.803562,-.260838,1.112179,.437267,.827985,-.253353,1.101439,.416227,.851737,-.245027,1.08989,.394728,.87485,-.235719,1.080018,.372244,.89768,-.225051,1.070807,.348846,.921351,-.214051,1.06318,.324961,.943818,-.202039,1.056148,.300836,.966368,-.189134,1.049277,.276333,.987426,-.175613,1.042176,.251862,1.010162,-.161473,1.038567,.227217,1.031224,-.146866,1.034102,.203582,1.052317,-.131644,1.0316,.180629,1.070879,-.115909,1.028913,.158165,1.087407,-.099638,1.026193,.135905,1.102159,-.083091,1.023567,.113394,1.114006,-.066178,1.019567,.090325,1.123374,-.04943,1.014856,.067302,1.13031,-.032557,1.009141,.044264,1.136334,-.016157,1.003984,.021807,1.142961,172e-6,.999951,-77e-6,2e-4,-129e-6,1.416584,.645866,504e-6,-326e-6,1.417762,.645865,.002016,-.001302,1.417825,.645866,.004535,-.002929,1.417142,.645865,.008062,-.005207,1.416968,.645864,.012598,-.008136,1.417109,.645862,.018141,-.011715,1.417001,.645859,.02469,-.015941,1.416878,.645853,.032257,-.020823,1.417134,.645843,.040827,-.026347,1.416983,.645829,.050411,-.032518,1.416949,.645808,.061007,-.03933,1.416694,.645781,.072621,-.046783,1.416599,.645746,.085249,-.054865,1.416241,.645695,.098897,-.063563,1.415832,.64563,.113546,-.072607,1.415264,.645529,.12922,-.082257,1.414482,.645396,.145888,-.092515,1.413626,.645268,.163659,-.103393,1.41271,.645018,.182385,-.114684,1.411418,.644739,.202078,-.126098,1.409822,.644348,.222772,-.138145,1.407948,.643872,.24437,-.150405,1.405678,.643255,.266787,-.162798,1.402763,.642463,.289844,-.175434,1.398863,.641504,.31354,-.188158,1.394695,.640346,.337489,-.201014,1.389376,.639042,.362008,-.213719,1.382439,.637412,.38799,-.225248,1.373281,.63493,.414728,-.236348,1.363729,.631861,.441635,-.246701,1.352304,.628155,.468588,-.256167,1.339162,.623625,.495337,-.264662,1.323811,.618458,.521886,-.272207,1.30763,.612373,.548355,-.27889,1.291265,.605263,.574535,-.284442,1.273752,.597048,.60087,-.288389,1.256171,.587401,.627715,-.290816,1.238447,.576001,.65383,-.291886,1.221036,.563198,.679175,-.291629,1.202283,.549249,.704539,-.290489,1.185866,.533881,.729126,-.287529,1.168822,.516966,.754297,-.283184,1.152934,.498501,.778678,-.277732,1.137821,.478728,.802473,-.271203,1.123387,.457814,.826596,-.263494,1.110573,.435865,.850835,-.254572,1.099099,.412597,.874203,-.244815,1.088403,.388995,.897271,-.233993,1.078085,.364487,.919667,-.221934,1.068543,.339344,.943001,-.209714,1.061081,.31377,.965688,-.196367,1.054023,.287928,.987598,-.182263,1.047247,.262157,1.00928,-.167775,1.041376,.236855,1.031762,-.15253,1.037647,.211847,1.051965,-.136809,1.033396,.187546,1.071699,-.120418,1.031021,.164186,1.088881,-.103618,1.028403,.141184,1.103482,-.086271,1.024987,.117665,1.115646,-.068973,1.020884,.093896,1.125258,-.051285,1.015966,.069978,1.132045,-.033998,1.00999,.046126,1.138004,-.016696,1.00427,.022635,1.144463,89e-6,.999987,-16e-6,2e-4,-136e-6,1.463614,.681786,504e-6,-344e-6,1.465345,.681785,.002015,-.001374,1.464172,.681783,.004535,-.003092,1.464846,.681784,.008062,-.005496,1.464783,.681784,.012598,-.008588,1.464883,.681781,.018141,-.012366,1.46474,.681777,.024692,-.016829,1.464665,.68177,.032258,-.02198,1.46472,.68176,.040829,-.027811,1.464625,.681742,.050415,-.034324,1.464571,.68172,.061013,-.041513,1.464346,.681688,.072628,-.049375,1.464131,.681644,.085264,-.057903,1.463847,.681588,.098918,-.067067,1.463369,.681509,.113568,-.07657,1.462549,.681389,.129265,-.086782,1.461703,.681239,.145997,-.097637,1.46084,.681047,.163751,-.109101,1.459737,.680806,.182505,-.120922,1.458231,.68048,.202241,-.133007,1.456393,.680042,.222987,-.145693,1.454258,.679503,.244638,-.158488,1.451543,.678792,.267132,-.171585,1.448115,.677907,.290365,-.184746,1.443992,.676796,.314178,-.198101,1.439271,.675498,.338289,-.21137,1.43283,.673922,.362543,-.224489,1.424163,.672151,.38847,-.236914,1.41516,.669601,.415105,-.248342,1.403811,.666255,.441925,-.258957,1.390149,.662166,.468668,-.268556,1.374104,.657229,.49572,-.277359,1.358102,.651347,.522574,-.285078,1.340754,.644598,.548981,-.291718,1.322033,.63682,.574946,-.297087,1.302148,.627812,.600744,-.301079,1.28213,.617485,.627565,-.303566,1.263339,.605047,.653598,-.30433,1.242712,.591167,.679239,-.30382,1.223212,.576025,.704043,-.302064,1.203763,.559649,.728796,-.299095,1.185434,.541271,.753581,-.294392,1.16763,.5218,.778577,-.288603,1.15193,.500628,.80255,-.281604,1.136072,.478434,.825803,-.273472,1.121673,.455384,.849768,-.264011,1.108491,.430811,.87325,-.253653,1.09655,.405524,.896725,-.242642,1.085905,.380038,.919158,-.230191,1.075091,.353482,.942236,-.217145,1.066848,.326605,.965031,-.203555,1.05931,.299842,.987048,-.188777,1.051749,.272859,1.008718,-.173613,1.044999,.24604,1.031097,-.157972,1.040066,.219826,1.052493,-.141589,1.035951,.194278,1.071773,-.124814,1.03252,.16983,1.089646,-.107321,1.029803,.146135,1.104932,-.089726,1.026612,.122127,1.117687,-.071433,1.022391,.097461,1.127188,-.053395,1.017113,.072556,1.13401,-.035151,1.010934,.047749,1.139746,-.017427,1.004633,.02353,1.146205,151e-6,1.00002,-106e-6,2e-4,-144e-6,1.517643,.718949,504e-6,-362e-6,1.516387,.718947,.002016,-.001449,1.516742,.718946,.004536,-.003261,1.517196,.718946,.008063,-.005796,1.516806,.718945,.012598,-.009057,1.516986,.718943,.01814,-.013039,1.516603,.718937,.024694,-.017747,1.516739,.718929,.03226,-.023178,1.516994,.718917,.040831,-.029325,1.516649,.718896,.050419,-.036192,1.516594,.71887,.061019,-.04377,1.516327,.718833,.072638,-.052056,1.516054,.718782,.085274,-.061039,1.515628,.718714,.098938,-.070676,1.515199,.718623,.113607,-.080679,1.514222,.718483,.129329,-.091485,1.513354,.718316,.146077,-.102931,1.512301,.718096,.163856,-.114986,1.510977,.717818,.18264,-.127305,1.509225,.717432,.202432,-.140147,1.507152,.716939,.223229,-.153468,1.50478,.716331,.244943,-.166875,1.501612,.715527,.267559,-.180658,1.497898,.714523,.290926,-.194405,1.493208,.713266,.314863,-.208302,1.487388,.711758,.339053,-.22202,1.479677,.709982,.363627,-.235683,1.47095,.707958,.388887,-.248723,1.459907,.705346,.415474,-.260563,1.446579,.701644,.442065,-.271352,1.429962,.697134,.469418,-.281541,1.414343,.691665,.496419,-.290429,1.395681,.685227,.523071,-.298032,1.375347,.677815,.549641,-.304679,1.354816,.669063,.575489,-.309902,1.332505,.659071,.601108,-.313771,1.309752,.647799,.627199,-.316225,1.288381,.634856,.653243,-.316679,1.265785,.619627,.67896,-.315816,1.244333,.603244,.704055,-.313776,1.223315,.585191,.728713,-.310417,1.203142,.565969,.753301,-.305786,1.184323,.545347,.77789,-.299262,1.16607,.522753,.802354,-.29183,1.149599,.499017,.826005,-.283281,1.133655,.474335,.84892,-.273512,1.118132,.449019,.872765,-.262525,1.105606,.422329,.89595,-.250769,1.093539,.395057,.918816,-.238257,1.082388,.367709,.941089,-.224381,1.072484,.33935,.964514,-.210289,1.064054,.311239,.987128,-.195488,1.056645,.283272,1.009064,-.179491,1.049549,.255163,1.030163,-.163172,1.042741,.227757,1.052502,-.146457,1.03827,.20097,1.072971,-.129054,1.035014,.175767,1.091223,-.111285,1.032231,.151118,1.106518,-.092617,1.028211,.126196,1.119235,-.074168,1.023686,.100828,1.129311,-.055212,1.018311,.07524,1.135983,-.036571,1.011485,.049558,1.141648,-.017954,1.004952,.024273,1.147938,125e-6,1.000009,-48e-6,199e-6,-151e-6,1.566887,.757466,504e-6,-382e-6,1.574111,.757466,.002016,-.001527,1.573735,.757466,.004535,-.003435,1.573737,.757466,.008062,-.006107,1.573782,.757464,.012599,-.009542,1.573796,.75746,.018142,-.013739,1.57371,.757455,.024694,-.018697,1.573562,.757446,.032259,-.024418,1.573667,.757429,.040834,-.030895,1.573555,.757407,.050422,-.038127,1.573383,.757376,.061025,-.046108,1.573086,.757332,.07265,-.054835,1.572833,.757274,.085296,-.064294,1.572395,.757195,.098962,-.074376,1.571729,.757087,.113649,-.084955,1.570571,.756925,.129389,-.096334,1.569582,.756729,.146167,-.108406,1.568444,.756481,.163973,-.121056,1.566905,.756158,.182798,-.13397,1.564939,.755715,.20265,-.147522,1.562666,.755167,.223502,-.161466,1.559877,.754465,.245269,-.175539,1.556008,.753552,.26801,-.189957,1.552013,.75242,.291474,-.204361,1.546509,.751008,.315527,-.218714,1.539575,.749266,.339954,-.233029,1.530968,.747232,.364649,-.247149,1.520994,.744906,.38952,-.260672,1.507748,.742123,.415717,-.272873,1.491777,.738187,.442862,-.284317,1.475658,.733189,.469939,-.294552,1.456572,.727165,.496916,-.303517,1.435237,.720043,.52348,-.311061,1.412192,.71164,.550092,-.317596,1.389033,.702174,.576384,-.322921,1.365086,.691225,.60228,-.326806,1.341317,.678841,.627676,-.329057,1.316518,.664815,.653458,-.329372,1.291877,.648548,.679227,-.328067,1.268126,.630676,.704476,-.325585,1.244424,.611585,.729232,-.321775,1.22301,.590803,.753405,-.316713,1.201297,.568653,.777274,-.309858,1.181071,.544763,.801882,-.301866,1.162826,.519747,.82603,-.292861,1.145704,.493531,.849359,-.282794,1.129629,.4669,.871837,-.271197,1.114155,.43923,.895896,-.258954,1.102334,.41057,.918951,-.245878,1.090163,.381314,.941148,-.231897,1.078738,.352268,.963464,-.216743,1.068862,.322688,.986628,-.201486,1.061077,.293523,1.009289,-.185521,1.053561,.264125,1.030659,-.168429,1.046627,.235706,1.052382,-.15121,1.040953,.208022,1.073476,-.133289,1.036534,.181245,1.092237,-.114768,1.03358,.155661,1.1082,-.095917,1.029997,.130223,1.121435,-.076492,1.025374,.104098,1.131382,-.057204,1.019485,.077776,1.137994,-.037747,1.012188,.05125,1.143441,-.018673,1.005309,.025245,1.149714,216e-6,1.000004,-12e-5,2e-4,-159e-6,1.633988,.797469,504e-6,-402e-6,1.636076,.797469,.002016,-.001607,1.635679,.797467,.004535,-.003617,1.63604,.797468,.008063,-.00643,1.636159,.797467,.012599,-.010046,1.636128,.797462,.018141,-.014464,1.63573,.797457,.024696,-.019685,1.635836,.797445,.032259,-.025705,1.635719,.797426,.040835,-.032523,1.63561,.797401,.050425,-.040135,1.63546,.797363,.061033,-.048536,1.635182,.797313,.072661,-.057718,1.634817,.797243,.085315,-.067666,1.634314,.79715,.098985,-.078179,1.63335,.797016,.113699,-.089383,1.632253,.796839,.129456,-.101364,1.631025,.796623,.146275,-.114081,1.629867,.796331,.164108,-.127318,1.628043,.795956,.182983,-.140901,1.625813,.795458,.202891,-.155174,1.623149,.794834,.223787,-.169654,1.619686,.794015,.245678,-.18454,1.615694,.793013,.268495,-.199543,1.610812,.791727,.292093,-.214639,1.604629,.790107,.316184,-.229499,1.596061,.788154,.340986,-.244407,1.587195,.785797,.365808,-.258907,1.575031,.783093,.390528,-.272746,1.559448,.77997,.41651,-.285845,1.543294,.775852,.443443,-.297404,1.523476,.770323,.470442,-.307757,1.501515,.763721,.497499,-.316846,1.477841,.755889,.524316,-.324561,1.452427,.746662,.551212,-.33106,1.427421,.736004,.577323,-.335956,1.400369,.72381,.602976,-.339501,1.373093,.710184,.628357,-.341577,1.345853,.695017,.653642,-.342031,1.31904,.677972,.67944,-.340342,1.29249,.658877,.704744,-.337356,1.267182,.638085,.729692,-.333042,1.24328,.615615,.75392,-.327504,1.219751,.592054,.777695,-.320537,1.197796,.566967,.801426,-.31188,1.176872,.540643,.825649,-.302211,1.15816,.512906,.849282,-.291665,1.141257,.484587,.872341,-.28005,1.125469,.455556,.89511,-.266978,1.110222,.425652,.918841,-.253326,1.097419,.395015,.941209,-.238899,1.086101,.364948,.963142,-.223523,1.075023,.334151,.985996,-.207346,1.065628,.303708,1.008718,-.190889,1.057256,.273008,1.030554,-.173517,1.04972,.243221,1.053085,-.155645,1.043837,.214426,1.074267,-.137472,1.039312,.187036,1.093591,-.118385,1.035457,.160512,1.10985,-.098883,1.03163,.134384,1.123516,-.07905,1.026762,.107424,1.133578,-.058977,1.02064,.080317,1.140289,-.039013,1.013096,.052944,1.14561,-.019228,1.005694,.025989,1.151704,105e-6,.999981,-19e-6,2e-4,-168e-6,1.704841,.839096,504e-6,-423e-6,1.704242,.839097,.002016,-.001691,1.703821,.839091,.004534,-.003805,1.703804,.839094,.008063,-.006765,1.704224,.839092,.012598,-.01057,1.704013,.839087,.018142,-.015219,1.703889,.839079,.024697,-.020712,1.704023,.839066,.032261,-.027046,1.703836,.839045,.040837,-.034218,1.703608,.839014,.050429,-.042224,1.703414,.838972,.061041,-.051061,1.703148,.838912,.072676,-.060717,1.702744,.838831,.08534,-.071175,1.702223,.838724,.099023,-.082182,1.700984,.838567,.113759,-.094007,1.699764,.838367,.129546,-.106621,1.698462,.838112,.146382,-.119956,1.696938,.837782,.16426,-.13376,1.694868,.837346,.183188,-.148108,1.692262,.83678,.203158,-.163075,1.689251,.836073,.224147,-.178255,1.685408,.835148,.246147,-.1939,1.680946,.833992,.269072,-.209553,1.675277,.832546,.292718,-.225226,1.667626,.830727,.317159,-.240836,1.658952,.82851,.341979,-.256103,1.647624,.825843,.366844,-.270887,1.633014,.82276,.392043,-.285324,1.617191,.819159,.417356,-.298817,1.597501,.814788,.444093,-.310711,1.575184,.808751,.471379,-.32141,1.55159,.801294,.498267,-.330421,1.524134,.792711,.525401,-.338331,1.496672,.78248,.551846,-.34443,1.467062,.770659,.578009,-.349047,1.436943,.757348,.604054,-.35249,1.407611,.742541,.629387,-.354158,1.377441,.726071,.654435,-.354422,1.347651,.707524,.679845,-.352663,1.318769,.687067,.704892,-.348994,1.2906,.664637,.729763,-.344105,1.263997,.640663,.754345,-.338129,1.239273,.615484,.778629,-.330905,1.215858,.58921,.801939,-.322113,1.192318,.56155,.825723,-.311673,1.17138,.532175,.849387,-.30041,1.152991,.502055,.872792,-.288328,1.136139,.471308,.895083,-.275087,1.119534,.440427,.918335,-.2607,1.105542,.40926,.941577,-.245717,1.09307,.377142,.963992,-.230079,1.081207,.345289,.98651,-.213523,1.071488,.313508,1.008806,-.196157,1.062011,.281962,1.030724,-.178467,1.05324,.251177,1.053782,-.160291,1.047057,.220986,1.075451,-.141308,1.041842,.192256,1.094947,-.121975,1.037704,.165023,1.111783,-.101744,1.0333,.138228,1.125525,-.081476,1.028234,.110679,1.135873,-.06077,1.021695,.082672,1.142478,-.040207,1.013838,.054506,1.147889,-.019908,1.006166,.026938,1.153852,204e-6,.999983,-123e-6,199e-6,-176e-6,1.771601,.882501,504e-6,-445e-6,1.779195,.882504,.002016,-.001779,1.779635,.882498,.004536,-.004003,1.779586,.882499,.008062,-.007115,1.778613,.882496,.012598,-.011116,1.778678,.882492,.018142,-.016005,1.778531,.882481,.024696,-.021782,1.778556,.882466,.032262,-.028444,1.778507,.882442,.040842,-.035987,1.778385,.882408,.050436,-.044404,1.778034,.882364,.061053,-.053695,1.777761,.882287,.072692,-.063842,1.777256,.88219,.085364,-.074821,1.776518,.882067,.099064,-.086368,1.77508,.881884,.113828,-.098805,1.773836,.881657,.129649,-.11209,1.77237,.881361,.146518,-.126067,1.770594,.880982,.16444,-.140493,1.768089,.880484,.183437,-.155646,1.765301,.879843,.203468,-.171266,1.761698,.879035,.224562,-.187231,1.757518,.877982,.246665,-.20354,1.752318,.876667,.269652,-.219916,1.745356,.875028,.293531,-.236255,1.737186,.872977,.318048,-.25241,1.726709,.870448,.342963,-.268192,1.713109,.8674,.368336,-.283587,1.698087,.863882,.393512,-.298186,1.678638,.859724,.418602,-.311882,1.655604,.854835,.44508,-.3245,1.63225,.848353,.472289,-.335295,1.605069,.840218,.499128,-.344256,1.573846,.830556,.525834,-.351716,1.54112,.819269,.553177,-.358241,1.511385,.806222,.57948,-.36264,1.477866,.791647,.605205,-.365513,1.444218,.775398,.630617,-.366822,1.410954,.757144,.65573,-.366785,1.37901,.737323,.680529,-.364904,1.34728,.715601,.7058,-.36099,1.316416,.691547,.73055,-.355397,1.286344,.666141,.75497,-.348664,1.258954,.638929,.779042,-.340774,1.232965,.611015,.802839,-.331767,1.209775,.581877,.825793,-.321054,1.185813,.551509,.849512,-.309016,1.16508,.519698,.87312,-.296369,1.147091,.487506,.895942,-.282704,1.129658,.45532,.917996,-.268007,1.113463,.422605,.941281,-.252329,1.10004,.389347,.964584,-.236203,1.087973,.35643,.986371,-.219209,1.075983,.323089,1.009522,-.201588,1.06694,.290806,1.031976,-.183296,1.057999,.258682,1.053461,-.164509,1.049542,.227722,1.076121,-.145165,1.043718,.197439,1.096597,-.125199,1.039607,.169578,1.113908,-.104921,1.035528,.142222,1.127939,-.083623,1.029807,.113802,1.138391,-.062589,1.023312,.085164,1.14511,-.041376,1.014806,.056186,1.150141,-.020433,1.006501,.027654,1.156069,97e-6,.999949,-46e-6,2e-4,-185e-6,1.858268,.927857,504e-6,-468e-6,1.861583,.927859,.002016,-.00187,1.860659,.927855,.004535,-.004208,1.860963,.927867,.008063,-.00748,1.860766,.927855,.012594,-.011683,1.859996,.927851,.018142,-.016828,1.860739,.927839,.024698,-.022901,1.860763,.927818,.032263,-.029903,1.860501,.927791,.040846,-.037834,1.860431,.927751,.05044,-.04668,1.859827,.92769,.061066,-.056446,1.859624,.92761,.072713,-.067109,1.859039,.927505,.085393,-.078613,1.858144,.927357,.09912,-.090747,1.856618,.927145,.11391,-.10385,1.855221,.926884,.129755,-.117777,1.85347,.926546,.146669,-.132441,1.851413,.926104,.164648,-.147565,1.848498,.92553,.183708,-.16347,1.845281,.924802,.203832,-.179763,1.841273,.923871,.225029,-.196564,1.836481,.922691,.247221,-.213537,1.830273,.921198,.270343,-.230662,1.822374,.91932,.294399,-.24774,1.812975,.917008,.31904,-.264448,1.800693,.914141,.344269,-.280831,1.785923,.910707,.369625,-.296478,1.767203,.906585,.394925,-.311287,1.744434,.901918,.420583,-.325578,1.720938,.89624,.4462,-.338384,1.693005,.889335,.472969,-.349187,1.660901,.880394,.50049,-.358687,1.628806,.869705,.527312,-.366042,1.593001,.857145,.554207,-.372045,1.557046,.842943,.58062,-.376134,1.520192,.826837,.60648,-.378636,1.482947,.808891,.631815,-.379414,1.445954,.789119,.657021,-.378972,1.410833,.767564,.681686,-.376728,1.376575,.744338,.706498,-.372844,1.342935,.718799,.731258,-.366649,1.311052,.691756,.755937,-.359354,1.280478,.662683,.779259,-.350487,1.250585,.632892,.803295,-.340941,1.225722,.60216,.82657,-.330174,1.201003,.57052,.849954,-.317854,1.178488,.537651,.873696,-.304426,1.158302,.503799,.896695,-.29012,1.139886,.469645,.919149,-.275106,1.122884,.435625,.942121,-.259282,1.107691,.401228,.964627,-.242123,1.093661,.367086,.986614,-.224575,1.08158,.332885,1.009623,-.206837,1.071375,.299209,1.033126,-.188092,1.062241,.266187,1.054954,-.168637,1.052912,.233733,1.07766,-.149166,1.047047,.203192,1.097983,-.128587,1.041607,.173918,1.115586,-.107339,1.03685,.145531,1.13017,-.086203,1.031427,.11689,1.141018,-.064171,1.024395,.087388,1.147681,-.04253,1.015719,.057733,1.15256,-.021011,1.006883,.028413,1.158406,158e-6,.999897,-106e-6,2e-4,-195e-6,1.950982,.975366,504e-6,-491e-6,1.950207,.975365,.002015,-.001966,1.950675,.975362,.004535,-.004423,1.951281,.97537,.008062,-.007863,1.951045,.975362,.012597,-.012285,1.951199,.975356,.018145,-.017692,1.951528,.97534,.024699,-.024074,1.951194,.975321,.032266,-.031434,1.950865,.975288,.040853,-.039771,1.951038,.975244,.050452,-.049067,1.950336,.975173,.061077,-.059324,1.949805,.975078,.072736,-.070526,1.949133,.974951,.085431,-.082528,1.947947,.974777,.099182,-.095345,1.946337,.97454,.113999,-.109118,1.944725,.974241,.129888,-.123741,1.942857,.973852,.146842,-.139071,1.940251,.973342,.16489,-.154986,1.937086,.972684,.184025,-.171661,1.933404,.971856,.204245,-.188672,1.92877,.970785,.225528,-.206252,1.923041,.969448,.247841,-.223972,1.915788,.967742,.271157,-.241827,1.907008,.965607,.295297,-.259562,1.895854,.963007,.320121,-.276909,1.881289,.959722,.345566,-.293883,1.864528,.955831,.371012,-.309816,1.842062,.951127,.396834,-.325157,1.818068,.945725,.422277,-.339357,1.788874,.939318,.447928,-.352387,1.758283,.93147,.474315,-.36368,1.723668,.9219,.50156,-.372963,1.686081,.909996,.528391,-.380159,1.645816,.896244,.554754,-.385545,1.603709,.880326,.581888,-.389778,1.565475,.862716,.607791,-.391839,1.524196,.843146,.633511,-.392331,1.483921,.821554,.658621,-.391193,1.445013,.798336,.68316,-.388424,1.406963,.773299,.707429,-.384104,1.370996,.746668,.732212,-.377945,1.335879,.717502,.756871,-.369856,1.302489,.686954,.781065,-.360707,1.271815,.655372,.804167,-.350091,1.242416,.622683,.827948,-.338941,1.217208,.589185,.850901,-.326427,1.192354,.555005,.873589,-.312199,1.169639,.519594,.897085,-.297374,1.150181,.484105,.920459,-.281932,1.132858,.448661,.942637,-.265625,1.115401,.413051,.965341,-.248332,1.101078,.377329,.98753,-.229983,1.087377,.342349,1.010739,-.211647,1.076582,.307824,1.033449,-.192725,1.0659,.273368,1.055618,-.172726,1.056958,.240238,1.079345,-.15264,1.04962,.208322,1.100058,-.131931,1.044084,.178242,1.118547,-.110351,1.039387,.149493,1.132748,-.088128,1.033049,.119673,1.143419,-.066069,1.025521,.089728,1.150316,-.043513,1.016378,.059253,1.155208,-.021593,1.007506,.02914,1.160871,111e-6,.999916,-35e-6,201e-6,-206e-6,2.061,1.025243,504e-6,-516e-6,2.049647,1.025237,.002015,-.002066,2.050169,1.025237,.004535,-.00465,2.051254,1.025255,.008063,-.008266,2.051302,1.025236,.0126,-.012915,2.051508,1.025226,.018144,-.018594,2.050981,1.025215,.0247,-.025304,2.050841,1.02519,.032267,-.033038,2.050537,1.025152,.040852,-.041795,2.05066,1.02509,.05046,-.05157,2.049921,1.025017,.061094,-.062347,2.04935,1.024908,.072762,-.074111,2.048517,1.02476,.085475,-.086661,2.047009,1.024555,.099249,-.10016,2.045261,1.024278,.114106,-.114628,2.043508,1.023941,.130032,-.130002,2.041321,1.023488,.14705,-.145985,2.038299,1.022905,.165164,-.162762,2.034658,1.022151,.18438,-.180172,2.030312,1.0212,.204704,-.198022,2.024944,1.019966,.226129,-.216359,2.018546,1.018424,.248582,-.234923,2.010153,1.016519,.272011,-.253474,1.999659,1.014072,.296259,-.27182,1.986076,1.011071,.321423,-.289959,1.970618,1.007389,.346897,-.307283,1.949667,1.002955,.37275,-.323817,1.925287,.997633,.398603,-.339241,1.896006,.991354,.424351,-.353633,1.863658,.983937,.449887,-.36666,1.82743,.975254,.475715,-.378213,1.789521,.964753,.502204,-.387133,1.745632,.951594,.530179,-.394976,1.705347,.936344,.556732,-.400134,1.658928,.918907,.583123,-.403439,1.613077,.899504,.609477,-.405285,1.567884,.878172,.634927,-.405055,1.523507,.854396,.660357,-.403494,1.481712,.829259,.684851,-.400104,1.439,.802359,.709654,-.395536,1.400956,.773534,.733472,-.388996,1.362156,.74323,.757502,-.380263,1.325113,.71109,.782249,-.370594,1.292913,.677166,.806017,-.359509,1.262088,.642527,.828687,-.347126,1.232059,.607589,.852372,-.334474,1.20716,.571938,.874266,-.320074,1.181978,.535518,.898168,-.304719,1.161156,.498375,.920456,-.288246,1.140667,.461179,.942832,-.271311,1.12278,.424533,.966458,-.254154,1.108743,.387784,.988907,-.235659,1.093872,.351689,1.011557,-.216322,1.081959,.315743,1.035099,-.197007,1.070885,.280402,1.056354,-.176878,1.059968,.246472,1.079854,-.156058,1.051815,.212818,1.101494,-.134772,1.045757,.182143,1.120587,-.113071,1.041169,.152867,1.135399,-.090411,1.034844,.122796,1.146612,-.067477,1.026974,.091888,1.153168,-.044849,1.017303,.060779,1.157912,-.021998,1.007735,.029919,1.163607,121e-6,.999959,3e-6,2e-4,-216e-6,2.163956,1.077737,504e-6,-543e-6,2.161128,1.077732,.002016,-.002173,2.162732,1.077729,.004535,-.004887,2.161402,1.077749,.008066,-.008692,2.163252,1.077732,.012599,-.013576,2.1613,1.077727,.018145,-.019546,2.161151,1.077702,.024702,-.026599,2.161223,1.077675,.032272,-.034729,2.160949,1.077632,.040862,-.043936,2.160967,1.077575,.05047,-.054203,2.160035,1.077473,.061113,-.065528,2.15949,1.077348,.072794,-.077882,2.158517,1.077178,.085528,-.09103,2.156605,1.076937,.099337,-.105251,2.154828,1.076631,.114228,-.120456,2.152812,1.076229,.130202,-.136573,2.150298,1.075713,.147284,-.153306,2.146752,1.075031,.16548,-.170931,2.142744,1.074173,.184793,-.189083,2.137475,1.073063,.205224,-.20784,2.13132,1.071683,.226743,-.226939,2.123154,1.069914,.249401,-.246344,2.114086,1.067718,.272955,-.26564,2.101599,1.064924,.297494,-.284846,2.086612,1.061512,.322731,-.303452,2.067356,1.057359,.348451,-.32133,2.043711,1.052294,.374451,-.338201,2.015033,1.046153,.400454,-.353816,1.981139,1.039003,.426434,-.368216,1.944128,1.030498,.452088,-.381251,1.903094,1.020454,.477901,-.392833,1.860402,1.008793,.504173,-.402408,1.814402,.994791,.53152,-.409545,1.766273,.977733,.558049,-.414351,1.714119,.958625,.584778,-.417437,1.664612,.937189,.610808,-.418519,1.613793,.913543,.636915,-.418094,1.565942,.888137,.662204,-.415742,1.518783,.860728,.686848,-.411746,1.473306,.831793,.710992,-.406153,1.430153,.800862,.735382,-.399519,1.389824,.768768,.759079,-.390927,1.350744,.734825,.782912,-.380111,1.313559,.69945,.806746,-.368383,1.280028,.663191,.830269,-.355606,1.249814,.625927,.853305,-.341988,1.221138,.588644,.876326,-.327545,1.195837,.550849,.898322,-.311779,1.171844,.512694,.921811,-.294944,1.150671,.474225,.944563,-.277333,1.132224,.435772,.967089,-.25934,1.115422,.398001,.989754,-.240836,1.100405,.360802,1.01247,-.221293,1.086533,.323566,1.036426,-.201191,1.075496,.287387,1.058709,-.18059,1.064233,.252184,1.081593,-.15981,1.055296,.218441,1.103146,-.137772,1.047978,.186223,1.122814,-.115347,1.042693,.156019,1.13779,-.092582,1.036049,.125579,1.149184,-.069152,1.027944,.093986,1.156062,-.045661,1.018039,.062122,1.160733,-.022719,1.008072,.03065,1.166487,231e-6,1.000063,-12e-5,201e-6,-228e-6,2.308308,1.133128,504e-6,-571e-6,2.283756,1.133123,.002016,-.002284,2.283756,1.133123,.004535,-.005138,2.28331,1.133144,.008048,-.009119,2.266192,1.133138,.0126,-.014274,2.284377,1.13311,.018147,-.020553,2.284204,1.133093,.024702,-.027964,2.283517,1.13306,.032272,-.03651,2.282997,1.133007,.040866,-.046188,2.282986,1.13293,.050481,-.056979,2.28226,1.132824,.061133,-.068881,2.281533,1.132678,.07283,-.08185,2.280504,1.132481,.085592,-.095657,2.278304,1.132202,.099431,-.110594,2.276269,1.131845,.11436,-.12659,2.27389,1.131383,.130388,-.143454,2.270761,1.130784,.147547,-.161029,2.266794,1.130003,.165836,-.179523,2.262332,1.129016,.185269,-.198527,2.256326,1.127738,.205822,-.218138,2.249031,1.126156,.227527,-.238141,2.239993,1.124132,.250325,-.258302,2.228878,1.121594,.27407,-.278329,2.214204,1.118449,.298793,-.29831,2.196654,1.114528,.324131,-.317462,2.173394,1.109783,.350101,-.335853,2.146395,1.103901,.376293,-.353064,2.112341,1.096954,.402547,-.36895,2.0737,1.088642,.428791,-.383462,2.031152,1.078946,.454976,-.396635,1.986661,1.067536,.480566,-.407873,1.937038,1.054403,.506154,-.417303,1.885155,1.038894,.532862,-.424194,1.830369,1.020535,.560354,-.429344,1.776976,.999295,.587114,-.431949,1.721214,.97599,.613345,-.432547,1.665739,.950239,.639335,-.431338,1.6122,.922467,.664996,-.428473,1.561035,.892593,.688947,-.423355,1.50824,.861325,.713403,-.417235,1.461776,.828289,.737649,-.409848,1.418888,.793863,.761275,-.400901,1.376807,.758074,.784778,-.390174,1.337204,.721974,.808762,-.377683,1.301527,.682718,.831993,-.364037,1.267144,.644001,.854696,-.349494,1.236023,.605478,.877933,-.334499,1.209284,.565588,.90018,-.318435,1.183967,.526138,.923039,-.301669,1.161513,.486524,.945895,-.283298,1.140838,.446747,.968069,-.264438,1.122475,.408041,.991179,-.245463,1.106968,.369477,1.012926,-.22568,1.091435,.331626,1.036995,-.205401,1.079561,.294288,1.060909,-.18431,1.068215,.257696,1.083531,-.162846,1.058133,.223343,1.105644,-.14104,1.050851,.190541,1.125691,-.117965,1.045001,.15931,1.141297,-.094377,1.038028,.128238,1.152672,-.070831,1.029694,.096282,1.159333,-.046853,1.019136,.06372,1.163819,-.022991,1.008518,.031234,1.169564,125e-6,1.000069,-24e-6,202e-6,-241e-6,2.458341,1.191742,504e-6,-6e-4,2.418738,1.19174,.002015,-.002401,2.418821,1.19173,.004535,-.005405,2.421986,1.191756,.008071,-.009618,2.424988,1.191753,.0126,-.015012,2.420242,1.191727,.018145,-.021612,2.419937,1.191703,.024704,-.02941,2.419746,1.191662,.032278,-.038398,2.419409,1.191604,.040874,-.048574,2.418995,1.191515,.050496,-.05992,2.41819,1.191389,.06116,-.072432,2.417487,1.191221,.072871,-.086009,2.415853,1.190984,.085664,-.100559,2.413669,1.190664,.099543,-.116283,2.411423,1.190256,.11452,-.133071,2.408711,1.189719,.130616,-.15067,2.4049,1.189019,.147856,-.169197,2.400512,1.188125,.166235,-.188545,2.394939,1.186972,.185804,-.20848,2.388232,1.185515,.206488,-.228883,2.37919,1.183673,.228383,-.249897,2.369208,1.181382,.251305,-.270851,2.355459,1.178478,.275349,-.29178,2.339142,1.174857,.300106,-.312257,2.316655,1.170411,.325849,-.332225,2.29154,1.164883,.351782,-.350862,2.257242,1.158196,.378248,-.368431,2.218671,1.150173,.404674,-.384428,2.17368,1.140703,.431385,-.39923,2.127083,1.129555,.457407,-.411875,2.073236,1.116436,.483275,-.423013,2.018223,1.101373,.509278,-.432624,1.962674,1.084257,.534751,-.439261,1.900814,1.064592,.561895,-.443801,1.839558,1.040881,.588677,-.445872,1.777763,1.015208,.6149,-.445896,1.71655,.987252,.641051,-.444148,1.657984,.957271,.666409,-.440299,1.600832,.924841,.691872,-.435318,1.548237,.891185,.716638,-.428631,1.497572,.855929,.739864,-.419872,1.447043,.819676,.763707,-.410456,1.403648,.781455,.786744,-.39939,1.360844,.742965,.809585,-.386381,1.320529,.70326,.834164,-.372622,1.286467,.662385,.856713,-.357177,1.252306,.621379,.87982,-.341458,1.22307,.580238,.902721,-.325024,1.197115,.539028,.92465,-.307543,1.172314,.498592,.947613,-.289557,1.151171,.45798,.96959,-.269799,1.129986,.417696,.992961,-.250111,1.113321,.377529,1.014582,-.229761,1.097149,.339096,1.038069,-.209375,1.083913,.301119,1.061661,-.188038,1.071241,.263506,1.085069,-.165874,1.060508,.227921,1.107744,-.143437,1.05293,.194062,1.127982,-.120574,1.046396,.162506,1.144541,-.096569,1.03988,.130788,1.155876,-.072039,1.030946,.098057,1.162719,-.047888,1.020124,.064956,1.167089,-.02374,1.008953,.031966,1.172775,277e-6,1.000067,-111e-6,2e-4,-251e-6,2.573709,1.253951,504e-6,-632e-6,2.572401,1.25394,.002015,-.002527,2.571267,1.253927,.004535,-.005687,2.572481,1.253948,.008062,-.010108,2.571851,1.253941,.012588,-.01578,2.568431,1.253934,.018139,-.022731,2.569765,1.253893,.024709,-.030948,2.572115,1.253853,.032283,-.040401,2.571456,1.253785,.040883,-.051105,2.571041,1.253683,.050514,-.063041,2.570153,1.253538,.061188,-.076195,2.569085,1.253336,.072926,-.090402,2.567184,1.253065,.085746,-.105745,2.564731,1.252697,.099661,-.122296,2.561995,1.252218,.114699,-.139912,2.559019,1.25159,.130882,-.158362,2.555017,1.250766,.148202,-.177856,2.549419,1.249744,.166706,-.198049,2.542908,1.248423,.186404,-.219014,2.535205,1.246741,.207272,-.240376,2.524893,1.244596,.229345,-.26223,2.512804,1.241917,.252494,-.284134,2.496923,1.23861,.27669,-.305828,2.476583,1.234474,.301798,-.327107,2.451548,1.229292,.327423,-.3473,2.41863,1.222997,.353848,-.366699,2.381002,1.215366,.380342,-.384421,2.334413,1.206199,.40739,-.400855,2.28566,1.195374,.433913,-.415241,2.228604,1.18229,.460837,-.428275,2.171532,1.167385,.486381,-.438573,2.105639,1.150401,.511959,-.447348,2.040835,1.13099,.537586,-.454152,1.974797,1.109302,.564035,-.458684,1.907895,1.084131,.59069,-.460058,1.839482,1.055803,.61725,-.459662,1.772332,1.025103,.643406,-.45726,1.707313,.992502,.668794,-.452666,1.644722,.957657,.69393,-.446641,1.586832,.92134,.718708,-.439121,1.531197,.883841,.743469,-.430429,1.480765,.844931,.76608,-.419622,1.430338,.804786,.789801,-.408368,1.386295,.764206,.812718,-.395392,1.343758,.722565,.835453,-.380699,1.304655,.680585,.858801,-.364834,1.269287,.637235,.881537,-.348092,1.237493,.594579,.904656,-.331087,1.208862,.552313,.926357,-.312966,1.182365,.51008,.949001,-.294684,1.159452,.468677,.971598,-.275361,1.138706,.426723,.994905,-.254947,1.120552,.385875,1.017981,-.234109,1.104215,.345751,1.04084,-.21304,1.089276,.306762,1.063893,-.191616,1.075845,.269066,1.086907,-.169272,1.063788,.232171,1.109937,-.146076,1.054977,.197826,1.130808,-.122544,1.048572,.165272,1.146831,-.098492,1.040742,.13328,1.158955,-.07371,1.031818,.100262,1.166161,-.04861,1.020747,.066165,1.170491,-.024209,1.00938,.032741,1.176111,1e-5,1.000042,56e-6,202e-6,-267e-6,2.786357,1.320169,504e-6,-665e-6,2.741889,1.320168,.002015,-.00266,2.74,1.320143,.004536,-.005987,2.744276,1.320161,.008063,-.010644,2.743432,1.320162,.0126,-.016628,2.741741,1.320148,.018144,-.023937,2.741314,1.320127,.024708,-.032577,2.741916,1.320061,.03229,-.042536,2.742132,1.319976,.040894,-.053799,2.741199,1.319861,.050533,-.066361,2.740258,1.319691,.061223,-.080202,2.739045,1.319458,.072985,-.095109,2.736519,1.319138,.085841,-.111296,2.733903,1.318715,.099808,-.128685,2.730944,1.318156,.114903,-.147202,2.727293,1.317424,.131164,-.166575,2.722169,1.316485,.148599,-.187019,2.716148,1.315274,.167245,-.20824,2.708701,1.313733,.187078,-.230151,2.698998,1.311792,.208153,-.252538,2.687341,1.309343,.230418,-.275295,2.672621,1.306247,.253802,-.298066,2.653619,1.302374,.278261,-.320673,2.629943,1.297573,.303527,-.342528,2.599228,1.291625,.329571,-.363531,2.562226,1.284374,.355939,-.382963,2.515491,1.275478,.382987,-.401306,2.464858,1.264866,.409917,-.417455,2.404877,1.252184,.437015,-.432067,2.341408,1.237415,.463474,-.444204,2.271837,1.220687,.489835,-.454631,2.200593,1.200973,.516054,-.463338,2.129733,1.179346,.541397,-.469425,2.055635,1.155039,.566798,-.473526,1.980812,1.127866,.593114,-.474632,1.904723,1.097304,.619945,-.473597,1.832456,1.063603,.646325,-.470656,1.761501,1.027971,.67232,-.465675,1.694248,.990692,.697163,-.458527,1.629227,.951582,.721472,-.449904,1.568132,.911197,.745855,-.44014,1.512084,.869745,.770089,-.429338,1.460694,.827648,.792546,-.416701,1.410739,.784728,.815161,-.403151,1.365438,.741884,.837994,-.388714,1.324811,.6978,.86122,-.372573,1.287723,.653341,.883737,-.355024,1.252491,.609455,.906784,-.337092,1.221844,.565275,.928493,-.31837,1.192881,.521558,.951495,-.299605,1.169131,.478149,.973586,-.280067,1.146316,.436325,.9964,-.259823,1.12786,.394409,1.01978,-.238313,1.110521,.353045,1.042775,-.216506,1.093915,.312803,1.066822,-.194695,1.080326,.2741,1.089869,-.17229,1.067722,.236657,1.113606,-.149264,1.058471,.201603,1.134229,-.124814,1.050701,.168398,1.150922,-.10007,1.043051,.135616,1.163224,-.075155,1.033742,.102144,1.169965,-.049933,1.021818,.067532,1.1742,-.024461,1.009916,.033215,1.179766,188e-6,1.000045,-14e-6,202e-6,-281e-6,2.964186,1.39088,505e-6,-702e-6,2.945157,1.390903,.002015,-.002802,2.931184,1.390863,.004535,-.006307,2.935673,1.3909,.008063,-.011213,2.934274,1.39089,.012598,-.017516,2.932216,1.390876,.018147,-.025221,2.933324,1.390832,.024711,-.034322,2.933945,1.390769,.032295,-.04481,2.933496,1.390674,.040904,-.056673,2.932487,1.390538,.050555,-.069906,2.931571,1.390342,.061259,-.084468,2.929914,1.390064,.073053,-.100152,2.927039,1.389695,.085948,-.117202,2.924241,1.389201,.099968,-.135531,2.92076,1.388548,.115135,-.154906,2.915998,1.387692,.131496,-.175352,2.910285,1.386611,.149049,-.196783,2.903174,1.38519,.167848,-.219066,2.894584,1.383407,.187879,-.241983,2.883171,1.381148,.209143,-.265398,2.869102,1.378261,.231689,-.289254,2.852238,1.37469,.255223,-.312776,2.828264,1.370166,.279952,-.33626,2.800175,1.364591,.305572,-.358865,2.764282,1.357758,.33165,-.380223,2.717845,1.349413,.358491,-.400252,2.665326,1.339084,.385445,-.418422,2.602293,1.326773,.412947,-.434993,2.536973,1.312141,.439681,-.448757,2.459463,1.295205,.467272,-.461427,2.38625,1.275573,.493568,-.471102,2.303225,1.2534,.519743,-.47893,2.221945,1.22889,.544882,-.484098,2.136425,1.20173,.57069,-.488125,2.057093,1.172022,.595905,-.489185,1.975334,1.139312,.622747,-.487535,1.895055,1.103038,.648695,-.483482,1.815995,1.064364,.675159,-.478096,1.744272,1.024098,.700714,-.470492,1.675257,.982186,.725641,-.461398,1.609135,.939137,.748552,-.449825,1.545091,.894791,.772808,-.438185,1.489394,.850373,.795928,-.425073,1.437026,.805287,.8189,-.411028,1.389654,.760003,.841633,-.396047,1.345873,.714914,.863213,-.379637,1.305185,.669271,.886662,-.362227,1.269147,.622935,.908504,-.343068,1.234714,.577757,.931425,-.323982,1.204997,.532922,.953835,-.304347,1.178871,.488154,.975813,-.284219,1.155019,.444885,.997662,-.263544,1.133941,.402224,1.021167,-.242611,1.1161,.36053,1.044038,-.220065,1.098348,.318968,1.068837,-.19758,1.084605,.279107,1.092548,-.174779,1.071217,.241111,1.116157,-.151596,1.060486,.204913,1.137486,-.127478,1.052751,.17141,1.154694,-.101915,1.044807,.137999,1.166867,-.076246,1.034824,.103807,1.173715,-.050661,1.022501,.068802,1.178236,-.025355,1.010324,.034155,1.183545,205e-6,1.000059,-11e-5,201e-6,-294e-6,3.16108,1.466721,505e-6,-74e-5,3.155526,1.466737,.002016,-.002957,3.152852,1.466688,.004537,-.006655,3.150654,1.466667,.008066,-.011828,3.153109,1.466694,.012604,-.018479,3.152143,1.466721,.01815,-.026598,3.151025,1.466636,.024714,-.036191,3.1503,1.466562,.032301,-.047249,3.149861,1.46645,.040924,-.059766,3.149548,1.466289,.050579,-.073703,3.147516,1.466055,.061306,-.089022,3.14568,1.465738,.073135,-.105563,3.142428,1.465301,.086075,-.123544,3.139113,1.464715,.100153,-.142853,3.135064,1.463956,.115411,-.163183,3.129509,1.462962,.131876,-.18476,3.122959,1.46167,.14957,-.207172,3.114153,1.460045,.168523,-.230578,3.103626,1.457945,.188784,-.254658,3.090818,1.455279,.210264,-.279114,3.073352,1.451998,.23303,-.30393,3.052592,1.44778,.256959,-.328517,3.025187,1.442568,.281901,-.352755,2.990341,1.436026,.307728,-.375894,2.94682,1.427979,.334197,-.397924,2.892845,1.418249,.360966,-.417914,2.827937,1.40637,.388478,-.436526,2.758006,1.392134,.415567,-.452366,2.674696,1.375244,.443518,-.466917,2.595136,1.35566,.470631,-.478417,2.504173,1.333123,.497419,-.487825,2.413227,1.308181,.523961,-.495064,2.321239,1.280227,.549708,-.499844,2.228911,1.249894,.575296,-.502844,2.138834,1.21713,.600168,-.503368,2.04903,1.181412,.625874,-.501622,1.962267,1.142648,.652164,-.496936,1.8769,1.101268,.678029,-.490319,1.796344,1.057782,.703248,-.481575,1.718925,1.012884,.72852,-.471822,1.648358,.966487,.752577,-.460134,1.581989,.91988,.776163,-.447164,1.520109,.873087,.800016,-.433601,1.465081,.825803,.822176,-.418388,1.412564,.778249,.844873,-.402704,1.366184,.730849,.865955,-.385633,1.321865,.684037,.888173,-.368255,1.283464,.637192,.910994,-.349332,1.249215,.590131,.93427,-.329612,1.218366,.543213,.956653,-.309228,1.189808,.497752,.978476,-.28831,1.163674,.452837,1.000755,-.267243,1.141389,.409481,1.023827,-.246015,1.122012,.367354,1.045572,-.223777,1.103303,.325171,1.070445,-.200837,1.08801,.284442,1.094268,-.177211,1.07365,.245138,1.118639,-.153531,1.063051,.208289,1.139786,-.129074,1.053921,.173607,1.157848,-.104051,1.045968,.140467,1.170697,-.077694,1.035782,.105594,1.177874,-.051393,1.023483,.069898,1.182242,-.025392,1.01062,.034532,1.187612,-32e-6,1.000062,-35e-6,202e-6,-313e-6,3.450327,1.548291,504e-6,-78e-5,3.396162,1.548289,.002015,-.00312,3.395621,1.54826,.004533,-.007019,3.394299,1.548217,.008066,-.012486,3.398803,1.548274,.0126,-.0195,3.396363,1.548245,.018151,-.028076,3.396805,1.548192,.024722,-.038209,3.396384,1.548109,.032306,-.049868,3.395158,1.547979,.040936,-.063077,3.394303,1.547785,.05061,-.077791,3.392979,1.547513,.06136,-.093869,3.38991,1.547134,.073227,-.11138,3.386669,1.546619,.086217,-.130371,3.382974,1.545938,.100364,-.150684,3.378046,1.545039,.115733,-.172116,3.371719,1.54388,.132309,-.194809,3.363764,1.54238,.150174,-.218431,3.353699,1.540462,.16934,-.242954,3.341397,1.538002,.189788,-.268175,3.324957,1.534894,.211581,-.293776,3.304776,1.530954,.234561,-.319619,3.278192,1.526033,.258776,-.345089,3.24491,1.519926,.284059,-.370176,3.203338,1.512296,.310312,-.394171,3.152477,1.502956,.336748,-.416137,3.083616,1.491463,.364029,-.436752,3.010481,1.477493,.391575,-.455102,2.925454,1.460933,.419409,-.471378,2.83438,1.441554,.446811,-.484714,2.733329,1.418861,.474489,-.496021,2.63363,1.393405,.501751,-.504991,2.530935,1.364633,.528488,-.511392,2.426653,1.333234,.554428,-.515395,2.323633,1.299138,.580434,-.517761,2.224964,1.262462,.605474,-.517598,2.127228,1.223784,.629888,-.514946,2.030545,1.182321,.655579,-.510177,1.93907,1.138515,.68194,-.503097,1.852355,1.091502,.707228,-.493537,1.768084,1.043464,.731894,-.482372,1.69084,.994242,.756741,-.470312,1.619277,.944749,.78016,-.456412,1.55343,.894816,.803384,-.441492,1.493357,.845202,.826347,-.425944,1.43783,.795954,.849145,-.409532,1.388578,.746915,.870617,-.391988,1.341527,.698025,.892943,-.374229,1.302188,.649579,.913828,-.355148,1.262877,.601833,.93683,-.335238,1.230136,.554521,.958687,-.313939,1.199596,.507208,.982008,-.292741,1.173619,.461357,1.003691,-.27094,1.149015,.416031,1.027223,-.249102,1.128689,.372457,1.050048,-.226899,1.109444,.330281,1.074105,-.204329,1.092943,.288987,1.098971,-.18056,1.078591,.249075,1.123324,-.155987,1.066885,.211519,1.145445,-.130929,1.057617,.176506,1.162856,-.105269,1.048453,.142345,1.17536,-.079267,1.037439,.107452,1.182514,-.052547,1.024393,.071252,1.186575,-.025744,1.011093,.035019,1.19205,318e-6,1.000013,-152e-6,204e-6,-334e-6,3.909175,1.636412,504e-6,-825e-6,3.678647,1.63641,.002015,-.003298,3.678315,1.636387,.004533,-.007417,3.674126,1.63631,.008062,-.01319,3.676771,1.636376,.012603,-.020613,3.678135,1.636369,.018153,-.029675,3.677315,1.636299,.024723,-.040378,3.676872,1.636196,.032318,-.052708,3.67575,1.636038,.040955,-.06666,3.674803,1.63581,.050645,-.082203,3.672735,1.635494,.061429,-.09915,3.669047,1.635048,.073333,-.117679,3.665401,1.634437,.086388,-.137725,3.661315,1.633634,.10062,-.159081,3.654992,1.632571,.116087,-.181721,3.647341,1.631202,.13282,-.205611,3.637877,1.629432,.150867,-.230542,3.626333,1.627161,.170234,-.256239,3.610671,1.624266,.190981,-.282751,3.591685,1.620589,.213013,-.30943,3.565864,1.615999,.236387,-.336427,3.534826,1.610216,.260943,-.362931,3.493984,1.603047,.286497,-.388644,3.442075,1.59392,.312769,-.412912,3.375973,1.582961,.339832,-.435635,3.299355,1.569343,.367214,-.456181,3.208994,1.553137,.394935,-.474325,3.10891,1.533791,.422935,-.490318,3.001767,1.511093,.451166,-.503827,2.891735,1.485145,.478695,-.514185,2.77343,1.455617,.506313,-.522502,2.657639,1.422946,.533427,-.528119,2.541132,1.387843,.559942,-.53143,2.42695,1.349542,.58515,-.531978,2.312437,1.309303,.6105,-.531054,2.205966,1.26628,.63538,-.528058,2.101993,1.221709,.659852,-.522751,2.00295,1.175062,.685151,-.515026,1.908647,1.125078,.71092,-.50502,1.819389,1.074296,.736066,-.493268,1.735806,1.02242,.760503,-.480032,1.658607,.97023,.785091,-.465986,1.589424,.917077,.807523,-.449721,1.522533,.864888,.830974,-.433461,1.465416,.813006,.852659,-.415808,1.409076,.761689,.874841,-.397855,1.360758,.711258,.896322,-.379041,1.316829,.661721,.918134,-.360048,1.278574,.612263,.939356,-.340108,1.2422,.564369,.961025,-.318877,1.210305,.516506,.984371,-.29713,1.183689,.469342,1.006905,-.274661,1.157466,.42308,1.029941,-.252234,1.135066,.378315,1.052751,-.229268,1.114518,.335169,1.077981,-.206662,1.09776,.293336,1.102542,-.183331,1.082051,.252984,1.126539,-.158797,1.068935,.21499,1.149023,-.133014,1.058996,.178903,1.16755,-.106641,1.050245,.144559,1.179994,-.079952,1.038648,.108667,1.187104,-.053316,1.025284,.072209,1.191406,-.026826,1.011453,.035833,1.196748,226e-6,1.000034,-61e-6,2e-4,-346e-6,3.996419,1.732034,504e-6,-873e-6,4.000138,1.732038,.002016,-.003492,4.002078,1.732012,.004538,-.007859,4.005626,1.731962,.008064,-.013963,3.9985,1.731999,.01259,-.021794,3.995024,1.732004,.018154,-.031406,3.999233,1.731901,.024727,-.042733,3.998497,1.731774,.032327,-.055781,3.997064,1.731599,.040974,-.070543,3.995856,1.731325,.050685,-.086984,3.993839,1.730945,.061506,-.104897,3.989519,1.730417,.073458,-.124506,3.985313,1.729697,.086573,-.145706,3.979984,1.728747,.100909,-.168211,3.972562,1.727491,.116509,-.192198,3.963836,1.725854,.133404,-.21728,3.951919,1.723749,.151659,-.243556,3.937734,1.721093,.171288,-.270611,3.919021,1.71764,.192301,-.298389,3.895171,1.713272,.214683,-.326338,3.864171,1.707825,.238392,-.354394,3.824682,1.700956,.263151,-.381636,3.771168,1.692392,.289155,-.408266,3.709961,1.681769,.315832,-.43307,3.630302,1.668539,.342942,-.455741,3.534719,1.652513,.370892,-.476655,3.431531,1.633428,.398985,-.494692,3.314933,1.610694,.427206,-.510313,3.189741,1.58424,.455266,-.52276,3.058325,1.554195,.483472,-.532872,2.927213,1.520805,.511192,-.540229,2.794112,1.484026,.538706,-.545105,2.663786,1.443796,.565422,-.547251,2.534841,1.401429,.59127,-.547115,2.408437,1.356231,.616787,-.545113,2.291284,1.308887,.64138,-.540853,2.177478,1.260447,.665344,-.534561,2.069265,1.210634,.690147,-.527115,1.969776,1.158569,.714578,-.516171,1.870847,1.104593,.740349,-.504048,1.782674,1.049578,.764563,-.489683,1.698614,.994458,.78871,-.474541,1.624447,.938612,.812154,-.458099,1.554453,.883694,.834566,-.440345,1.490045,.83022,.857486,-.422491,1.432889,.776499,.879224,-.403588,1.380669,.724257,.899971,-.383819,1.333124,.673311,.922111,-.36425,1.292648,.622999,.942842,-.343873,1.253933,.573304,.964398,-.323206,1.221027,.52509,.98686,-.301711,1.191806,.47758,1.00976,-.278695,1.165162,.430624,1.033347,-.255591,1.141715,.384482,1.055937,-.232039,1.119739,.340532,1.081178,-.208664,1.102117,.297311,1.105696,-.184935,1.085062,.256227,1.129575,-.160673,1.070918,.217709,1.152135,-.135414,1.060642,.181471,1.171221,-.108462,1.051041,.14638,1.184412,-.081008,1.039694,.11012,1.19182,-.05371,1.025903,.073052,1.196195,-.026625,1.011816,.036129,1.201677,-175e-6,.999945,98e-6,196e-6,-36e-5,4.100786,1.83629,504e-6,-925e-6,4.370184,1.836295,.002018,-.003706,4.385247,1.836243,.004534,-.008324,4.370146,1.83621,.008064,-.014805,4.372335,1.836256,.012597,-.023116,4.359918,1.836259,.018158,-.033299,4.371503,1.836123,.024732,-.045301,4.370533,1.835988,.032344,-.059143,4.369649,1.835768,.040999,-.074779,4.367861,1.835454,.050739,-.092178,4.364322,1.834974,.061594,-.111161,4.359221,1.834355,.073604,-.131958,4.35462,1.833499,.086796,-.154393,4.347915,1.832355,.101246,-.178201,4.339152,1.83088,.11699,-.203531,4.328327,1.828936,.134086,-.230043,4.31424,1.826442,.152589,-.257718,4.296795,1.82323,.172514,-.286176,4.273985,1.819124,.193853,-.315295,4.244136,1.813909,.216582,-.344507,4.205152,1.80741,.240668,-.373646,4.154781,1.799084,.265904,-.401897,4.091563,1.788905,.292226,-.429136,4.013199,1.776206,.319045,-.454057,3.912886,1.7605,.346721,-.477219,3.800927,1.741586,.374849,-.497883,3.675652,1.718818,.403078,-.515504,3.536892,1.692138,.431597,-.530621,3.391351,1.661434,.460246,-.542852,3.242817,1.626989,.488899,-.552238,3.093685,1.588582,.517215,-.559045,2.944163,1.5463,.54448,-.562351,2.794189,1.501299,.571542,-.563394,2.650239,1.453758,.598167,-.56259,2.513757,1.403321,.624104,-.559636,2.384203,1.352431,.648789,-.554148,2.259149,1.298758,.672715,-.546779,2.14025,1.244943,.696258,-.537896,2.030401,1.189971,.720048,-.527401,1.928311,1.134526,.744078,-.514142,1.830175,1.076504,.768895,-.499352,1.740731,1.018032,.792551,-.482982,1.658911,.96025,.817007,-.466406,1.586579,.903029,.839035,-.447616,1.516969,.846484,.862742,-.429261,1.458675,.79142,.884307,-.409479,1.402989,.737125,.905641,-.389303,1.352817,.683912,.926185,-.368344,1.306684,.63269,.947229,-.347366,1.267395,.581739,.969502,-.32672,1.233192,.532305,.990758,-.304973,1.201017,.484166,1.012749,-.282816,1.173018,.437385,1.035533,-.259084,1.147184,.390755,1.059915,-.235239,1.125388,.345399,1.084348,-.211044,1.105859,.301356,1.109544,-.186698,1.088888,.259708,1.13377,-.1619,1.073848,.220324,1.157553,-.136604,1.06319,.183857,1.176461,-.110428,1.05311,.148521,1.190137,-.082898,1.041484,.112124,1.197215,-.054554,1.026844,.07416,1.201654,-.026744,1.012264,.036527,1.207085,399e-6,1.000034,-201e-6,191e-6,-373e-6,4.194318,1.950551,504e-6,-983e-6,4.80435,1.950552,.002015,-.003931,4.80282,1.950518,.004536,-.008847,4.805254,1.950472,.008064,-.015725,4.804152,1.950517,.012693,-.02474,4.826828,1.949914,.018159,-.035365,4.803103,1.950349,.02474,-.048122,4.80322,1.950183,.032361,-.062822,4.801522,1.949917,.041034,-.07943,4.799593,1.949538,.050815,-.097841,4.797179,1.948972,.061702,-.118026,4.789557,1.948246,.073766,-.140112,4.783293,1.947204,.087066,-.163819,4.775698,1.945855,.101637,-.189122,4.764612,1.944052,.117558,-.215884,4.751486,1.94171,.134884,-.243968,4.734791,1.938727,.153637,-.27317,4.712078,1.934891,.17389,-.303146,4.683575,1.929976,.195643,-.333704,4.646766,1.92374,.218767,-.36417,4.596814,1.915888,.243337,-.39453,4.535509,1.90597,.26886,-.423512,4.452006,1.893623,.295173,-.450609,4.345682,1.878286,.322784,-.476488,4.231632,1.859391,.350616,-.49942,4.093553,1.836912,.379127,-.519862,3.944127,1.809625,.40786,-.537373,3.782223,1.778529,.436717,-.551802,3.615563,1.742684,.465345,-.562951,3.440672,1.702289,.494158,-.571334,3.26807,1.658666,.522896,-.577227,3.100668,1.611027,.551379,-.580514,2.937615,1.559742,.578992,-.58061,2.778703,1.507257,.605095,-.577729,2.621626,1.451941,.630653,-.573,2.476506,1.395218,.656175,-.566944,2.341592,1.337862,.681036,-.558988,2.216478,1.279275,.704713,-.549211,2.096972,1.220526,.726894,-.53719,1.983311,1.161709,.749865,-.524167,1.8811,1.102095,.773553,-.508991,1.785637,1.042039,.797102,-.491658,1.697234,.981588,.821187,-.474093,1.62025,.921265,.843848,-.45498,1.547071,.862757,.866662,-.435421,1.482008,.8047,.888696,-.41499,1.424116,.749432,.910945,-.394472,1.372658,.694767,.9323,-.373239,1.325157,.641106,.95285,-.351347,1.282217,.589689,.974718,-.329809,1.244897,.539322,.996445,-.307902,1.212306,.490083,1.01758,-.285392,1.181402,.442702,1.040342,-.262782,1.155996,.395911,1.064399,-.238995,1.131708,.350206,1.089464,-.214297,1.111215,.305175,1.115565,-.189293,1.093094,.262686,1.14064,-.163843,1.077994,.223078,1.163824,-.137789,1.066014,.185651,1.182577,-.111087,1.055615,.150045,1.195775,-.083945,1.04294,.113457,1.203175,-.056145,1.028015,.075453,1.207282,-.027685,1.012552,.037217,1.213019,362e-6,.999938,-293e-6,187e-6,-388e-6,4.316009,2.0765,504e-6,-.001048,5.317799,2.076499,.002014,-.004182,5.306557,2.076523,.004539,-.009425,5.317505,2.076453,.008063,-.016737,5.312143,2.07641,.012614,-.026171,5.316434,2.076389,.018158,-.037641,5.307836,2.076265,.024767,-.051266,5.315297,2.076044,.032372,-.066859,5.307433,2.075743,.041066,-.084538,5.304809,2.07527,.050871,-.104062,5.299277,2.074622,.061821,-.125613,5.293419,2.073708,.07397,-.149085,5.286629,2.072457,.087375,-.174214,5.275937,2.070804,.102105,-.201136,5.263267,2.068647,.118223,-.229505,5.246309,2.065846,.135814,-.259217,5.225496,2.062189,.154887,-.28999,5.19658,2.057566,.17551,-.321618,5.160716,2.051593,.197636,-.353632,5.112202,2.043949,.221168,-.385303,5.046981,2.034445,.246099,-.416511,4.965386,2.022368,.27207,-.446377,4.860735,2.00716,.29909,-.474279,4.73514,1.988598,.326702,-.499809,4.584962,1.965865,.355017,-.52279,4.420447,1.938705,.383856,-.542755,4.241942,1.90637,.413059,-.559903,4.053302,1.869455,.441882,-.573174,3.852753,1.827946,.471516,-.584151,3.660377,1.781652,.500872,-.591843,3.466027,1.730885,.529677,-.596253,3.272812,1.676821,.557683,-.597604,3.084286,1.620064,.585652,-.596591,2.906111,1.560909,.612819,-.593138,2.738258,1.500318,.639848,-.588245,2.584172,1.438127,.664758,-.58014,2.430697,1.375746,.688754,-.570189,2.290701,1.312727,.712848,-.55942,2.162679,1.250063,.735111,-.54657,2.042186,1.18784,.757521,-.532944,1.933435,1.125513,.780056,-.517981,1.833524,1.063827,.802513,-.500724,1.739053,1.002154,.825462,-.481625,1.652381,.939811,.848973,-.462327,1.57756,.878279,.871521,-.441928,1.509291,.8192,.892325,-.420297,1.443799,.761607,.914935,-.399072,1.389647,.705351,.936429,-.377232,1.339903,.650213,.957614,-.355091,1.295467,.597773,.979578,-.332767,1.256692,.545914,1.00086,-.310147,1.221666,.495661,1.02255,-.287395,1.190775,.448026,1.045005,-.264582,1.162641,.40049,1.068703,-.241464,1.138358,.354088,1.093098,-.217504,1.115973,.309812,1.11923,-.19214,1.096284,.266297,1.144608,-.165975,1.080042,.225831,1.168599,-.139174,1.067749,.187761,1.18797,-.11191,1.056635,.151322,1.20124,-.083978,1.043566,.114337,1.208895,-.056089,1.028366,.076083,1.213344,-.028369,1.013074,.037735,1.21922,-534e-6,.999968,76e-6,182e-6,-404e-6,4.433519,2.216201,504e-6,-.001117,5.911693,2.216198,.002017,-.004469,5.919142,2.21619,.004536,-.010051,5.913172,2.21613,.008065,-.017867,5.911791,2.216145,.012467,-.027603,5.785357,2.216447,.018156,-.040159,5.901121,2.215958,.024758,-.05467,5.908781,2.215654,.032395,-.071352,5.906098,2.215283,.041108,-.090201,5.902558,2.214715,.050955,-.111004,5.895707,2.213905,.061968,-.134002,5.888736,2.212807,.074206,-.159038,5.880633,2.211303,.087742,-.185801,5.867001,2.209297,.102652,-.214368,5.851446,2.206657,.119006,-.244573,5.830722,2.203232,.136883,-.276067,5.802688,2.198778,.156335,-.30866,5.767185,2.193091,.177396,-.34194,5.719726,2.185858,.20007,-.375591,5.658792,2.176584,.224067,-.408564,5.573508,2.164759,.24942,-.440668,5.465696,2.149777,.275879,-.471138,5.332207,2.131225,.303307,-.499204,5.173339,2.108794,.331189,-.524547,4.985102,2.080585,.359932,-.547256,4.785788,2.047792,.389063,-.566479,4.569344,2.009518,.418725,-.583031,4.349557,1.965601,.448181,-.595809,4.121278,1.916911,.477703,-.605102,3.892291,1.86353,.507999,-.612462,3.676557,1.806286,.536889,-.615451,3.456241,1.745841,.565778,-.616029,3.249464,1.681137,.593863,-.613644,3.050273,1.615238,.62077,-.608268,2.859599,1.548003,.647171,-.601116,2.683287,1.480447,.673458,-.59284,2.524036,1.412084,.698064,-.581973,2.371046,1.34513,.721011,-.568963,2.229104,1.27844,.744293,-.555642,2.103213,1.212448,.766314,-.540934,1.98537,1.146287,.788164,-.525271,1.878842,1.0826,.809019,-.507986,1.779821,1.019978,.830947,-.489717,1.69163,.956931,.853732,-.469345,1.607513,.894207,.874904,-.447618,1.531176,.833436,.897289,-.426124,1.467302,.773611,.919226,-.404025,1.408321,.716016,.94086,-.381454,1.356209,.659515,.962764,-.358901,1.310082,.604629,.984322,-.335983,1.268485,.552335,1.005343,-.312533,1.230662,.501591,1.028153,-.289452,1.199168,.452032,1.049283,-.265754,1.168575,.404347,1.073687,-.242571,1.143533,.357445,1.097546,-.218681,1.119859,.312534,1.12334,-.194465,1.099634,.269437,1.148166,-.168797,1.081968,.228586,1.172518,-.141552,1.068789,.189866,1.19293,-.113325,1.057548,.152772,1.206816,-.0848,1.044145,.11539,1.215045,-.056019,1.028938,.076493,1.220048,-.027733,1.013338,.037767,1.225852,5e-5,.999927,-16e-5,178e-6,-422e-6,4.587902,2.372253,504e-6,-.001195,6.624675,2.372248,.002016,-.004782,6.626884,2.372187,.004531,-.010746,6.607379,2.372318,.008081,-.019161,6.640102,2.372084,.012637,-.029945,6.653708,2.372128,.018167,-.042999,6.623837,2.371902,.024769,-.058516,6.624484,2.371595,.032421,-.07637,6.620877,2.37112,.041164,-.096474,6.615235,2.370428,.051057,-.118786,6.607844,2.36944,.062136,-.14339,6.599216,2.368075,.07449,-.170034,6.588018,2.366218,.088179,-.198717,6.572526,2.363747,.103307,-.229147,6.551868,2.360517,.119964,-.261253,6.526089,2.356304,.138173,-.294703,6.489593,2.350797,.158072,-.329261,6.443573,2.343783,.179592,-.364298,6.379764,2.334673,.202709,-.399375,6.295845,2.323125,.227335,-.433616,6.184929,2.308547,.25323,-.466794,6.045905,2.28998,.2801,-.497509,5.871803,2.266964,.308146,-.525956,5.672422,2.239074,.336544,-.551101,5.443256,2.204809,.365223,-.572471,5.188034,2.164827,.395484,-.592088,4.943783,2.119489,.424416,-.606026,4.6664,2.067262,.455641,-.619671,4.418961,2.009937,.485298,-.627583,4.152737,1.9489,.514774,-.632072,3.893344,1.882692,.544172,-.634033,3.645332,1.814073,.573283,-.633239,3.414651,1.742717,.602155,-.630008,3.195712,1.669703,.63052,-.62455,2.994536,1.596021,.657121,-.615749,2.799373,1.522572,.682071,-.604738,2.616102,1.448978,.707605,-.593301,2.456112,1.37625,.731492,-.579628,2.303517,1.305297,.754139,-.564473,2.16534,1.235548,.776505,-.548787,2.041646,1.167051,.796833,-.531415,1.923334,1.100534,.817565,-.513778,1.818176,1.035144,.837981,-.495167,1.72383,.971583,.858513,-.47569,1.638448,.908841,.879892,-.454099,1.55942,.846701,.902258,-.432038,1.491471,.785332,.924114,-.409316,1.428878,.726409,.94423,-.385618,1.370785,.668588,.967001,-.362604,1.323529,.612943,.988579,-.339117,1.279679,.559038,1.01021,-.315355,1.240104,.506867,1.032084,-.291408,1.205261,.456934,1.054671,-.267387,1.175197,.407792,1.078314,-.243346,1.148153,.360992,1.102443,-.219205,1.123799,.315577,1.128524,-.194996,1.102624,.271742,1.153989,-.169897,1.085134,.230702,1.17942,-.14396,1.071699,.192146,1.200098,-.116173,1.060179,.155164,1.214837,-.086655,1.04629,.117071,1.222749,-.056956,1.03004,.07745,1.227273,-.027883,1.01365,.038092,1.233293,831e-6,1.000043,-462e-6,173e-6,-442e-6,4.741539,2.547922,504e-6,-.001284,7.491127,2.547919,.002014,-.005132,7.484889,2.547844,.004523,-.011521,7.439875,2.547587,.008059,-.020524,7.483694,2.547725,.012586,-.032029,7.470912,2.547685,.018081,-.045948,7.422534,2.547686,.024783,-.062844,7.487581,2.547107,.032451,-.082011,7.483603,2.546522,.041233,-.10354,7.475124,2.545684,.051181,-.127537,7.467521,2.544438,.062347,-.153921,7.456266,2.542744,.074829,-.182427,7.440422,2.540459,.088703,-.213134,7.420694,2.53738,.10408,-.24575,7.394875,2.533347,.12105,-.279941,7.358515,2.528069,.139697,-.315591,7.313001,2.521237,.160036,-.35198,7.246342,2.512378,.182147,-.388993,7.163688,2.500993,.205799,-.42557,7.048339,2.48645,.231091,-.461093,6.902586,2.468174,.257405,-.494668,6.712721,2.444774,.284956,-.525889,6.491261,2.415538,.31318,-.553693,6.232833,2.38061,.342327,-.578724,5.953834,2.338525,.371689,-.599706,5.649698,2.290256,.401919,-.617615,5.3479,2.235157,.432204,-.631632,5.036417,2.173932,.463151,-.643082,4.735976,2.107298,.493388,-.64997,4.432044,2.036121,.524128,-.654188,4.145472,1.961595,.55393,-.654671,3.866877,1.883602,.583856,-.653051,3.607848,1.804521,.611762,-.646994,3.356237,1.724047,.639117,-.63886,3.122531,1.643016,.666279,-.629093,2.913178,1.563932,.692936,-.617862,2.722675,1.484614,.716498,-.603279,2.536926,1.406734,.742273,-.589878,2.381054,1.331469,.764031,-.572744,2.228312,1.256796,.786601,-.555933,2.095451,1.18529,.807776,-.537992,1.972866,1.11594,.8284,-.519596,1.863394,1.048371,.847412,-.499847,1.76063,.982934,.86685,-.47992,1.670998,.919972,.88634,-.459434,1.587962,.8581,.906933,-.437767,1.515505,.796714,.92749,-.414068,1.448243,.736162,.950217,-.39091,1.390505,.677613,.971545,-.366964,1.337865,.620477,.992901,-.342603,1.291104,.565807,1.01546,-.318596,1.251138,.513086,1.037859,-.294242,1.214291,.461573,1.060535,-.269601,1.182517,.411838,1.086885,-.245608,1.1553,.363221,1.111237,-.220589,1.129715,.317174,1.138718,-.196008,1.108103,.273213,1.164223,-.170408,1.08964,.231968,1.187256,-.144205,1.074145,.192987,1.207851,-.116945,1.061615,.156118,1.222217,-.088852,1.047599,.118674,1.230315,-.059381,1.030869,.078993,1.235052,-.029145,1.014126,.038924,1.241359,479e-6,1.000114,-211e-6,169e-6,-465e-6,4.953966,2.747437,504e-6,-.001384,8.54453,2.74743,.002015,-.005537,8.545147,2.747339,.004542,-.012477,8.557734,2.747125,.008064,-.022143,8.530193,2.747341,.012543,-.034411,8.465151,2.747411,.018178,-.049792,8.543328,2.746874,.02481,-.067784,8.547247,2.746396,.032489,-.088416,8.537436,2.74573,.041313,-.11158,8.526655,2.744596,.051332,-.137462,8.517438,2.743082,.062603,-.16586,8.502803,2.74095,.07524,-.196548,8.481507,2.738057,.089341,-.22944,8.454287,2.734174,.105021,-.264395,8.420289,2.729086,.122399,-.30102,8.373503,2.72242,.141526,-.338997,8.309059,2.713686,.162451,-.377589,8.221539,2.702492,.185098,-.416349,8.100116,2.687893,.209406,-.454284,7.941704,2.669386,.235098,-.49045,7.733318,2.64559,.2621,-.524592,7.48612,2.615709,.290103,-.555558,7.193498,2.579231,.319135,-.583516,6.874796,2.534957,.348286,-.606714,6.516118,2.483017,.37884,-.62785,6.163912,2.424214,.409608,-.644715,5.801404,2.357563,.440553,-.657657,5.435955,2.285835,.470599,-.665621,5.063481,2.20794,.503172,-.673767,4.743532,2.12644,.533884,-.676009,4.413409,2.040694,.563808,-.674536,4.092169,1.953979,.591849,-.668913,3.787057,1.865897,.621474,-.663159,3.520578,1.777762,.6505,-.655018,3.275065,1.689902,.678011,-.643949,3.043141,1.603528,.70349,-.63003,2.827104,1.519484,.72825,-.61491,2.63262,1.436677,.752165,-.598649,2.45557,1.355753,.775894,-.581771,2.295932,1.278884,.79765,-.563193,2.152291,1.202767,.818505,-.54375,2.022099,1.130338,.838596,-.524017,1.903562,1.060263,.858396,-.504064,1.797204,.993077,.877088,-.483418,1.701208,.928606,.896606,-.462786,1.617736,.866039,.914342,-.440943,1.539227,.804293,.93355,-.419129,1.470383,.745206,.955237,-.3961,1.4091,.685832,.9767,-.371743,1.35493,.627953,.997681,-.346882,1.305249,.572127,1.020784,-.322391,1.262603,.517941,1.04384,-.297564,1.225115,.466188,1.067224,-.272639,1.190817,.415499,1.092358,-.247664,1.161265,.366782,1.117573,-.22226,1.133935,.319377,1.14573,-.196933,1.11175,.275293,1.170822,-.170577,1.091981,.233306,1.194559,-.143878,1.07581,.19395,1.214819,-.116347,1.062438,.156724,1.22983,-.088233,1.048092,.118984,1.238185,-.059408,1.031325,.079385,1.243527,-.030703,1.014698,.039893,1.249724,-.00152,.999819,76e-5,164e-6,-489e-6,5.157359,2.9763,505e-6,-.001502,9.891415,2.976286,.002016,-.006,9.85773,2.976197,.004543,-.013519,9.870651,2.975832,.008064,-.023985,9.85578,2.97617,.012611,-.037471,9.850209,2.975941,.018162,-.053866,9.827134,2.974968,.02482,-.07339,9.849955,2.97501,.032545,-.095758,9.842021,2.974073,.041418,-.120834,9.829989,2.9727,.051511,-.148861,9.817421,2.970736,.06292,-.179456,9.797347,2.968033,.075744,-.212674,9.771533,2.964371,.090131,-.248193,9.735924,2.959437,.106187,-.285748,9.687707,2.952881,.124035,-.325017,9.622684,2.944273,.143733,-.365463,9.531452,2.933093,.165262,-.406157,9.401732,2.918484,.188622,-.446833,9.232451,2.899529,.213693,-.486209,9.013432,2.875137,.239987,-.522925,8.725671,2.844166,.267796,-.557452,8.400028,2.805649,.296547,-.588266,8.023041,2.75872,.325838,-.614837,7.606773,2.702676,.355479,-.63676,7.16068,2.638483,.386984,-.65723,6.736765,2.566849,.418853,-.673592,6.313742,2.488091,.450302,-.684966,5.884479,2.402458,.481149,-.691591,5.455771,2.311816,.512177,-.695337,5.055698,2.21733,.543437,-.69637,4.681506,2.121285,.574309,-.694186,4.334716,2.02416,.604787,-.689158,4.008524,1.927738,.633483,-.68058,3.703505,1.830456,.660766,-.669088,3.418386,1.734934,.688471,-.656673,3.168101,1.642316,.715729,-.64282,2.941735,1.550744,.740435,-.626155,2.73057,1.463345,.764114,-.608299,2.537561,1.378151,.787028,-.589519,2.364323,1.29763,.807985,-.569257,2.20797,1.21783,.830663,-.550055,2.076646,1.142746,.850416,-.528812,1.948085,1.070757,.869609,-.507478,1.834684,1.001282,.888324,-.486131,1.734879,.934987,.907482,-.46491,1.645974,.871203,.924829,-.442742,1.56355,.80926,.942958,-.420777,1.491264,.750037,.961999,-.398842,1.428069,.691715,.981043,-.375967,1.369668,.635669,1.002371,-.351469,1.318588,.578689,1.025343,-.326601,1.273628,.524424,1.048511,-.301395,1.234572,.471403,1.072242,-.275835,1.198354,.41995,1.096758,-.2502,1.166392,.370733,1.122781,-.224474,1.138991,.322864,1.150871,-.198592,1.114313,.277723,1.177319,-.171805,1.093534,.23495,1.201765,-.144291,1.077462,.195376,1.222629,-.115949,1.063288,.157315,1.237334,-.08714,1.048366,.118843,1.246153,-.058094,1.031224,.079207,1.25257,-.029194,1.014695,.039376,1.25906,-418e-6,.999881,307e-6,159e-6,-515e-6,5.393984,3.241865,505e-6,-.001636,11.548038,3.241848,.002016,-.006534,11.50664,3.241718,.004537,-.014706,11.51346,3.241196,.008068,-.026134,11.510533,3.241693,.012573,-.040676,11.428978,3.24103,.018212,-.058794,11.510745,3.240924,.024847,-.079926,11.497339,3.240201,.032603,-.10416,11.484607,3.238994,.041543,-.131552,11.470801,3.237182,.051738,-.162012,11.453219,3.234635,.063313,-.19526,11.427244,3.231153,.076381,-.231205,11.388534,3.226361,.091096,-.269678,11.340406,3.219943,.1076,-.31017,11.270127,3.211448,.126017,-.352435,11.178583,3.200168,.146411,-.395551,11.046559,3.185328,.168663,-.438627,10.858624,3.165972,.19273,-.48066,10.606379,3.140735,.218497,-.520987,10.288093,3.108388,.245752,-.558483,9.90748,3.067586,.273993,-.59209,9.453246,3.016931,.303495,-.622416,8.966138,2.956444,.333717,-.648303,8.443776,2.885116,.363928,-.66864,7.894122,2.805963,.39624,-.687748,7.385728,2.718338,.427161,-.699903,6.838511,2.622346,.460175,-.71121,6.356371,2.522476,.492593,-.717734,5.878312,2.417984,.524449,-.719956,5.423285,2.310941,.55601,-.719127,4.997909,2.201885,.587032,-.715077,4.600426,2.09333,.61703,-.707574,4.235885,1.986585,.644684,-.695781,3.881712,1.881279,.674483,-.685313,3.59096,1.777918,.70029,-.669619,3.303138,1.678004,.727892,-.654728,3.057771,1.581162,.751694,-.635727,2.826642,1.487769,.776271,-.617343,2.622178,1.399628,.799502,-.597683,2.441265,1.313195,.821768,-.57709,2.276954,1.232316,.84196,-.555165,2.125744,1.153914,.861582,-.532983,1.991236,1.079598,.88146,-.510933,1.874027,1.008883,.899952,-.488321,1.766812,.940802,.918954,-.466405,1.673436,.875653,.93613,-.443623,1.586986,.81313,.954799,-.421532,1.513558,.752241,.972435,-.398897,1.445787,.694711,.990147,-.376302,1.384382,.63877,1.009189,-.353623,1.331934,.583826,1.029687,-.330635,1.284478,.530476,1.052604,-.305698,1.243632,.477187,1.076524,-.279917,1.204997,.425349,1.101701,-.253951,1.17175,.375165,1.127264,-.227541,1.142519,.326869,1.156397,-.201265,1.116817,.280912,1.18302,-.173943,1.095289,.237447,1.208448,-.14586,1.078296,.196694,1.230417,-.116901,1.064416,.158409,1.248617,-.087507,1.050504,.119483,1.25731,-.057353,1.032796,.079092,1.263076,-.027785,1.015128,.038883,1.26987,.001331,.999935,-557e-6,154e-6,-549e-6,5.705205,3.554136,506e-6,-.001797,13.703335,3.554133,.002014,-.007156,13.614074,3.553937,.004544,-.016145,13.657344,3.553096,.00807,-.028652,13.627997,3.553894,.012584,-.044617,13.606235,3.554,.01818,-.064288,13.581339,3.549637,.024887,-.087627,13.608851,3.552006,.03269,-.114134,13.599099,3.550341,.041705,-.144154,13.579829,3.547982,.052035,-.1774,13.552845,3.544641,.06381,-.213813,13.515619,3.539941,.077171,-.252978,13.46046,3.533696,.092329,-.294852,13.393559,3.524977,.10939,-.338688,13.292376,3.513655,.128455,-.384018,13.147332,3.498484,.149661,-.42996,12.945774,3.478323,.172694,-.475024,12.658979,3.451862,.19765,-.518614,12.289564,3.417602,.224156,-.559298,11.828307,3.372913,.252008,-.59611,11.285162,3.317454,.281165,-.629292,10.684922,3.251171,.311434,-.658379,10.052939,3.172222,.342741,-.683455,9.405296,3.082825,.373543,-.701674,8.716078,2.983976,.407008,-.719664,8.108425,2.876244,.438623,-.729882,7.461252,2.763279,.471872,-.738696,6.880182,2.64559,.5047,-.743136,6.324308,2.52468,.537118,-.743676,5.808302,2.402723,.569412,-.741181,5.332306,2.281437,.598202,-.732348,4.857402,2.161401,.62964,-.724832,4.465554,2.043872,.659239,-.713435,4.093661,1.930129,.686547,-.698539,3.752593,1.817654,.715529,-.684471,3.457593,1.712567,.739456,-.664983,3.17122,1.610687,.764892,-.646322,2.929674,1.512031,.789301,-.626393,2.710719,1.419033,.809881,-.603498,2.506139,1.330115,.833385,-.582934,2.336089,1.245859,.854254,-.560419,2.17847,1.165042,.873964,-.537294,2.040087,1.086633,.893433,-.514264,1.911969,1.015028,.911756,-.490657,1.79984,.944938,.930894,-.467601,1.703188,.878743,.948078,-.444043,1.612092,.815356,.966162,-.421155,1.534444,.753883,.984166,-.398238,1.462397,.695534,1.002184,-.375278,1.400793,.638806,1.019669,-.352159,1.344172,.584549,1.039571,-.329651,1.295227,.53166,1.059989,-.306804,1.251281,.480529,1.081116,-.283345,1.211504,.430071,1.105742,-.258568,1.1764,.380277,1.13308,-.232146,1.144519,.331076,1.161888,-.205244,1.118059,.28404,1.192408,-.177932,1.097561,.239958,1.221043,-.149532,1.082021,.198751,1.244141,-.120046,1.067634,.160114,1.259465,-.089542,1.051626,.121101,1.268124,-.058593,1.033296,.079898,1.27433,-.028011,1.015382,.039038,1.28159,.00233,1.000087,-.001259,149e-6,-587e-6,6.059834,3.927143,507e-6,-.001992,16.5604,3.927149,.002014,-.00791,16.406326,3.926821,.004549,-.017856,16.545532,3.927027,.008064,-.031632,16.375853,3.925487,.01245,-.048749,15.928564,3.928272,.01803,-.070371,16.072989,3.917862,.024964,-.096897,16.458925,3.924489,.032807,-.126073,16.377851,3.921896,.041917,-.159205,16.351561,3.91886,.052416,-.195762,16.307037,3.914339,.064464,-.235784,16.255514,3.907954,.078225,-.278812,16.176226,3.899254,.0939,-.324457,16.06653,3.887455,.111657,-.372174,15.913818,3.871777,.131478,-.42053,15.669197,3.850776,.153574,-.46933,15.355453,3.822348,.177505,-.516029,14.908978,3.785168,.203383,-.560585,14.352687,3.736602,.230569,-.600607,13.666022,3.675046,.259188,-.636296,12.900244,3.599811,.289272,-.668312,12.111226,3.51055,.32049,-.695986,11.292102,3.408535,.353031,-.719848,10.493485,3.295667,.385228,-.737073,9.661955,3.171998,.419219,-.752419,8.909942,3.042428,.452096,-.761179,8.155107,2.907108,.484909,-.766166,7.450609,2.769858,.518306,-.768596,6.811866,2.631935,.550067,-.765683,6.205275,2.49287,.582562,-.761197,5.663215,2.358645,.61445,-.753834,5.165358,2.227377,.644563,-.74286,4.712554,2.097547,.673658,-.729294,4.306101,1.97492,.702857,-.714839,3.943352,1.857613,.72935,-.696774,3.609432,1.743601,.754958,-.677394,3.308389,1.636607,.779575,-.657018,3.043803,1.533841,.800491,-.633342,2.793592,1.437092,.82503,-.612471,2.590307,1.344272,.847535,-.589882,2.406477,1.256436,.865979,-.56485,2.231999,1.173938,.886254,-.541357,2.083556,1.094722,.905566,-.517353,1.950928,1.021107,.924607,-.49332,1.835979,.948941,.943365,-.469366,1.731417,.88106,.960405,-.444745,1.635838,.816479,.977893,-.420493,1.552981,.754604,.996573,-.39715,1.481595,.694917,1.014,-.373483,1.41407,.638445,1.031807,-.349985,1.356031,.584035,1.051877,-.327062,1.305041,.53001,1.071701,-.304134,1.258836,.479439,1.093109,-.280962,1.217297,.429763,1.116681,-.258121,1.182063,.38105,1.143886,-.235365,1.150039,.333395,1.175163,-.211621,1.125074,.287477,1.203675,-.184061,1.102339,.243301,1.230477,-.154815,1.083927,.201826,1.253134,-.124513,1.067989,.162271,1.270092,-.093383,1.052032,.122855,1.279576,-.06177,1.033685,.081639,1.286472,-.030317,1.015583,.040411,1.294476,964e-6,1.000206,-454e-6,144e-6,-63e-5,6.467978,4.381146,504e-6,-.002208,20.193617,4.381151,.002017,-.008834,20.206446,4.380687,.004536,-.019864,20.183254,4.38055,.008174,-.035759,20.564249,4.381247,.012608,-.055034,20.111612,4.38239,.018198,-.079119,20.106096,4.379815,.025057,-.108067,20.215635,4.376874,.032962,-.14063,20.153549,4.374143,.042199,-.17735,20.084061,4.369558,.052928,-.218094,20.026609,4.363287,.065327,-.262407,19.940054,4.354386,.079568,-.309833,19.806814,4.342127,.095961,-.360074,19.641878,4.325533,.114516,-.411747,19.370914,4.30295,.135349,-.463726,18.9839,4.271991,.158293,-.514211,18.433926,4.230856,.183348,-.562511,17.733471,4.17625,.209959,-.60631,16.864214,4.105895,.238736,-.646958,15.935207,4.020104,.268543,-.681574,14.890014,3.916094,.299996,-.712458,13.846786,3.798239,.33193,-.73713,12.758296,3.664191,.365222,-.758156,11.73294,3.521867,.399061,-.774364,10.741743,3.369831,.43348,-.786412,9.812527,3.212079,.467002,-.792373,8.91513,3.053715,.500754,-.79541,8.094276,2.894526,.534023,-.794617,7.342067,2.735959,.566988,-.790689,6.664186,2.58116,.59996,-.784433,6.052983,2.432318,.630599,-.773378,5.486277,2.28763,.660807,-.760334,4.982516,2.150183,.690103,-.74543,4.531104,2.017266,.717315,-.727511,4.120734,1.891699,.743819,-.708376,3.759599,1.77268,.770147,-.688632,3.441912,1.66062,.79351,-.665931,3.1526,1.553166,.816535,-.643045,2.898883,1.45208,.839163,-.619917,2.674488,1.355544,.859066,-.594923,2.469262,1.267232,.879489,-.570343,2.292209,1.181702,.898525,-.544975,2.131086,1.102089,.918359,-.520585,1.994526,1.024744,.937502,-.496044,1.873079,.951712,.955573,-.47101,1.761232,.883374,.972957,-.445712,1.661604,.818008,.991248,-.421201,1.577169,.754446,1.008997,-.396444,1.499653,.694518,1.028127,-.372362,1.43203,.637259,1.04571,-.347895,1.36987,.581515,1.065977,-.324409,1.317341,.527713,1.087469,-.301181,1.270447,.476281,1.109943,-.277866,1.228398,.426403,1.13444,-.254849,1.190986,.377822,1.160986,-.231754,1.157681,.33074,1.188458,-.207973,1.128665,.286014,1.214405,-.183424,1.103711,.2436,1.239504,-.157972,1.084253,.203686,1.262961,-.130607,1.068258,.165214,1.28034,-.099652,1.051919,.126067,1.292129,-.067363,1.034016,.084791,1.299876,-.035026,1.015775,.042786,1.308328,-.002944,.999963,.001385,138e-6,-681e-6,6.943771,4.946556,503e-6,-.002486,25.346689,4.946532,.002016,-.009973,25.49432,4.946311,.004539,-.02244,25.484949,4.945823,.008069,-.039836,25.420902,4.945311,.012628,-.062172,25.394403,4.945041,.018294,-.089609,25.440279,4.943295,.025079,-.121584,25.399988,4.939368,.033142,-.158595,25.356537,4.9362,.042596,-.199971,25.295067,4.929842,.053628,-.245624,25.196465,4.920586,.066496,-.29524,25.055311,4.9077,.081434,-.348006,24.84617,4.889647,.09864,-.403167,24.527803,4.86468,.118231,-.459106,24.051735,4.830574,.140139,-.513907,23.352467,4.78353,.164198,-.565953,22.418245,4.72053,.190502,-.614858,21.324049,4.638075,.21853,-.658304,20.038671,4.535464,.248094,-.696133,18.639786,4.411646,.279435,-.729388,17.234526,4.268872,.312002,-.757534,15.830426,4.109603,.346173,-.781866,14.495901,3.938782,.379435,-.797579,13.136444,3.756138,.414945,-.812334,11.946491,3.571258,.449991,-.821119,10.811908,3.384217,.484636,-.825066,9.763482,3.198076,.518675,-.824728,8.796811,3.015808,.552559,-.82171,7.932528,2.836886,.587272,-.817478,7.185156,2.664995,.61696,-.804441,6.445302,2.502223,.648054,-.792063,5.818812,2.345851,.678575,-.777793,5.264731,2.19715,.707287,-.760476,4.766033,2.056042,.735851,-.742541,4.335871,1.922805,.760594,-.720503,3.928021,1.798585,.784534,-.697719,3.579153,1.680605,.811029,-.677036,3.285307,1.568942,.831809,-.651479,3.001423,1.465496,.854364,-.627376,2.760672,1.367849,.872639,-.600496,2.540697,1.275644,.894296,-.576297,2.355273,1.188638,.913123,-.550377,2.188563,1.105652,.932025,-.52464,2.040739,1.028614,.949876,-.498402,1.910315,.954421,.968933,-.47322,1.79575,.884061,.985366,-.447086,1.690336,.817765,1.00494,-.422394,1.599626,.753295,1.022217,-.396726,1.519055,.69338,1.04149,-.371854,1.448745,.635747,1.05992,-.346769,1.384292,.579508,1.080408,-.322343,1.328798,.525045,1.101632,-.297979,1.279898,.473773,1.124812,-.274059,1.234005,.422949,1.148503,-.249954,1.195373,.374609,1.174554,-.225988,1.160362,.32735,1.202931,-.201932,1.131307,.283494,1.229335,-.176886,1.105885,.241092,1.254254,-.151225,1.085802,.201514,1.275743,-.124282,1.068524,.162866,1.292929,-.097122,1.051493,.124991,1.305805,-.068939,1.03389,.085521,1.314991,-.040082,1.015927,.045247,1.324033,-.009923,.999893,.004738,131e-6,-745e-6,7.562414,5.671075,473e-6,-.002681,27.216688,5.670949,.002021,-.011462,32.962402,5.670177,.00454,-.025728,33.183949,5.670197,.008087,-.045746,33.185688,5.667313,.012673,-.071427,33.170441,5.668396,.018358,-.102673,33.145138,5.665252,.025299,-.13978,33.303326,5.653404,.033469,-.181718,33.107243,5.652829,.043139,-.228698,32.859524,5.645676,.054622,-.280648,32.694893,5.631547,.068115,-.336524,32.422569,5.611561,.083957,-.395671,32.035511,5.583449,.102259,-.456164,31.415047,5.543651,.123021,-.515765,30.47044,5.488278,.146127,-.572309,29.186451,5.413118,.171749,-.62571,27.653852,5.312369,.199549,-.673853,25.902435,5.185774,.229188,-.715905,23.978609,5.030582,.260421,-.751533,21.999035,4.853484,.293421,-.782309,20.087366,4.656137,.327077,-.806332,18.186535,4.443975,.361892,-.825818,16.418409,4.223844,.397146,-.840019,14.774344,3.998959,.434169,-.852434,13.321097,3.775443,.469288,-.856632,11.929448,3.552818,.504319,-.85713,10.675201,3.338825,.540067,-.855903,9.5919,3.130547,.575404,-.851565,8.607655,2.93293,.606782,-.839818,7.69056,2.743876,.63866,-.827508,6.900781,2.565115,.670577,-.814154,6.216821,2.395215,.696718,-.793162,5.551886,2.238233,.72599,-.775291,5.015406,2.090264,.75414,-.755758,4.546843,1.950834,.775992,-.729824,4.094254,1.820582,.80299,-.708909,3.732984,1.699191,.828291,-.686483,3.413194,1.583805,.847406,-.659162,3.103861,1.478093,.864951,-.631051,2.832976,1.378496,.887154,-.60659,2.616645,1.282127,.906337,-.580124,2.413988,1.194643,.927184,-.554835,2.24438,1.110354,.94381,-.527583,2.081964,1.031996,.96363,-.502243,1.948979,.956718,.979691,-.475006,1.822701,.886957,.99769,-.448815,1.715714,.819006,1.01646,-.423044,1.621868,.754892,1.035485,-.397637,1.539537,.693707,1.053165,-.371775,1.462285,.634867,1.072394,-.346372,1.396193,.578574,1.093397,-.321291,1.338344,.524341,1.115194,-.296102,1.287594,.472059,1.137943,-.271023,1.240495,.421674,1.164163,-.246367,1.201224,.371963,1.191457,-.221414,1.164472,.32504,1.220253,-.196228,1.134325,.280343,1.245456,-.169991,1.108214,.238098,1.270647,-.143314,1.087277,.197886,1.292124,-.115881,1.069397,.15956,1.309091,-.087816,1.051426,.120547,1.32113,-.059301,1.032904,.080834,1.332484,-.030912,1.015767,.040933,1.342834,-.002172,.999591,.001185,125e-6,-83e-5,8.392562,6.634228,443e-6,-.002936,29.687805,6.634032,.002016,-.013374,45.025234,6.633008,.00454,-.030089,45.020294,6.633056,.008092,-.053499,45.066029,6.626466,.01271,-.08361,44.810101,6.63033,.018485,-.12026,45.216747,6.614516,.025134,-.161031,44.674168,6.600349,.033897,-.212161,44.819195,6.610186,.043978,-.266661,44.450245,6.593605,.056094,-.326582,44.134544,6.570142,.070528,-.390342,43.591648,6.536712,.087498,-.456162,42.70816,6.488329,.107138,-.521609,41.365093,6.420198,.129461,-.584225,39.525822,6.323702,.154245,-.641931,37.186111,6.193606,.181228,-.692829,34.47847,6.026897,.210711,-.73844,31.680904,5.825769,.242181,-.777397,28.828054,5.595428,.275337,-.80998,26.042755,5.342321,.309698,-.83599,23.376804,5.073076,.345702,-.858077,20.965754,4.794572,.382135,-.874122,18.710079,4.516676,.419871,-.887133,16.713011,4.241767,.455609,-.891199,14.819674,3.972124,.492617,-.894082,13.187921,3.717271,.528186,-.89127,11.708584,3.471719,.563462,-.885719,10.422834,3.23776,.596013,-.874241,9.237741,3.01906,.629455,-.862814,8.248549,2.813572,.66111,-.848126,7.358398,2.621046,.690314,-.829798,6.569392,2.441627,.720589,-.812314,5.905934,2.274629,.745631,-.788704,5.2768,2.119423,.771488,-.766133,4.752773,1.97438,.798704,-.744726,4.306095,1.839482,.820172,-.718062,3.889792,1.713244,.844368,-.693972,3.545456,1.594809,.863128,-.665748,3.212762,1.487512,.880094,-.637003,2.926572,1.386724,.904252,-.613728,2.70426,1.288131,.920506,-.585217,2.483164,1.199845,.940919,-.559603,2.300348,1.114958,.957044,-.531597,2.130516,1.034754,.972648,-.503583,1.979313,.960912,.994318,-.478813,1.859664,.889786,1.008754,-.450943,1.742705,.820833,1.028667,-.425516,1.64522,.756332,1.046145,-.398977,1.557184,.693921,1.067212,-.373657,1.480814,.635955,1.084111,-.346657,1.408762,.578832,1.106749,-.321392,1.350468,.523561,1.12844,-.295773,1.294865,.471146,1.151073,-.270028,1.246118,.420298,1.178601,-.244816,1.204226,.370575,1.206845,-.219027,1.166896,.323716,1.235963,-.192622,1.135756,.278058,1.26303,-.165331,1.10924,.235743,1.288937,-.137489,1.088379,.19539,1.310681,-.108685,1.068987,.156439,1.334352,-.07971,1.054273,.117096,1.344847,-.049947,1.034598,.076554,1.354943,-.020272,1.016079,.035585,1.365515,.00917,.999969,-.004771,117e-6,-935e-6,9.424866,7.979243,41e-5,-.003275,33.013195,7.979422,.002009,-.016024,64.370331,7.977156,.004541,-.036176,64.655952,7.976128,.008109,-.064384,64.864494,7.964988,.012694,-.099984,64.487198,7.971348,.018554,-.143991,64.63797,7.923116,.025303,-.19204,61.930538,7.953975,.035297,-.259442,66.274422,7.921861,.045226,-.31837,63.33469,7.909609,.05837,-.388821,62.686401,7.864696,.074083,-.461667,61.332054,7.801843,.092537,-.533744,59.125607,7.708949,.113781,-.601905,55.997845,7.575799,.137786,-.664409,52.177567,7.393524,.16477,-.721193,48.019485,7.161756,.193894,-.768842,43.460278,6.882018,.225586,-.810332,39.08659,6.564607,.259311,-.845096,34.896049,6.221983,.294517,-.872849,30.952213,5.865831,.331163,-.895159,27.375792,5.507064,.368964,-.91286,24.21331,5.149763,.407255,-.925338,21.364958,4.806172,.444704,-.930956,18.791691,4.472272,.482041,-.932576,16.52116,4.160864,.519572,-.931547,14.589918,3.865206,.556236,-.926554,12.887797,3.590445,.590431,-.915839,11.352402,3.332747,.622723,-.901266,10.00266,3.093264,.657029,-.888747,8.90521,2.873842,.686164,-.868666,7.876704,2.66674,.719168,-.853152,7.051816,2.479017,.742294,-.826169,6.226034,2.306498,.77032,-.804936,5.590831,2.141328,.792337,-.777772,4.984083,1.994663,.81905,-.755478,4.507655,1.85395,.837684,-.726072,4.049884,1.72559,.861324,-.701424,3.678201,1.606303,.880741,-.673615,3.337163,1.495452,.903335,-.648506,3.05572,1.391162,.920311,-.61964,2.792068,1.294734,.935769,-.590245,2.554566,1.204518,.956592,-.564944,2.366468,1.11863,.972424,-.536842,2.187863,1.038323,.986269,-.50802,2.02348,.963803,1.006122,-.482411,1.895137,.890986,1.022504,-.45511,1.775886,.820936,1.037905,-.42745,1.665951,.758556,1.059281,-.402198,1.577363,.696126,1.076613,-.375156,1.493391,.636676,1.097828,-.349577,1.421129,.579947,1.116671,-.322955,1.355205,.52514,1.140514,-.297406,1.299979,.47146,1.166473,-.271786,1.249847,.420473,1.192591,-.245461,1.204625,.371118,1.223349,-.219412,1.166686,.3226,1.254833,-.19266,1.134121,.277572,1.285808,-.165167,1.108617,.234417,1.322015,-.137236,1.093841,.19464,1.342172,-.106871,1.074616,.155001,1.357238,-.075759,1.05355,.114648,1.367725,-.044279,1.033851,.073254,1.379461,-.013001,1.015713,.031895,1.391625,.018075,1.000203,-.009397,109e-6,-.001093,10.98682,9.992467,378e-6,-.003779,37.989063,9.992861,.002028,-.020252,101.850441,9.988345,.004557,-.045429,101.10675,9.983879,.008115,-.080453,100.646606,9.953411,.012864,-.125836,101.366592,9.943727,.018734,-.17935,100.786118,9.908408,.026314,-.24368,99.779343,9.821631,.0355,-.313552,98.608231,9.78245,.047562,-.394644,97.689568,9.845875,.062065,-.476697,95.177795,9.755218,.079552,-.557933,91.095581,9.615121,.099905,-.632818,85.110382,9.408299,.123231,-.699926,77.948921,9.120996,.14998,-.760671,70.491119,8.764173,.17955,-.812251,62.821407,8.341752,.211839,-.855909,55.51289,7.876337,.246434,-.892023,48.744549,7.386268,.282317,-.9192,42.462059,6.886009,.31958,-.940333,36.901031,6.400318,.360135,-.962176,32.353752,5.937503,.397805,-.969755,27.996445,5.489783,.437077,-.976494,24.359192,5.072855,.474388,-.975265,21.1243,4.684682,.513695,-.975335,18.476677,4.326597,.551542,-.970264,16.167391,3.999049,.587525,-.960365,14.143442,3.696317,.621251,-.945944,12.374341,3.414176,.654738,-.930709,10.877112,3.160455,.685794,-.911702,9.580887,2.921461,.717135,-.892948,8.481939,2.707478,.740798,-.865086,7.435941,2.510382,.77092,-.845137,6.650625,2.329648,.792303,-.815956,5.879976,2.163206,.818363,-.792225,5.274404,2.008042,.837362,-.762396,4.70096,1.867576,.862266,-.738465,4.254798,1.735819,.880069,-.70889,3.828697,1.61469,.896021,-.678588,3.451655,1.503477,.920156,-.654832,3.168722,1.3958,.934948,-.62474,2.879533,1.299955,.949686,-.595203,2.628258,1.208597,.970989,-.570041,2.433689,1.12231,.985606,-.541116,2.241461,1.042168,1.000819,-.512835,2.075567,.966543,1.012209,-.483024,1.919932,.895758,1.03532,-.459125,1.807884,.825668,1.052077,-.432333,1.695689,.760812,1.070459,-.406131,1.595491,.699897,1.088704,-.379721,1.508512,.640575,1.103817,-.352104,1.428159,.583765,1.131711,-.328122,1.366565,.52824,1.156448,-.302568,1.306843,.473988,1.181821,-.276487,1.252861,.422189,1.211347,-.25054,1.205265,.372005,1.243636,-.224264,1.165943,.324184,1.283038,-.198289,1.137772,.278419,1.316722,-.170179,1.115057,.235425,1.342715,-.140095,1.092994,.195084,1.363288,-.108794,1.071875,.155439,1.380656,-.076774,1.052475,.114636,1.394826,-.044509,1.032525,.07289,1.40883,-.011968,1.015459,.031101,1.42237,.020555,.999808,-.011002,1e-4,-.001334,13.377127,13.342275,342e-6,-.004563,45.758434,13.34271,.002026,-.027004,179.672058,13.331846,.004559,-.060563,179.294235,13.314877,.008232,-.108154,181.242035,13.222856,.013031,-.16759,179.684509,13.15386,.019526,-.242041,181.004608,12.986094,.026364,-.309289,159.606293,13.247752,.03767,-.409755,179.468521,12.368877,.051804,-.512051,167.955582,12.981333,.068214,-.601994,156.278793,12.704532,.088295,-.686849,143.096878,12.316531,.111478,-.75867,127.423111,11.793048,.138336,-.821348,111.763031,11.157992,.168447,-.873616,96.887924,10.447472,.201411,-.916322,83.225327,9.696606,.237443,-.95309,71.403137,8.949244,.274234,-.977751,60.739277,8.225874,.314566,-1.003135,52.115578,7.547433,.353932,-1.016312,44.341869,6.910326,.393858,-1.024848,37.827263,6.324401,.433805,-1.02895,32.380932,5.790555,.475812,-1.034084,27.955982,5.312826,.513254,-1.026743,23.977417,4.866118,.549965,-1.01674,20.628025,4.468437,.5903,-1.01203,18.036856,4.105483,.62642,-.998919,15.669224,3.780593,.658897,-.979874,13.603898,3.482054,.687252,-.955238,11.788331,3.211213,.718941,-.935663,10.355552,2.962083,.749877,-.915206,9.131123,2.741382,.772094,-.884837,7.973935,2.536501,.799495,-.861214,7.08623,2.347282,.820136,-.830976,6.240769,2.179332,.846715,-.807408,5.604792,2.018005,.865176,-.776657,4.975034,1.877021,.8811,-.744657,4.442767,1.743528,.907637,-.722088,4.035177,1.621563,.922239,-.690432,3.63316,1.506158,.936558,-.65965,3.281798,1.403606,.950047,-.629105,2.974179,1.304276,.961959,-.598277,2.704483,1.213888,.98741,-.576085,2.510453,1.125569,.999996,-.546494,2.304016,1.045567,1.014127,-.518186,2.127867,.970718,1.036275,-.494009,1.985804,.897557,1.049695,-.465659,1.845074,.830584,1.064617,-.438159,1.72513,.766083,1.077131,-.409813,1.613818,.705101,1.101054,-.385632,1.528694,.644828,1.122361,-.360045,1.447086,.587878,1.147359,-.335186,1.377588,.53213,1.169881,-.30904,1.313673,.478843,1.200554,-.28459,1.257256,.426855,1.232047,-.259332,1.208431,.376125,1.275402,-.235215,1.174692,.326614,1.306595,-.207508,1.141042,.281524,1.334304,-.17829,1.111778,.238694,1.364678,-.14853,1.090976,.198549,1.387168,-.117114,1.069308,.158529,1.408657,-.084977,1.050625,.118042,1.426214,-.052052,1.031444,.076541,1.444257,-.018653,1.014298,.034061,1.460618,.015206,.999413,-.008132,1e-4,-.002003,20.052612,20.032721,297e-6,-.005947,59.540512,20.033842,.002022,-.040439,404.848511,20.032743,.004588,-.090999,403.741241,19.910591,.008769,-.169802,441.471558,19.572552,.013708,-.253629,411.667816,19.145721,.020331,-.349396,371.322571,18.591049,.030259,-.468121,385.816498,18.331083,.04519,-.611444,391.924133,15.807686,.058476,-.676875,319.638641,16.947781,.079894,-.781421,278.80426,17.512903,.103871,-.855116,235.999786,16.290295,.131756,-.915747,197.168076,14.956566,.163487,-.966333,163.452347,13.60801,.198693,-1.008386,135.632706,12.299661,.236157,-1.039862,111.919281,11.08879,.274579,-1.059988,92.136581,9.983883,.317164,-1.084069,77.063034,9.008505,.357624,-1.092124,63.963051,8.127298,.399009,-1.09756,53.483341,7.347628,.441182,-1.100981,45.052429,6.658191,.481606,-1.097318,37.93264,6.047333,.524253,-1.09657,32.395638,5.505878,.564351,-1.088739,27.67938,5.018494,.600843,-1.073396,23.611519,4.58077,.635527,-1.055024,20.207081,4.194785,.672045,-1.039775,17.469036,3.847436,.698372,-1.009545,14.928226,3.532546,.729336,-.987168,12.95317,3.248834,.761147,-.966299,11.346271,2.994166,.78227,-.932841,9.813129,2.762244,.811832,-.910431,8.672224,2.549933,.832053,-.878369,7.578633,2.363132,.849383,-.844673,6.648379,2.189266,.86602,-.811703,5.850784,2.031716,.893083,-.789181,5.273372,1.88448,.909212,-.757541,4.700618,1.750298,.923169,-.725157,4.19664,1.62759,.937112,-.693769,3.764841,1.514906,.961901,-.670828,3.444598,1.406839,.975245,-.64024,3.120745,1.307873,.989696,-.611032,2.840732,1.216417,1.002057,-.581144,2.591596,1.132553,1.014022,-.55162,2.37382,1.051695,1.025307,-.522268,2.177992,.9775,1.05219,-.500826,2.042511,.904301,1.064408,-.472355,1.891934,.837557,1.077876,-.444815,1.761054,.773004,1.088939,-.416531,1.638939,.713958,1.118551,-.395057,1.555724,.652485,1.134469,-.368289,1.46549,.59633,1.162778,-.345095,1.390977,.539703,1.185298,-.319527,1.321225,.48625,1.208419,-.29359,1.259318,.434178,1.261013,-.273471,1.219767,.382032,1.297811,-.248226,1.176422,.33419,1.326591,-.220354,1.139881,.289075,1.357918,-.191937,1.111418,.246259,1.38759,-.162282,1.086511,.205129,1.415797,-.131515,1.067072,.165601,1.440194,-.099555,1.047799,.125462,1.4656,-.066957,1.030406,.084082,1.487714,-.033496,1.013889,.041981,1.509947,663e-6,.998773,-485e-6,1e-4,-.004009,40.102047,40.087105,228e-6,-.009141,91.431366,40.074432,.001522,-.060544,605.651733,39.918827,.004919,-.188871,1712.9823,38.873421,.009053,-.320325,1583.453125,39.715633,.015375,-.471415,1486.033691,39.162876,.029306,-.735111,1751.70105,28.0832,.04345,-.859759,1392.47522,24.599945,.079075,-1.220033,1629.972656,18.507019,.09013,-1.091255,940.347351,17.961655,.098008,-.945965,425.901093,24.47801,.138246,-1.084105,416.823944,20.003433,.174489,-1.133148,302.730042,18.550846,.207969,-1.138483,242.853577,15.923334,.249132,-1.168197,191.649445,13.940813,.291391,-1.187038,152.910309,12.263267,.332856,-1.192793,121.905075,10.822873,.377473,-1.202846,99.145561,9.618412,.422601,-1.208871,81.343315,8.591735,.465276,-1.204545,66.742569,7.692911,.50471,-1.190839,54.787876,6.915612,.544909,-1.178827,45.507313,6.242786,.582125,-1.16059,37.819912,5.65169,.620694,-1.145481,31.926588,5.12366,.659127,-1.130178,27.14731,4.669475,.684358,-1.093728,22.650702,4.258717,.719453,-1.074591,19.454103,3.901225,.751695,-1.051678,16.735672,3.57687,.775082,-1.017716,14.281039,3.287471,.796233,-.982759,12.261332,3.023708,.827404,-.961227,10.767912,2.78774,.848149,-.928433,9.37135,2.570737,.864891,-.892838,8.142364,2.379204,.880979,-.858193,7.118954,2.20447,.910434,-.837281,6.389041,2.041554,.925396,-.803638,5.643217,1.893353,.942463,-.772925,5.031223,1.757331,.955217,-.73972,4.486978,1.633572,.96857,-.708048,4.014621,1.520414,.981672,-.677109,3.617768,1.412506,.992829,-.645712,3.258773,1.317079,1.02127,-.625746,3.00664,1.222611,1.031247,-.594628,2.733073,1.137911,1.043581,-.56554,2.498495,1.058439,1.05593,-.536962,2.289843,.984428,1.066727,-.508076,2.108603,.912794,1.081225,-.481297,1.951454,.845536,1.088198,-.451563,1.801891,.782718,1.123316,-.433247,1.704316,.721664,1.133206,-.404812,1.586153,.662761,1.152889,-.379901,1.490958,.606866,1.188158,-.359421,1.41573,.550666,1.217064,-.336049,1.344172,.496748,1.257727,-.314816,1.283196,.443538,1.286647,-.28953,1.225903,.394018,1.308729,-.262053,1.173928,.346255,1.351453,-.237704,1.139992,.300393,1.380284,-.209733,1.105997,.256661,1.414621,-.181613,1.082109,.215429,1.453045,-.152797,1.063853,.177098,1.481066,-.121803,1.043185,.137203,1.514113,-.09025,1.027072,.096998,1.547317,-.057603,1.012551,.055328,1.577983,-.023799,.999267,.013094,108e-6,-.12497,1249.704346,1249.703491,14e-5,-.119585,1195.855469,1195.85437,.003995,-.927433,9274.246094,232.443573,.012013,-1.13158,11315.999023,98.211105,.023892,-1.216018,12162.739258,67.2145,.047506,-1.517865,15186.294922,42.410069,.082523,-1.812564,18145.71875,24.421545,.112452,-1.805072,11112.966797,18.450365,.16446,-2.016784,8086.032715,14.043465,.19587,-1.898199,4245.658203,13.178202,.197797,-1.556158,1315.561768,30.760096,.21954,-1.433455,802.380371,25.037956,.268696,-1.483235,579.715515,20.975695,.265968,-1.261051,386.583649,12.017023,.325369,-1.343349,316.795959,12.612406,.387968,-1.411606,232.491623,13.29694,.435543,-1.411236,181.515228,11.646996,.482729,-1.405722,143.425354,10.265131,.531742,-1.402782,114.920082,9.114828,.559383,-1.346165,88.589005,8.089214,.607851,-1.342407,73.05661,7.249064,.656928,-1.338238,60.826897,6.531094,.681212,-1.285692,48.727219,5.868711,.729238,-1.279951,41.256016,5.324553,.751172,-1.230045,33.72826,4.816513,.773107,-1.184288,27.913816,4.377203,.815726,-1.171653,24.065962,3.999965,.837886,-1.130636,20.25486,3.658493,.857674,-1.089071,17.138168,3.34793,.87612,-1.048303,14.572968,3.072666,.893935,-1.00904,12.496377,2.825165,.927998,-.989064,11.040731,2.60552,.928445,-.935017,9.365102,2.401481,.945279,-.899993,8.177711,2.222282,.959378,-.863854,7.155303,2.059342,.971761,-.827684,6.284632,1.909314,.987812,-.795878,5.583837,1.771094,1.001958,-.76354,4.962345,1.645968,1.014357,-.730897,4.435898,1.527438,1.025946,-.698675,3.973241,1.421337,1.036435,-.666662,3.568025,1.323677,1.046807,-.635466,3.218647,1.232678,1.052974,-.60266,2.902273,1.147675,1.086089,-.585364,2.694939,1.068352,1.09466,-.554784,2.454491,.993445,1.117131,-.5315,2.270746,.923758,1.114009,-.496581,2.063934,.858381,1.137328,-.473914,1.91799,.79498,1.158671,-.450127,1.786523,.735697,1.177878,-.425306,1.662454,.677498,1.20751,-.403797,1.559058,.621762,1.244496,-.383812,1.466801,.56619,1.240412,-.35108,1.366853,.514288,1.321257,-.3412,1.309808,.464621,1.336512,-.31271,1.241822,.413228,1.365047,-.286935,1.186612,.366092,1.418984,-.265184,1.15212,.321528,1.388864,-.22775,1.089937,.271827,1.464383,-.207168,1.077271,.232838,1.473125,-.17577,1.041835,.193289,1.542908,-.150424,1.036794,.156153,1.563005,-.118748,1.013029,.114866,1.637048,-.089604,1.013493,.076804,1.670777,-.056398,.999208,.032691],e.exports.mag=[1,1,1,1,1,1,1,1,1,1,1,1,.999995,.99999,.999971,.999937,.999853,.99967,.999138,.996746,.979578,.979309,.978836,.977972,.976223,.972205,.962466,.953919,.949829,.942492,.92987,.921319,.911112,.896015,.885105,.869971,.855017,.838328,.821241,.802352,.783873,.763309,.743058,.721929,.699755,.677721,.655456,.632681,.609629,.586831,.564287,.541772,.519428,.497353,.475624,.454606,.434099,.414085,.394605,.375698,.357386,.339871,.323085,.306905,1,1,1,1,1,1,1,1,.999999,.999999,.999998,.999995,.99999,.99998,.999959,.999923,.999842,.99966,.999119,.996613,.981824,.979298,.978826,.977957,.976184,.972091,.962188,.953875,.949746,.942335,.930166,.921211,.910927,.896979,.88494,.869864,.854835,.8382,.821049,.802552,.783659,.763512,.742927,.721715,.699938,.677775,.655246,.632555,.609805,.586996,.564225,.541606,.519346,.497419,.475863,.454738,.434099,.414003,.394547,.375747,.357564,.340012,.323099,.306861,1,1,1,1,1,1,1,1,1,.999999,.999998,.999995,.999991,.999979,.999959,.999917,.999839,.999648,.999074,.996168,.98377,.979279,.9788,.977905,.976058,.971727,.96212,.953901,.949485,.941859,.930911,.920853,.910394,.8976,.884427,.870101,.854522,.838325,.820754,.802707,.783223,.763605,.742872,.721565,.699935,.677726,.655242,.63258,.609766,.586946,.564275,.541759,.519467,.497478,.475886,.454794,.434233,.414207,.394751,.375892,.357683,.340146,.323287,.307095,1,1,1,1,1,1,1,.999999,.999999,.999998,.999996,.999992,.999987,.999975,.999953,.999913,.99983,.99963,.998993,.995279,.985142,.979252,.978754,.977821,.975838,.971088,.962563,.954785,.949048,.941052,.93142,.920812,.90975,.897867,.883856,.870091,.854353,.838166,.820661,.802465,.783308,.763346,.742734,.721608,.699747,.677626,.655245,.632547,.609793,.587044,.56434,.541779,.519529,.497633,.476114,.45503,.43443,.414406,.394974,.376154,.357979,.340443,.323572,.307379,1,1,1,1,1,1,1,1,.999998,.999998,.999996,.999991,.999984,.99997,.999946,.999905,.999815,.999599,.998856,.993704,.986135,.979212,.97869,.977691,.975504,.970133,.962951,.955649,.948405,.940418,.93166,.920881,.909376,.897785,.883844,.869756,.854326,.837732,.820617,.802053,.783195,.763119,.74261,.721344,.699709,.677624,.655114,.632523,.609812,.587052,.564417,.541966,.519751,.497824,.476309,.455271,.434735,.414736,.395317,.376524,.358364,.340852,.323988,.307786,1,1,1,1,1,1,.999999,.999999,.999997,.999996,.999994,.999989,.99998,.999965,.99994,.999895,.999796,.999559,.998638,.992774,.986878,.980297,.978602,.977514,.975026,.969169,.963214,.956267,.947689,.940054,.931637,.920678,.90899,.897349,.883905,.869139,.854177,.837476,.820295,.801977,.782798,.762978,.742418,.721193,.69956,.677402,.655108,.632543,.609804,.587158,.564557,.542096,.519908,.498088,.476632,.455623,.435104,.415161,.395783,.377005,.358843,.341345,.324529,.308355,1,1,1,1,1,.999999,.999999,.999998,.999997,.999992,.999991,.999985,.999977,.999959,.999935,.999878,.999773,.999505,.998284,.992353,.987457,.981665,.978492,.977277,.97436,.968716,.963373,.956629,.947397,.939657,.931339,.920588,.908975,.896712,.883763,.86889,.853731,.837333,.819702,.801738,.782454,.762712,.742024,.721037,.699325,.677359,.65503,.632439,.609869,.587221,.564663,.542328,.52022,.4984,.476997,.456053,.435593,.415658,.3963,.377577,.359473,.342004,.32517,.308997,1,1,1,1,1,.999999,.999998,.999998,.999996,.999993,.999988,.999981,.999971,.999951,.999921,.999863,.999748,.999433,.997681,.99212,.98792,.982864,.978353,.976961,.973451,.968396,.9634,.95668,.947529,.939151,.930747,.920511,.908867,.896142,.883335,.868764,.853025,.837015,.819452,.801249,.782176,.762345,.741843,.720721,.699135,.677194,.654889,.632487,.609902,.587328,.564891,.542567,.520501,.498793,.477442,.456528,.436131,.416273,.39698,.378276,.360176,.342738,.32595,.309803,1,1,1,1,.999999,.999998,.999999,.999997,.999995,.999991,.999985,.999978,.999963,.999942,.999907,.999844,.999715,.999332,.996612,.991974,.988297,.983843,.978349,.97654,.972351,.968109,.96328,.956464,.947779,.938754,.929952,.920253,.90853,.895785,.882679,.868456,.852669,.836406,.819138,.800708,.781803,.761855,.741534,.720405,.698959,.676964,.654827,.632411,.609922,.587477,.565051,.542829,.520889,.499225,.477951,.457148,.436792,.416963,.397723,.379068,.361025,.343608,.326842,.310718,1,1,1,1,1,.999999,.999998,.999995,.999994,.99999,.999983,.999971,.999954,.999932,.999892,.99982,.999675,.99919,.995492,.991911,.98861,.984662,.979221,.975975,.971671,.967788,.963002,.955938,.947965,.938692,.929309,.919781,.908268,.895518,.882022,.867884,.852346,.835746,.818607,.800261,.781335,.761539,.741063,.720116,.698617,.676815,.6547,.632389,.610037,.587591,.565328,.543205,.521293,.499745,.478562,.457776,.437515,.417776,.398586,.379963,.361984,.344616,.327857,.311751,1,1,1,1,1,.999999,.999997,.999996,.999992,.999986,.999977,.999965,.999947,.999916,.999873,.999794,.999628,.998966,.994914,.991849,.988873,.985288,.98017,.975207,.971156,.967476,.962538,.955601,.947978,.938542,.928618,.919056,.90789,.895098,.881352,.867263,.851806,.835168,.818003,.799785,.780633,.76108,.740618,.719795,.698332,.676629,.654544,.632411,.610042,.587805,.565593,.543549,.521793,.500309,.479195,.458546,.438353,.418669,.399557,.381012,.363049,.34571,.329006,.312948,1,1,1,1,1,.999999,.999997,.999993,.99999,.999984,.999972,.99996,.999939,.999906,.999853,.999765,.999567,.998603,.994519,.991794,.989089,.985781,.980956,.974161,.970688,.967064,.96189,.955292,.947848,.938359,.928226,.918214,.907361,.894702,.880834,.8665,.851209,.834627,.817211,.79925,.780131,.760512,.740218,.719264,.698063,.676325,.65445,.632316,.61017,.587988,.565891,.544013,.522305,.500958,.479971,.459376,.439271,.419699,.40062,.382126,.364246,.346967,.330273,.314236,1,1,1,1,.999999,.999998,.999996,.999994,.999988,.999979,.999967,.999952,.999924,.999888,.999833,.999733,.99949,.997946,.994192,.991812,.989274,.986224,.981547,.974,.970269,.966545,.961031,.954921,.947416,.938226,.928003,.91739,.906553,.894191,.880329,.86554,.850476,.834058,.816467,.798509,.779561,.759828,.739738,.718878,.697718,.676138,.654342,.632317,.610292,.588207,.566289,.544443,.522927,.501674,.480765,.460314,.440304,.420782,.401824,.38341,.365538,.348312,.331692,.315688,1,1,1,1,.999999,.999998,.999996,.999993,.999985,.999976,.999961,.999943,.999913,.999872,.999807,.999691,.99939,.996859,.994003,.991808,.989423,.986523,.981783,.974511,.969791,.965933,.960377,.954434,.946803,.938026,.92762,.916545,.905639,.893489,.87982,.864852,.849513,.833311,.815878,.797621,.778938,.759253,.739142,.718479,.697274,.675902,.654135,.632357,.610364,.588497,.566631,.545012,.523579,.502429,.48168,.461304,.441425,.422039,.403135,.384779,.366976,.349796,.333231,.317277,1,1,1,1,.999999,.999998,.999996,.999991,.999983,.999974,.999956,.999932,.999901,.999852,.99978,.999646,.999248,.996193,.993784,.991782,.989539,.986694,.981765,.975135,.969309,.965128,.959788,.953831,.946255,.937664,.927351,.916044,.904715,.892528,.879111,.864256,.848452,.832434,.815129,.796806,.778118,.758668,.738466,.718024,.696958,.675642,.654067,.632325,.610546,.588786,.567123,.545617,.524312,.503348,.482637,.462418,.442657,.423338,.404564,.386277,.368545,.351448,.334906,.318961,1,1,1,.999999,.999999,.999998,.999994,.999989,.999979,.999968,.999949,.999921,.999886,.999833,.999747,.999596,.999029,.995749,.993677,.991724,.98962,.986723,.981515,.975767,.969056,.964124,.959142,.953036,.94565,.937022,.926971,.915515,.903584,.891603,.878212,.863472,.847652,.831398,.814299,.796105,.777231,.757977,.737895,.717415,.696595,.675317,.65398,.632343,.610735,.589076,.56762,.546251,.525165,.504255,.483759,.463666,.443987,.424783,.406042,.387891,.370293,.353221,.336715,.320806,1,1,1,.999999,.999998,.999998,.999993,.999987,.999977,.999964,.999943,.999911,.999867,.999807,.999714,.999531,.998645,.995399,.993512,.991717,.989661,.986652,.981559,.976183,.969411,.963317,.958457,.952091,.944951,.936307,.926454,.915043,.902668,.890462,.877245,.862672,.846823,.830201,.813293,.795306,.776393,.757199,.737324,.716808,.696187,.675094,.653814,.632453,.610885,.589483,.568099,.546975,.525953,.505268,.484936,.464988,.445458,.426314,.40775,.38967,.372098,.355105,.338682,.322825,1,1,1,1,.999999,.999996,.999992,.999983,.999976,.999959,.999933,.999898,.999849,.99978,.999676,.999454,.997884,.995166,.993394,.991723,.989654,.986389,.981632,.976607,.969701,.962555,.957605,.951232,.944099,.935556,.925699,.914492,.902027,.889116,.876093,.861649,.845956,.829238,.81222,.79442,.775657,.756265,.736673,.716372,.695669,.674886,.653728,.632568,.611217,.589929,.568783,.547752,.526931,.506425,.486238,.466425,.446945,.428026,.409536,.391551,.374087,.357155,.340787,.324974,1,1,1,1,.999998,.999996,.99999,.999984,.99997,.999952,.999925,.999886,.999831,.999757,.999633,.999356,.997017,.994868,.993337,.99171,.98958,.985848,.98164,.976711,.969755,.962166,.956609,.950365,.943026,.934693,.92488,.913729,.90135,.887966,.874726,.860474,.844905,.828269,.810905,.793364,.774812,.755478,.735886,.715847,.695231,.674537,.653667,.632527,.611475,.590363,.569462,.548571,.527976,.507634,.487632,.467901,.44868,.429833,.411467,.393568,.376197,.359374,.343034,.327273,1,1,1,.999999,.999998,.999993,.999989,.99998,.999965,.999945,.999913,.999869,.99981,.999723,.999583,.999213,.99654,.99474,.993244,.991671,.989411,.985533,.981616,.976847,.969968,.962315,.955468,.94942,.942016,.933617,.923949,.912899,.900495,.887022,.873283,.859153,.84383,.827325,.809888,.792172,.773832,.754686,.735035,.715297,.694955,.674242,.65366,.632752,.611804,.590993,.570154,.549539,.529087,.508974,.48903,.469599,.450466,.431761,.413508,.395761,.37848,.361679,.345465,.329752,1,1,1,1,.999997,.999994,.999987,.999978,.999961,.999936,.999903,.999855,.999786,.999689,.999527,.998988,.996137,.994527,.993108,.991599,.989084,.985308,.981527,.976677,.970079,.962535,.95449,.948271,.940942,.932422,.922836,.911896,.899632,.886118,.871864,.857719,.842536,.826163,.808849,.79086,.772802,.75386,.734335,.714582,.694543,.674071,.653544,.632922,.612153,.591573,.570951,.55052,.530352,.510311,.490707,.471359,.452396,.433837,.415736,.398052,.380874,.364232,.348023,.332368,1,1,1,.999999,.999998,.999994,.999988,.999976,.999957,.999928,.999891,.999837,.999759,.99965,.999463,.998551,.995879,.994366,.992964,.991479,.988521,.985101,.981482,.976168,.970242,.962585,.95395,.946973,.939686,.931248,.921614,.910765,.898617,.885183,.870772,.856138,.84112,.824962,.807732,.789813,.771638,.753008,.733686,.713927,.694082,.673967,.653549,.633135,.612702,.5922,.571904,.551679,.531678,.511898,.492437,.473239,.454451,.436067,.418054,.400542,.383486,.366848,.350781,.335182,1,1,1,.999999,.999997,.999993,.999985,.999972,.999951,.999919,.999877,.999817,.999733,.999608,.99938,.997685,.995603,.994264,.992911,.991287,.987923,.984871,.981239,.975933,.970149,.962511,.953824,.945699,.938285,.929907,.920343,.909537,.897435,.884056,.869626,.85449,.839459,.823511,.806511,.788752,.77044,.751995,.732962,.713424,.693525,.673798,.653622,.633301,.613224,.592938,.572833,.552904,.53303,.513556,.494215,.475279,.456673,.438411,.420583,.403178,.386178,.369728,.353688,.338147,1,1,1,.999999,.999997,.999991,.999984,.999967,.999944,.999912,.999863,.999796,.999703,.999563,.999279,.997104,.995394,.994111,.992825,.990979,.987529,.984661,.980774,.975758,.969866,.962465,.953678,.944489,.936886,.928356,.91882,.908073,.896092,.882833,.868463,.853212,.837744,.822048,.805333,.787643,.769414,.75083,.732178,.712972,.693227,.673569,.653744,.633739,.613735,.593822,.573916,.554158,.534652,.515248,.496233,.477436,.459009,.440929,.423259,.405951,.389136,.37269,.356789,.341329,1,1,1,.999999,.999996,.999991,.999981,.999966,.999939,.999903,.999847,.999771,.999666,.99951,.999131,.99669,.995147,.993882,.992696,.990474,.987227,.984334,.980153,.975438,.969406,.962238,.953598,.943868,.935356,.926721,.917122,.90643,.89455,.881354,.867131,.851954,.835972,.820331,.803911,.786452,.76842,.749821,.731298,.712393,.692979,.673418,.653859,.634232,.614327,.594732,.575131,.555584,.536346,.517175,.498323,.479744,.461485,.443645,.426061,.408969,.392155,.375921,.36006,.344677,1,1,1,.999999,.999997,.999991,.999979,.99996,.999931,.999891,.999832,.999748,.999629,.999449,.99888,.996305,.995024,.993812,.992508,.989721,.986936,.983936,.979629,.974979,.968928,.96197,.953291,.943458,.933644,.925007,.915388,.904755,.892932,.879831,.865794,.850672,.834591,.818398,.802304,.785151,.76745,.748987,.730325,.711758,.692761,.673417,.653908,.634686,.615168,.595707,.576393,.557198,.538018,.519253,.500555,.48222,.464197,.446414,.429106,.412035,.395508,.379284,.363538,.34822,1,1,1,.999999,.999995,.999989,.999977,.999955,.999924,.999879,.999813,.999722,.99959,.999381,.998335,.996088,.994814,.993709,.99222,.989209,.986575,.983383,.979084,.974272,.968359,.961275,.953025,.943098,.932434,.923101,.913477,.902861,.891059,.878072,.864118,.849188,.833281,.816808,.800596,.783745,.766331,.748123,.729686,.711078,.692527,.673491,.654296,.635113,.616048,.596847,.57772,.558879,.540028,.521371,.502996,.484858,.466997,.449477,.432217,.415426,.398924,.38289,.367206,.351955,1,1,1,.999998,.999996,.999988,.999974,.999953,.999918,.999865,.999791,.99969,.999542,.999293,.997535,.99579,.994609,.993557,.991766,.988767,.986255,.982544,.978541,.973528,.9677,.960596,.952299,.942684,.931653,.921211,.911489,.900818,.889018,.876245,.862406,.847517,.831852,.815367,.798719,.782224,.765167,.747304,.729133,.710485,.692196,.673589,.65477,.635717,.616986,.598119,.579298,.56056,.542163,.523669,.505564,.487642,.469991,.452658,.43562,.418937,.402612,.386633,.371091,.355949,1,1,.999999,.999998,.999995,.999986,.999973,.999948,.999909,.999852,.999769,.999656,.99949,.999186,.997059,.995624,.99451,.993327,.99102,.988379,.985771,.981971,.978051,.972892,.96702,.959965,.951625,.941902,.930951,.91937,.909285,.898562,.886809,.874251,.860597,.845808,.830365,.813972,.79726,.780597,.763854,.746401,.728519,.710203,.691882,.673687,.655275,.636621,.617909,.599473,.581032,.56256,.544295,.526228,.508293,.490652,.473242,.456004,.439212,.422663,.406476,.390647,.375204,.360129,1,1,1,.999999,.999994,.999984,.999969,.99994,.999898,.999837,.999746,.999617,.999438,.999016,.996703,.995302,.994356,.992993,.99039,.988072,.985152,.981447,.977273,.972234,.966113,.959033,.950869,.941217,.930175,.918279,.906941,.896201,.884509,.87192,.85842,.843906,.82873,.812524,.795978,.778979,.76245,.745459,.727966,.710046,.691808,.673739,.655756,.637574,.619153,.600887,.582796,.564748,.546636,.528904,.511252,.493791,.476563,.459695,.442942,.426632,.410558,.394895,.379517,.36456,1,1,1,.999998,.999994,.999984,.999966,.999934,.999887,.999819,.99972,.999578,.999367,.998696,.996353,.995201,.994115,.992665,.989948,.987633,.984331,.980827,.97639,.971327,.965201,.957977,.949712,.940128,.929187,.917237,.904645,.893711,.882112,.869516,.856236,.841929,.826924,.810991,.794686,.777761,.76098,.744384,.727314,.709877,.691988,.674098,.656243,.638603,.620606,.602574,.584694,.567018,.549311,.531673,.514403,.497148,.480177,.463439,.446998,.430743,.414943,.399304,.384121,.369251,1,1,1,.999997,.999992,.999981,.999962,.999927,.999874,.999798,.999691,.999533,.999291,.997909,.996117,.995029,.99388,.992142,.989576,.987185,.983587,.980055,.975487,.970172,.963998,.956738,.948637,.939083,.928169,.916144,.903147,.890916,.879389,.866895,.853826,.839729,.824957,.809472,.793341,.776743,.759808,.743277,.726643,.709685,.692249,.674639,.657008,.639576,.622114,.604471,.586851,.56934,.552135,.534806,.517599,.500765,.484035,.46744,.451212,.43524,.419399,.404083,.388944,.374182,1,1,1,.999998,.999993,.999979,.999958,.999919,.999861,.999774,.999656,.999482,.999195,.997307,.995837,.994722,.993707,.991391,.989169,.986461,.982904,.979062,.974536,.969035,.962653,.955486,.947243,.937747,.926861,.914936,.901835,.888472,.876571,.864223,.851252,.837374,.822985,.807788,.791927,.775702,.758928,.742347,.725914,.709495,.692569,.675363,.658085,.640639,.623698,.606505,.589267,.572008,.554939,.538132,.521211,.504487,.488048,.471807,.455651,.439858,.424332,.408983,.394071,.379402,1,1,1,.999997,.999992,.999978,.999954,.999913,.999844,.999753,.999618,.999424,.999067,.996875,.995659,.994603,.99342,.990874,.988713,.985585,.982193,.978145,.973416,.967801,.961483,.954069,.945704,.936138,.925374,.913395,.900339,.886675,.873512,.861326,.848513,.834956,.82082,.805943,.790574,.774677,.758279,.741807,.725271,.709231,.692874,.676189,.659352,.642296,.62525,.6087,.591823,.575012,.558143,.541491,.525075,.508558,.492277,.47627,.460459,.44474,.4294,.414309,.399421,.384907,1,1,1,.999997,.99999,.999977,.999947,.999902,.999832,.99973,.999577,.999359,.998845,.996554,.995328,.994442,.992919,.990393,.98817,.984855,.981312,.977149,.972137,.966207,.959967,.952454,.943873,.934434,.923813,.911942,.898928,.88512,.871043,.858248,.845666,.832346,.818482,.804029,.788982,.773571,.7577,.741484,.725186,.708915,.693244,.677028,.660656,.644079,.627377,.610804,.594542,.578112,.56165,.545163,.528962,.512926,.496893,.481007,.465397,.450042,.43474,.419831,.405156,.390692,1,1,.999999,.999997,.999989,.999973,.999942,.999891,.999813,.999698,.999532,.999285,.998286,.996295,.995215,.994182,.992032,.989855,.987415,.984047,.98005,.976017,.970845,.964767,.958269,.9506,.942033,.932501,.921807,.910017,.897149,.883414,.869182,.855055,.842687,.829548,.816162,.802072,.787436,.772533,.757043,.741263,.72533,.709262,.693497,.678038,.662128,.646068,.629824,.613437,.597334,.581401,.565372,.549288,.533182,.517405,.501765,.486143,.470675,.455465,.440532,.42563,.411113,.396887,1,1,.999999,.999996,.999989,.99997,.999934,.999879,.999793,.999665,.999481,.999192,.997506,.995926,.995009,.993736,.991298,.989326,.986371,.983199,.979032,.974596,.969364,.963198,.956385,.948509,.939993,.930421,.91959,.90814,.895349,.881699,.867456,.852784,.8395,.826629,.813602,.799983,.785873,.77134,.75648,.74119,.725687,.709997,.694192,.678975,.663673,.648135,.632442,.616477,.600565,.584772,.569202,.553595,.537881,.522193,.506784,.491554,.476349,.461278,.446419,.431913,.417443,.403271,1,1,.999999,.999995,.999986,.999966,.999927,.999867,.999772,.999629,.999423,.999075,.997024,.995773,.994651,.993353,.990822,.988569,.985596,.982182,.977871,.97314,.967584,.961408,.954294,.946398,.937603,.927937,.917305,.905833,.893138,.87977,.86572,.851023,.836801,.823784,.810909,.797886,.784177,.770243,.755925,.741144,.726214,.710971,.695563,.680212,.665304,.650297,.635168,.619796,.604217,.588692,.573254,.557998,.542839,.52747,.512162,.497115,.482296,.467477,.452812,.43831,.424184,.410163,1,1,.999999,.999996,.999984,.999962,.99992,.999852,.999745,.999586,.999354,.998894,.996686,.995485,.994493,.992573,.990323,.987772,.984692,.980887,.976446,.971625,.965717,.959421,.951975,.944086,.935066,.925403,.914814,.903208,.890958,.877817,.863828,.849289,.834872,.820889,.808183,.79566,.782556,.769066,.755386,.741229,.726726,.71217,.697209,.68217,.667203,.652689,.637938,.623262,.60819,.593002,.577817,.562737,.547836,.533036,.518052,.503135,.488422,.473986,.459552,.445282,.431149,.417407,1,1,.999999,.999994,.999983,.999957,.999914,.999835,.999718,.999538,.999275,.998454,.996341,.995246,.994222,.991844,.989829,.986688,.983562,.979638,.974932,.969827,.963621,.957146,.949365,.941398,.932245,.922556,.911949,.900627,.88844,.875544,.862005,.84781,.833372,.819134,.805508,.793339,.780916,.767837,.754858,.741307,.727496,.713386,.699131,.684542,.669878,.655261,.641035,.626685,.612377,.597625,.582805,.56803,.553204,.538684,.524269,.509662,.495119,.480735,.466634,.452593,.438748,.424915,1,1,.999998,.999994,.999982,.999956,.999901,.999818,.999683,.999487,.999185,.997584,.996004,.99505,.993715,.991212,.989057,.985879,.982243,.978206,.973119,.967919,.961343,.954603,.946712,.938378,.929266,.919443,.908911,.897725,.885589,.873254,.859889,.846123,.832094,.817898,.803866,.791061,.779235,.766885,.754292,.741565,.728331,.714861,.701179,.687166,.673012,.658716,.644442,.630472,.616519,.602514,.588172,.573689,.559281,.544768,.530543,.516485,.502303,.4881,.474095,.460245,.446598,.433169,1,1,.999997,.999993,.99998,.999947,.999891,.999794,.999647,.999425,.999062,.997049,.995778,.994652,.992778,.990482,.988004,.984893,.980881,.976605,.971199,.96561,.958925,.951746,.943791,.9352,.926018,.916028,.905724,.894528,.882914,.87074,.857802,.844552,.830857,.816921,.803102,.789625,.77748,.765891,.753908,.741795,.72939,.71644,.703411,.690068,.676438,.662586,.648697,.634732,.620997,.607451,.593765,.579748,.565661,.551594,.537396,.523433,.509708,.495972,.482082,.468427,.45489,.441623,1,1,.999999,.999991,.999977,.99994,.999875,.999769,.999605,.999352,.998882,.996665,.995459,.99438,.992014,.989912,.986796,.983537,.979326,.974792,.96914,.96316,.956222,.948807,.940518,.931755,.922452,.912319,.902227,.891142,.879838,.868047,.855745,.842718,.829827,.816398,.802786,.789396,.776581,.764901,.75371,.742102,.730448,.718337,.705768,.693172,.680153,.666882,.653401,.639837,.626152,.612676,.599435,.586109,.572473,.558715,.544964,.531112,.517416,.503992,.490653,.477162,.463832,.450645,1,1,.999999,.999992,.999973,.999933,.999861,.999741,.999554,.999267,.998411,.996303,.995191,.993945,.991406,.989019,.98572,.982057,.977501,.972605,.966697,.96034,.953031,.945347,.936866,.927917,.918562,.908598,.898486,.887794,.876545,.865379,.853428,.841167,.828649,.815967,.802957,.789865,.777077,.764695,.753544,.742694,.731571,.720304,.70849,.696351,.684134,.67147,.658541,.645376,.632209,.618776,.605511,.592527,.579546,.56631,.55286,.539492,.526005,.512564,.49934,.48636,.473357,.460306,1,1,.999998,.999991,.99997,.999926,.999842,.99971,.999498,.999164,.997464,.99587,.994917,.992911,.990682,.987816,.98441,.980551,.975693,.970263,.963946,.957248,.949765,.941571,.932941,.923873,.914332,.90456,.894394,.884127,.873294,.862503,.851335,.839566,.827776,.815708,.80337,.790821,.778386,.766121,.754193,.74342,.732975,.722326,.711376,.699992,.68818,.676354,.664004,.651449,.6386,.625776,.61266,.599603,.586719,.574078,.561273,.548129,.535155,.522015,.508851,.495837,.48319,.470624,1,1,.999998,.999988,.999965,.999916,.999823,.999669,.999425,.999025,.996874,.99567,.994415,.991991,.989766,.986646,.982812,.978356,.973317,.967612,.96082,.953603,.945969,.937323,.928661,.919507,.909833,.900245,.89039,.880252,.87,.859518,.849163,.838101,.82696,.815688,.804126,.792234,.780356,.768474,.756678,.745159,.734601,.724624,.714339,.703751,.692766,.681267,.669799,.657871,.645577,.633102,.62056,.607737,.59489,.582143,.569779,.55736,.544651,.531942,.519228,.506467,.49371,.481143,1,1,.999998,.999988,.999961,.999902,.999798,.999622,.999341,.998801,.996397,.995225,.993927,.991338,.9885,.985327,.981195,.976383,.970726,.964471,.957386,.949813,.941694,.932681,.923974,.914755,.905026,.895649,.886178,.876277,.866629,.85689,.846934,.836887,.826373,.815885,.805169,.794133,.782812,.771547,.760175,.748896,.737687,.727152,.717601,.70767,.697425,.686788,.675664,.664513,.652962,.640965,.628851,.616551,.604168,.591559,.579009,.566648,.554597,.542382,.529999,.517655,.505254,.492894,1,1,.999997,.999986,.999956,.999889,.999766,.999562,.99924,.997952,.996094,.994979,.992773,.990536,.987214,.983322,.978938,.973714,.967681,.960981,.953144,.945475,.936909,.927734,.918826,.90959,.900085,.890867,.881801,.872565,.863236,.854239,.84506,.835686,.826251,.816284,.806586,.796419,.785914,.77521,.764461,.753599,.742805,.731872,.72137,.711898,.702337,.692383,.682137,.671365,.660479,.649314,.637685,.625899,.613898,.601865,.589582,.577285,.565013,.553106,.54128,.529367,.51732,.505411,1,1,.999997,.999983,.999948,.999869,.999732,.999499,.999111,.997167,.99572,.994349,.991727,.989197,.985883,.981483,.976618,.970597,.964122,.956994,.948639,.9405,.931606,.922385,.913291,.904205,.894938,.88589,.877334,.868754,.860053,.851683,.843447,.834889,.826304,.817441,.808285,.799141,.78957,.7796,.76951,.759155,.748882,.738346,.727629,.717273,.707467,.698283,.688609,.678748,.668371,.657739,.646951,.635765,.624254,.612647,.6009,.589061,.576998,.564991,.553102,.541517,.530027,.518495,1,1,.999997,.999983,.999939,.999851,.999684,.999412,.998925,.996597,.995207,.993603,.990903,.987594,.983814,.979016,.973647,.967048,.960109,.952123,.94356,.9349,.925747,.916566,.907305,.898441,.889629,.881042,.872874,.865064,.857225,.849446,.842063,.834561,.826814,.818875,.810748,.802316,.793699,.784704,.775198,.765643,.755735,.745873,.735526,.725229,.714892,.704807,.695502,.686241,.676633,.666688,.656384,.645871,.635174,.624113,.612788,.601426,.589925,.578399,.566612,.554931,.543383,.532065,1,1,.999996,.999977,.999928,.999824,.999633,.999306,.998429,.996133,.99489,.992316,.989752,.986095,.981564,.976234,.970081,.962779,.955232,.946702,.937716,.928604,.919281,.910167,.901046,.892446,.884183,.876253,.868619,.861545,.854673,.847885,.841074,.83461,.827984,.820945,.813648,.806232,.798444,.790232,.781853,.772897,.763648,.754227,.744542,.734689,.724526,.714204,.704152,.694222,.685143,.67586,.666319,.656415,.646273,.635902,.625399,.614563,.60349,.592413,.581217,.57,.558608,.547242,1,.999999,.999995,.999972,.999915,.99979,.999562,.999168,.997237,.995672,.994074,.99122,.987792,.983822,.978599,.972804,.965718,.958053,.94946,.940503,.931011,.921608,.912409,.903378,.894606,.886369,.878756,.871573,.864862,.858421,.852541,.846802,.841027,.835206,.829628,.82373,.817415,.810655,.803873,.796659,.788887,.78094,.772537,.763507,.754487,.745163,.735572,.725687,.715611,.705398,.695418,.685592,.676518,.667304,.657875,.648182,.638235,.628062,.617813,.607283,.596552,.58577,.575033,.564153,1,1,.999995,.99997,.999898,.999748,.999472,.998969,.996528,.995102,.992701,.989963,.985981,.981194,.975183,.968501,.960502,.952012,.942861,.933376,.923506,.914042,.904921,.896282,.887987,.880341,.873536,.867293,.861556,.856148,.850987,.846352,.841684,.83688,.832036,.827091,.8219,.816206,.810042,.803629,.796918,.789653,.781915,.774014,.76553,.756526,.747669,.738342,.72877,.718942,.708942,.698855,.688933,.679131,.669855,.660811,.651549,.642127,.632454,.622651,.612709,.602606,.592344,.581877,1,.999999,.999993,.999963,.999874,.999691,.99935,.998431,.995873,.994456,.991327,.987798,.983232,.9775,.970828,.962815,.954228,.944752,.935126,.925179,.915102,.905763,.897087,.888933,.881452,.874687,.868716,.863585,.858931,.854662,.850569,.846719,.843151,.839426,.835588,.831443,.827004,.822395,.817254,.81163,.805464,.799124,.792382,.785091,.777315,.76936,.760908,.751957,.743128,.733917,.72434,.714713,.704721,.694835,.684862,.675099,.66557,.656644,.647651,.638581,.629337,.619926,.610358,.600707,1,1,.99999,.999953,.999843,.999613,.999186,.997025,.995317,.99285,.98976,.98527,.979807,.973049,.965228,.956248,.946394,.936324,.926124,.915808,.905942,.89706,.889001,.881755,.875351,.869688,.864736,.860745,.857305,.85419,.851261,.848484,.845642,.842948,.84006,.836901,.833379,.829393,.825103,.820431,.815288,.809575,.803326,.796949,.790174,.782873,.775048,.767139,.758772,.750019,.74112,.732127,.722743,.713225,.703637,.693768,.684016,.674277,.664703,.655328,.64655,.637812,.629036,.620129,1,1,.999988,.999933,.9998,.999508,.998917,.996236,.994617,.991176,.987089,.98188,.974966,.967156,.957914,.947585,.936937,.926318,.915662,.905567,.896223,.888166,.881117,.875079,.869981,.865675,.862091,.859183,.856981,.855065,.853273,.851572,.849782,.847768,.845668,.843345,.840703,.837646,.834094,.83003,.825631,.820873,.815619,.809856,.803578,.797096,.790359,.783152,.775507,.767504,.759411,.750982,.742208,.733383,.724445,.71519,.705827,.69644,.686773,.677242,.667735,.658471,.649236,.640305,1,.999999,.999984,.999918,.999737,.99935,.997576,.995476,.992614,.988817,.983601,.97688,.968694,.959092,.948297,.936831,.925592,.914494,.904159,.894643,.886417,.87962,.874023,.869533,.865967,.863238,.861113,.859527,.858367,.857594,.856882,.856172,.855316,.854197,.852818,.851062,.849046,.846747,.844043,.840842,.837164,.832985,.828344,.823544,.818276,.812543,.806374,.799838,.79317,.786246,.778956,.771297,.763278,.755252,.746984,.738445,.729688,.721045,.712189,.703099,.694045,.68493,.675601,.66648,1,.999999,.999978,.999888,.999639,.999093,.99631,.994405,.990527,.985186,.978518,.969748,.959597,.948104,.935724,.923704,.912023,.901356,.89185,.883847,.87728,.872289,.868583,.865913,.864098,.862993,.862356,.862125,.862107,.862168,.862359,.86249,.86243,.862063,.861431,.860386,.85895,.85709,.854848,.852381,.849503,.846167,.842399,.838194,.833566,.828579,.823464,.817951,.812079,.805873,.79932,.792533,.785715,.778636,.77126,.763618,.755719,.747815,.739825,.731602,.723212,.714845,.706465,.697933,1,.999998,.999969,.999836,.999475,.997943,.995219,.99176,.986663,.979592,.970218,.959155,.946575,.933047,.920022,.907749,.896801,.887506,.880077,.874322,.870126,.867481,.865949,.865293,.865287,.865746,.866502,.867439,.868442,.869382,.870161,.870782,.871303,.871511,.871427,.870978,.870136,.868892,.867248,.865209,.862775,.859944,.857004,.853671,.849984,.845927,.841518,.836774,.83175,.826407,.821001,.815333,.809412,.803238,.796802,.790204,.783457,.776713,.769749,.762596,.755239,.74769,.740127,.732595,1,.999997,.99995,.999744,.999162,.996124,.992844,.987757,.980062,.969642,.957087,.942735,.927747,.913622,.900889,.890115,.881584,.875288,.870926,.868307,.867033,.866972,.867692,.86895,.870549,.87232,.874144,.875947,.877674,.879192,.880478,.881539,.882307,.882739,.882902,.882847,.882461,.881725,.880636,.879197,.877422,.875296,.872849,.870076,.866988,.863637,.860159,.856475,.852525,.848328,.843883,.839198,.834322,.829221,.823907,.818461,.812972,.807316,.801474,.795459,.789276,.783025,.776615,.770223,.999999,.999994,.999909,.999536,.997195,.994123,.988168,.979344,.967003,.951763,.934724,.917948,.902918,.890432,.880902,.874401,.870394,.868503,.868209,.869062,.870725,.873006,.875558,.87823,.880893,.883445,.885832,.888059,.890058,.891782,.893247,.89446,.895397,.896023,.89638,.896433,.896198,.895673,.894865,.893908,.8927,.891224,.889501,.887539,.885336,.882903,.880244,.877373,.874296,.871019,.867549,.863933,.860153,.856355,.852395,.848277,.844006,.839587,.835045,.830378,.825579,.820649,.815592,.810432,.999998,.999988,.999795,.998892,.994635,.98729,.975397,.958508,.938352,.917733,.8998,.885878,.876516,.8712,.869099,.869317,.871112,.87387,.87716,.880682,.884228,.887737,.891076,.894161,.896981,.899543,.901847,.903882,.905672,.907188,.908451,.90948,.910289,.910878,.911259,.91143,.911396,.911154,.910712,.910081,.909266,.908264,.907094,.905752,.904244,.902577,.900799,.898931,.896923,.894782,.892513,.890117,.8876,.884968,.882222,.879369,.876408,.873345,.870183,.866926,.863575,.86016,.856672,.853098,.999991,.999947,.999158,.992842,.980107,.95723,.928231,.901539,.882688,.872588,.869394,.870671,.874458,.879378,.884639,.88977,.894601,.898972,.90293,.906456,.909568,.912329,.91475,.916893,.918774,.920429,.921868,.92311,.924185,.925089,.925842,.926457,.926934,.927285,.927522,.927639,.92765,.927553,.927356,.927061,.926671,.926187,.925617,.924962,.924224,.923409,.922519,.921555,.920521,.919419,.918252,.917021,.915729,.914377,.912967,.911503,.909984,.908414,.906791,.905122,.903401,.901637,.899826,.897972,.987461,.940121,.871507,.898572,.916705,.926425,.931922,.935265,.937431,.938899,.93995,.940717,.941301,.941754,.942111,.942397,.942631,.942823,.942983,.943117,.943231,.943329,.943412,.943484,.943545,.943599,.943644,.943682,.943716,.943744,.943766,.943785,.943799,.943808,.943815,.943818,.943818,.943814,.943807,.943797,.943784,.943769,.943751,.94373,.943707,.943681,.943652,.943623,.943589,.943554,.943518,.943479,.943438,.943396,.943351,.943305,.943257,.943207,.943156,.943104,.943049,.942993,.942936,.942877]},function(e,t,n){const o=n(0),i=n(3),r=n(114),a=n(115),s=n(116),l=n(117),u=n(118),c=n(119),f=n(120);function d(e){this.type="ReflectionProbe",this.enabled=!0,this.changed=new o,this.rgbm=!1,this.set(e);const t=e.ctx;this._ctx=t,this.dirty=!0;const n=this._dynamicCubemap=t.textureCube({width:512,height:512,pixelFormat:this.rgbm?t.PixelFormat.RGBA8:t.PixelFormat.RGBA16F,encoding:this.rgbm?t.Encoding.RGBM:t.Encoding.Linear}),d=[{eye:[0,0,0],target:[1,0,0],up:[0,-1,0]},{eye:[0,0,0],target:[-1,0,0],up:[0,-1,0]},{eye:[0,0,0],target:[0,1,0],up:[0,0,1]},{eye:[0,0,0],target:[0,-1,0],up:[0,0,-1]},{eye:[0,0,0],target:[0,0,1],up:[0,-1,0]},{eye:[0,0,0],target:[0,0,-1],up:[0,-1,0]}].map((e,o)=>(e.projectionMatrix=i.perspective(i.create(),Math.PI/2,1,.1,100),e.viewMatrix=i.lookAt(i.create(),e.eye,e.target,e.up),e.drawPassCmd={name:"ReflectionProbe.sidePass",pass:t.pass({name:"ReflectionProbe.sidePass",color:[{texture:n,target:t.gl.TEXTURE_CUBE_MAP_POSITIVE_X+o}],clearColor:[0,0,0,1],clearDepth:1})},e)),h={aPosition:t.vertexBuffer([[-1,-1],[1,-1],[1,1],[-1,1]]),aTexCoord:t.vertexBuffer([[0,0],[1,0],[1,1],[0,1]])},p=t.indexBuffer([[0,1,2],[0,2,3]]),m=this._octMap=t.texture2D({width:1024,height:1024,pixelFormat:this.rgbm?t.PixelFormat.RGBA8:t.PixelFormat.RGBA16F,encoding:this.rgbm?t.Encoding.RGBM:t.Encoding.Linear}),g=this._reflectionMap=t.texture2D({width:2048,height:2048,min:t.Filter.Linear,mag:t.Filter.Linear,pixelFormat:this.rgbm?t.PixelFormat.RGBA8:t.PixelFormat.RGBA16F,encoding:this.rgbm?t.Encoding.RGBM:t.Encoding.Linear}),v={name:"ReflectionProbe.cubemapToOctMap",pass:t.pass({name:"ReflectionProbe.cubemapToOctMap",color:[m]}),pipeline:t.pipeline({vert:a,frag:s}),attributes:h,indices:p,uniforms:{uTextureSize:m.width,uCubemap:n}},x={name:"ReflectionProbe.convolveOctmapAtlasToOctMap",pass:t.pass({name:"ReflectionProbe.convolveOctmapAtlasToOctMap",color:[m]}),pipeline:t.pipeline({vert:a,frag:l}),attributes:h,indices:p,uniforms:{uTextureSize:64,uSource:g,uSourceSize:g.width,uSourceEncoding:g.encoding,uOutputEncoding:m.encoding}},_={name:"ReflectionProbe.clearOctMapAtlas",pass:t.pass({name:"ReflectionProbe.clearOctMapAtlas",color:[g],clearColor:[0,0,0,0]})},M={name:"ReflectionProbe.blitToOctMapAtlasCmd",pass:t.pass({name:"ReflectionProbe.blitToOctMapAtlasCmd",color:[g]}),pipeline:t.pipeline({vert:a,frag:u}),uniforms:{uSource:m,uSourceSize:m.width},attributes:h,indices:p},S={name:"ReflectionProbe.downsampleFromOctMapAtlasCmd",pass:t.pass({name:"ReflectionProbe.downsampleFromOctMapAtlasCmd",color:[m],clearColor:[0,1,0,1]}),pipeline:t.pipeline({vert:a,frag:c}),uniforms:{uSource:g,uSourceSize:g.width},attributes:h,indices:p},C={name:"ReflectionProbe.prefilterFromOctMapAtlasCmd",pass:t.pass({name:"ReflectionProbe.prefilterFromOctMapAtlasCmd",color:[m],clearColor:[0,1,0,1]}),pipeline:t.pipeline({vert:a,frag:f}),uniforms:{uSource:g,uSourceSize:g.width,uSourceEncoding:g.encoding,uOutputEncoding:m.encoding},attributes:h,indices:p},y=128,b=new Float32Array(4*y);for(let e=0;e<y;e++){const t=r(e,y);b[4*e]=t[0],b[4*e+1]=t[1],b[4*e+2]=0,b[4*e+3]=0}const w=t.texture2D({data:b,width:1,height:y,pixelFormat:t.PixelFormat.RGBA32F,encoding:t.Encoding.Linear});function E(e,n,o){const i=g.width,r=Math.max(64,i/(2<<e+n)),a=i/(2<<n),s=i-Math.pow(2,Math.log2(i)-n),l=2*a-Math.pow(2,Math.log2(2*a)-e);t.submit(M,{viewport:[l,s,r,r],uniforms:{uLevelSize:r,uSourceRegionSize:o}})}function T(e,n,o,i){t.submit(C,{viewport:[0,0,i,i],uniforms:{uSourceMipmapLevel:e,uSourceRoughnessLevel:n,uRoughnessLevel:o,uNumSamples:y,uHammersleyPointSetMap:w}})}this.update=function(e){if(!e)return;this.dirty=!1,d.forEach(o=>{t.submit(o.drawPassCmd,()=>e(o,n.encoding))}),t.submit(v),t.submit(_);E(0,0,m.width);for(let e=0;e<4;e++)o=e,i=0,r=m.width/Math.pow(2,e+1),t.submit(S,{viewport:[0,0,r,r],uniforms:{uMipmapLevel:o,uRoughnessLevel:i}}),E(e+1,0,m.width/Math.pow(2,1+e));var o,i,r;E(5,0,64);for(let e=1;e<=5;e++)T(0,Math.max(0,e-1),e,Math.max(64,m.width/Math.pow(2,e+1))),E(0,e,Math.max(64,m.width/Math.pow(2,1+e)));t.submit(x,{viewport:[0,0,64,64]}),t.submit(M,{viewport:[g.width-64,g.height-64,64,64],uniforms:{uSourceRegionSize:64}})}}d.prototype.init=function(e){this.entity=e},d.prototype.set=function(e){Object.assign(this,e),Object.keys(e).forEach(e=>this.changed.dispatch(e))},e.exports=function(e){return new d(e)}},function(e,t){var n=new Uint32Array(1);function o(e){return n[0]=e,n[0]=(n[0]<<16|n[0]>>16)>>>0,n[0]=(1431655765&n[0])<<1|(2863311530&n[0])>>>1>>>0,n[0]=(858993459&n[0])<<2|(3435973836&n[0])>>>2>>>0,n[0]=(252645135&n[0])<<4|(4042322160&n[0])>>>4>>>0,n[0]=(16711935&n[0])<<8|(4278255360&n[0])>>>8>>>0,2.3283064365386963e-10*n[0]}e.exports=function(e,t){return[e/t,o(e)]}},function(e,t){e.exports="\nattribute vec2 aPosition;\nattribute vec2 aTexCoord;\n\nvarying vec2 vTexCoord;\n\nvoid main() {\n  vTexCoord = aTexCoord;\n  gl_Position = vec4(aPosition, 0.0, 1.0);\n}\n"},function(e,t,n){const o=n(1);e.exports=`\nprecision highp float;\n\n${o.octMapUvToDir}\n\nvarying vec2 vTexCoord;\n\nuniform samplerCube uCubemap;\nuniform float uTextureSize;\n\nvoid main() {\n  vec3 N = octMapUVToDir(vTexCoord, uTextureSize);\n  gl_FragColor = textureCube(uCubemap, N);\n}\n`},function(e,t,n){const o=n(1);e.exports=`\nprecision highp float;\n\n${o.octMapUvToDir}\n${o.octMap}\n${o.rgbm}\n${o.gamma}\n${o.encodeDecode}\n${o.math.PI}\n\nvarying vec2 vTexCoord;\n\nuniform sampler2D uSource;\nuniform int uSourceEncoding;\nuniform float uSourceSize;\nuniform float uTextureSize;\nuniform int uOutputEncoding;\n\nvoid main() {\n  vec3 N = octMapUVToDir(vTexCoord, uTextureSize);\n  vec3 normal = N;\n\n  vec3 up = vec3(0.0, 1.0, 0.0);\n  vec3 right = normalize(cross(up, normal));\n  up = cross(normal,right);\n\n  vec3 sampledColor = vec3(0.0, 0.0, 0.0);\n  float index = 0.0;\n  const float dphi = 2.0 * PI / 180.0 * 2.0;\n  const float dtheta = 0.5 * PI / 64.0 * 2.0;\n  for(float phi = 0.0; phi < 2.0 * PI; phi += dphi) {\n    for(float theta = 0.0; theta < 0.5 * PI; theta += dtheta) {\n      vec3 temp = cos(phi) * right + sin(phi) * up;\n      vec3 sampleVector = cos(theta) * normal + sin(theta) * temp;\n      // in theory this should be sample from mipmap level e.g. 2.0, 0.0\n      // but sampling from prefiltered roughness gives much smoother results\n      vec2 sampleUV = envMapOctahedral(sampleVector, 0.0, 2.0);\n      vec4 color = texture2D( uSource, sampleUV);\n      sampledColor += decode(color, uSourceEncoding).rgb * cos(theta) * sin(theta);\n      index += 1.0;\n    }\n  }\n\n  sampledColor = PI * sampledColor / index;\n  gl_FragColor = encode(vec4(sampledColor, 1.0), uOutputEncoding);\n}\n`},function(e,t){e.exports="\nprecision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform float uLevelSize;\nuniform sampler2D uSource;\nuniform float uSourceSize;\nuniform float uSourceRegionSize;\n\nvoid main() {\n  vec2 uv = vTexCoord;\n  uv *= uSourceRegionSize / uSourceSize;\n\n  gl_FragColor = texture2D(uSource, uv);\n}\n"},function(e,t,n){const o=n(1);e.exports=`\nprecision highp float;\n\n${o.octMapUvToDir}\n${o.octMap}\n\nvarying vec2 vTexCoord;\n\n// uniform float uLevelSize;\nuniform sampler2D uSource;\nuniform float uRoughnessLevel;\nuniform float uMipmapLevel;\n\n// uniform float uSourceSize;\n// uniform float uSourceRegionSize;\n\nvoid main() {\n  vec2 uv = vTexCoord;\n  float width = 2048.0;\n  float maxLevel = 11.0; // this should come from log of size\n  float levelSizeInPixels = pow(2.0, 1.0 + uMipmapLevel + uRoughnessLevel);\n  float levelSize = width / levelSizeInPixels;\n  float roughnessLevelWidth = width / pow(2.0, 1.0 + uRoughnessLevel);\n  float vOffset = (width - pow(2.0, maxLevel - uRoughnessLevel));\n  float hOffset = 2.0 * roughnessLevelWidth - pow(2.0, log2(2.0 * roughnessLevelWidth) - uMipmapLevel);\n  // trying to fix oveflow from atlas..\n  uv = (uv * levelSize - 0.5) / (levelSize - 1.0);\n  uv *= levelSize;\n  uv = (uv + vec2(hOffset, vOffset)) / width;\n  gl_FragColor = texture2D(uSource, uv);\n}\n`},function(e,t,n){const o=n(1);e.exports=`\nprecision highp float;\n\n// Variables\nvarying vec2 vTexCoord;\nuniform float uTextureSize;\nuniform sampler2D uSource;\nuniform int uSourceEncoding;\nuniform sampler2D uHammersleyPointSetMap;\nuniform int uNumSamples;\nuniform float uLevel;\nuniform float uSourceMipmapLevel;\nuniform float uSourceRoughnessLevel;\nuniform float uRoughnessLevel;\nuniform int uOutputEncoding;\n\n// Includes\n${o.math.PI}\n${o.math.saturate}\n${o.octMap}\n${o.octMapUvToDir}\n${o.rgbm}\n${o.gamma}\n${o.encodeDecode}\n\n//Sampled from a texture generated by code based on\n//http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html\nvec2 Hammersley(int i, int N) {\n  return texture2D(uHammersleyPointSetMap, vec2(0.5, (float(i) + 0.5)/float(N))).rg;\n}\n\n//Based on Real Shading in Unreal Engine 4\nvec3 ImportanceSampleGGX(vec2 Xi, float Roughness, vec3 N) {\n  //this is mapping 2d point to a hemisphere but additionally we add spread by roughness\n  float a = Roughness * Roughness;\n  a *= 0.75; // to prevent overblurring as we sample from previous roughness level with smaller number of samples\n  float Phi = 2.0 * PI * Xi.x;\n  float CosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\n  float SinTheta = sqrt(1.0 - CosTheta * CosTheta);\n  vec3 H;\n  H.x = SinTheta * cos(Phi);\n  H.y = SinTheta * sin(Phi);\n  H.z = CosTheta;\n\n  //Tangent space vectors\n  vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n  vec3 tangent = normalize(cross(up, N));\n  vec3 bitangent = normalize(cross(N, tangent));\n\n  //Tangent to World Space\n  return tangent * H.x + bitangent * H.y + N * H.z;\n}\n\n//TODO: optimize this using sign()\n//Source: http://webglinsights.github.io/downloads/WebGL-Insights-Chapter-16.pdf\n\nvec4 textureOctMapLod(sampler2D tex, vec2 uv) {\n  float width = 2048.0;\n  float maxLevel = 11.0; // this should come from log of size\n  float levelSizeInPixels = pow(2.0, 1.0 + uSourceMipmapLevel + uSourceRoughnessLevel);\n  float levelSize = max(64.0, width / levelSizeInPixels);\n  float roughnessLevelWidth = width / pow(2.0, 1.0 + uSourceRoughnessLevel);\n  float vOffset = (width - pow(2.0, maxLevel - uSourceRoughnessLevel));\n  float hOffset = 2.0 * roughnessLevelWidth - pow(2.0, log2(2.0 * roughnessLevelWidth) - uSourceMipmapLevel);\n  // trying to fix oveflow from atlas..\n  uv = (uv * levelSize + 0.5) / (levelSize + 1.0);\n  uv *= levelSize;\n  uv = (uv + vec2(hOffset, vOffset)) / width;\n  return texture2D(uSource, uv);\n}\n\nvec3 PrefilterEnvMap( float roughness, vec3 R ) {\n  vec3 N = R;\n  vec3 V = R;\n  vec3 PrefilteredColor = vec3(0.0);\n  const int NumSamples = 512;\n  float TotalWeight = 0.0;\n  for( int i = 0; i < NumSamples; i++ ) {\n    if (i > uNumSamples) {\n      break;\n    }\n    vec2 Xi = Hammersley( i, uNumSamples );\n    vec3 H = ImportanceSampleGGX( Xi, roughness, N );\n    vec3 L = 2.0 * dot( V, H ) * H - V;\n    float NoL = saturate( dot( N, L ) );\n    if( NoL > 0.0 ) {\n      vec4 color = textureOctMapLod(uSource, envMapOctahedral(L));\n      PrefilteredColor += NoL * decode(color, uSourceEncoding).rgb;\n      TotalWeight += NoL;\n    }\n  }\n  return PrefilteredColor / TotalWeight;\n}\n\nvoid main() {\n  vec3 normal = octMapUVToDir(vTexCoord);\n  vec3 color = PrefilterEnvMap(uRoughnessLevel / 5.0, normal);\n  gl_FragColor = encode(vec4(color, 1.0), uOutputEncoding);\n}\n`},function(e,t,n){const o=n(122),i=n(123),r=n(124),a=n(125),s=n(126),l=n(0);function u(e){this.type="Skybox",this.enabled=!0,this.changed=new l,this.rgbm=!1,this.backgroundBlur=0;const t=this._ctx=e.ctx;this.texture=null,this.diffuseTexture=null,this._dirtySunPosition=!0,this.set(e);const n=[];t.capabilities.maxColorAttachments>1&&n.push("#define USE_DRAW_BUFFERS"),this._drawCommand={name:"Skybox.draw",pipeline:t.pipeline({vert:i,frag:n.join("\n")+"\n"+r,depthTest:!0}),attributes:{aPosition:t.vertexBuffer([[-1,-1],[1,-1],[1,1],[-1,1]])},indices:t.indexBuffer([[0,1,2],[0,2,3]]),uniforms:{uUseTonemapping:!1,uExposure:1}};var u=o();this._skyTexture=t.texture2D({width:512,height:256,pixelFormat:this.rgbm?t.PixelFormat.RGBA8:t.PixelFormat.RGBA16F,encoding:this.rgbm?t.Encoding.RGBM:t.Encoding.Linear,min:t.Filter.Linear,mag:t.Filter.Linear}),this._updateSkyTexture={name:"Skybox.updateSkyTexture",pass:t.pass({name:"Skybox.updateSkyTexture",color:[this._skyTexture],clearColor:[0,0,0,0]}),pipeline:t.pipeline({vert:a,frag:s}),uniforms:{uSunPosition:[0,0,0]},attributes:{aPosition:t.vertexBuffer(u.positions),aTexCoord0:t.vertexBuffer(u.uvs)},indices:t.indexBuffer(u.cells)}}u.prototype.init=function(e){this.entity=e},u.prototype.set=function(e){Object.assign(this,e),e.sunPosition&&(this._dirtySunPosition=!0),Object.keys(e).forEach(e=>this.changed.dispatch(e))},u.prototype.draw=function(e,t){var n=this._ctx;!this.texture&&this._dirtySunPosition&&(this._dirtySunPosition=!1,n.submit(this._updateSkyTexture,{uniforms:{uSunPosition:this.sunPosition,uRGBM:this.rgbm}}));let o=this.texture||this._skyTexture,i=0;t.backgroundMode&&(this.backgroundTexture&&(o=this.backgroundTexture),this.backgroundBlur>0&&(i=this.backgroundBlur,this._reflectionProbe||(this._reflectionProbe=this.entity.renderer.getComponents("ReflectionProbe")[0]),this._reflectionProbe&&(o=this._reflectionProbe._reflectionMap))),n.submit(this._drawCommand,{uniforms:{uProjectionMatrix:e.projectionMatrix,uViewMatrix:e.viewMatrix,uModelMatrix:this.entity.transform.modelMatrix,uEnvMap:o,uEnvMapEncoding:o.encoding,uOutputEncoding:t.outputEncoding,uBackgroundBlur:i,uUseTonemapping:!!t.backgroundMode&&!e.postprocess,uExposure:t.backgroundMode?e.exposure:1}})},e.exports=function(e){if(!e.sunPosition&&!e.texture)throw new Error("Skybox requires either a sunPosition or a texture");return new u(e)}},function(e,t){e.exports=function(e){e=void 0!==e?e:1,Array.isArray(e)||(e=[e,e]);var t=[[-e[0],-e[1],0],[e[0],-e[1],0],[e[0],e[1],0],[-e[0],e[1],0]],n=[0,0,-1],o=[n.slice(),n.slice(),n.slice(),n.slice()];return{positions:t,cells:[[0,1,2],[2,3,0]],uvs:[[0,0],[1,0],[1,1],[0,1]],normals:o}}},function(e,t,n){const o=n(1);e.exports=`\nattribute vec2 aPosition;\n\n${o.math.inverseMat4}\n${o.math.transposeMat3}\n\nuniform mat4 uProjectionMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uModelMatrix;\n\nvarying vec3 wcNormal;\n\nvoid main() {\n  mat4 inverseProjection = inverse(uProjectionMatrix);\n  mat3 inverseModelview = transpose(mat3(uViewMatrix));\n  vec3 unprojected = (inverseProjection * vec4(aPosition, 0.0, 1.0)).xyz;\n  wcNormal = (uModelMatrix * vec4(inverseModelview * unprojected, 1.0)).xyz;\n\n  gl_Position = vec4(aPosition, 0.9999, 1.0);\n}\n`},function(e,t,n){const o=n(1);e.exports=`\n#ifdef USE_DRAW_BUFFERS\n  #extension GL_EXT_draw_buffers : enable\n#endif\n\nprecision highp float;\n\n#define USE_TONEMAPPING\n\n// Variables\n// assuming texture in Linear Space\n// most likely HDR or Texture2D with sRGB Ext\nuniform sampler2D uEnvMap;\nuniform int uEnvMapEncoding;\nuniform int uOutputEncoding;\nuniform float uBackgroundBlur;\n\nvarying vec3 wcNormal;\n\nuniform bool uUseTonemapping;\n#ifdef USE_TONEMAPPING\n  ${o.tonemapUncharted2}\n  uniform float uExposure;\n#endif\n\n// Includes\n${o.math.PI}\n${o.math.TWO_PI}\n\n${o.rgbm}\n${o.gamma}\n${o.encodeDecode}\n${o.envMapEquirect}\n${o.octMap}\n${o.irradiance}\n\nvoid main() {\n  vec3 N = normalize(wcNormal);\n\n  vec4 color = vec4(0.0);\n\n  if (uBackgroundBlur <= 0.0) {\n    color = decode(texture2D(uEnvMap, envMapEquirect(N)), uEnvMapEncoding);\n  } else {\n    color = vec4(getIrradiance(N, uEnvMap, uEnvMapEncoding), 1.0);\n  }\n  #ifdef USE_TONEMAPPING\n    if (uUseTonemapping) {\n      color.rgb *= uExposure;\n      color.rgb = tonemapUncharted2(color.rgb);\n    }\n  #endif\n\n  gl_FragData[0] = encode(color, uOutputEncoding);\n  #ifdef USE_DRAW_BUFFERS\n    gl_FragData[1] = vec4(0.0);\n  #endif\n}\n`},function(e,t){e.exports="\nattribute vec3 aPosition;\nattribute vec2 aTexCoord0;\n\nvarying vec2 vTexCoord0;\n\nvoid main() {\n  gl_Position = vec4(aPosition, 1.0);\n  vTexCoord0 = aTexCoord0;\n}\n"},function(e,t,n){const o=n(1);e.exports=`\nprecision highp float;\n\n${o.math.PI}\n${o.sky}\n${o.rgbm}\n${o.gamma}\n${o.encodeDecode}\n\nuniform vec3 uSunPosition;\n\nvarying vec2 vTexCoord0;\nuniform bool uRGBM;\n\nvoid main() {\n  //Texture coordinates to Normal is Based on\n  //http://gl.ict.usc.edu/Data/HighResProbes/\n  // u=[0,2], v=[0,1],\n  // theta=pi*(u-1), phi=pi*v\n  // (Dx,Dy,Dz) = (sin(phi)*sin(theta), cos(phi), -sin(phi)*cos(theta)).\n\n  float u = vTexCoord0.x;\n  float v = 1.0 - vTexCoord0.y; // uv's a Y flipped in WebGL\n\n  float theta = PI * (u * 2.0 - 1.0);\n  float phi = PI * v;\n\n  float x = sin(phi) * sin(theta);\n  float y = cos(phi);\n  float z = -sin(phi) * cos(theta);\n\n  vec3 N = vec3(x, y, z);\n\n  vec3 color = sky(uSunPosition, N);\n\n   if (uRGBM) {\n     gl_FragColor = encodeRGBM(color);\n  } else {\n    gl_FragColor.rgb = color;\n    gl_FragColor.a = 1.0;\n  }\n}\n`},function(e,t,n){const o=n(0);function i(e){this.type="Overlay",this.enabled=!0,this.changed=new o,this.entity=null,this.dirty=!1,this.x=0,this.y=0,this.width=1,this.height=1,this.texture=null,this.alpha=1,this.set(e)}i.prototype.init=function(e){this.entity=e},i.prototype.set=function(e){Object.assign(this,e),Object.keys(e).forEach(e=>this.changed.dispatch(e))},i.prototype.update=function(){},e.exports=function(e){return new i(e)}},function(e,t,n){const o=n(17),{loadJSON:i,loadImage:r,loadBinary:a}=n(129),{quat:s,utils:l}=n(10),u=["KHR_materials_unlit","KHR_materials_pbrSpecularGlossiness","KHR_texture_transform"],c={ELEMENT_ARRAY_BUFFER:34963,ARRAY_BUFFER:34962,BYTE:5120,UNSIGNED_BYTE:5121,SHORT:5122,UNSIGNED_SHORT:5123,UNSIGNED_INT:5125,FLOAT:5126},f={[c.BYTE]:Int8Array,[c.UNSIGNED_BYTE]:Uint8Array,[c.SHORT]:Int16Array,[c.UNSIGNED_SHORT]:Uint16Array,[c.UNSIGNED_INT]:Uint32Array,[c.FLOAT]:Float32Array},d={[c.BYTE]:1,[c.UNSIGNED_BYTE]:1,[c.SHORT]:2,[c.UNSIGNED_SHORT]:2,[c.UNSIGNED_INT]:4,[c.FLOAT]:4},h={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},p=1179937895,m={JSON:1313821514,BIN:5130562},g={POSITION:"positions",NORMAL:"normals",TANGENT:"tangents",TEXCOORD_0:"texCoords",TEXCOORD_1:"texCoords1",JOINTS_0:"joints",WEIGHTS_0:"weights",COLOR_0:"vertexColors"};function v(e,t){if(e._data)return e;const n=h[e.type];void 0===e.byteOffset&&(e.byteOffset=0),e._bufferView=t[e.bufferView];const o=f[e.componentType],i=d[e.componentType],r=new o(e._bufferView._data.slice(e.byteOffset,e.byteOffset+e.count*n*i));if(e._data=r,void 0!==e.sparse){const i=new(0,f[e.sparse.indices.componentType])(t[e.sparse.indices.bufferView]._data,e.sparse.indices.byteOffset||0,e.sparse.count),r=new o(t[e.sparse.values.bufferView]._data,e.sparse.values.byteOffset||0,e.sparse.count*n);null!==e._data&&(e._data=e._data.slice());let a=0;for(let t=0;t<i.length;t++){let o=i[t]*n;for(let t=0;t<n;t++)e._data[o++]=r[a++]}}return e}function x(e,t,n,o){const i=t.textures[e.index],r=t.images[i.source],a=t.samplers&&t.samplers[i.sampler]?t.samplers[i.sampler]:{};a.minFilter=a.minFilter||n.Filter.LinearMipmapLinear,a.magFilter=a.magFilter||n.Filter.Linear,a.wrapS=a.wrapS||n.Wrap.Repeat,a.wrapT=a.wrapT||n.Wrap.Repeat;const s=a.minFilter!==n.Filter.Nearest&&a.minFilter!==n.Filter.Linear;if(!i._tex){let e=r._img;if((!l.isPowerOfTwo(e.width)||!l.isPowerOfTwo(e.height))&&(a.wrapS!==n.Wrap.Clamp||a.wrapT!==n.Wrap.Clamp||s)){const t=document.createElement("canvas");t.width=l.nextPowerOfTwo(e.width),t.height=l.nextPowerOfTwo(e.height),t.getContext("2d").drawImage(e,0,0,t.width,t.height),e=t}i._tex=n.texture2D({data:e,width:e.width,height:e.height,encoding:o||n.Encoding.Linear,pixelFormat:n.PixelFormat.RGBA8,wrapS:a.wrapS,wrapT:a.wrapT,min:a.minFilter,mag:a.magFilter}),s&&n.update(i._tex,{mipmap:!0,aniso:16})}const u=e.extensions&&e.extensions.KHR_texture_transform,c=e.texCoord;return c||u?{texture:i._tex,texCoord:c||0,...u||{}}:i._tex}function _(e,t,n,o){return e.primitives.map(i=>{const r=[o.geometry(function(e,t,n){let o={};const i=Object.keys(e.attributes).reduce((o,i)=>{const r=g[i];r||console.warn(`glTF Loader: Unknown attribute '${i}'`);const a=v(t.accessors[e.attributes[i]],t.bufferViews);return a.sparse?o[r]=a._data:(a._bufferView._vertexBuffer||(a._bufferView._vertexBuffer=n.vertexBuffer(a._bufferView._data)),o[r]={buffer:a._bufferView._vertexBuffer,offset:a.byteOffset,type:a.componentType,stride:a._bufferView.byteStride}),o},{}),r=t.accessors[e.attributes.POSITION],a=t.accessors[e.indices]&&v(t.accessors[e.indices],t.bufferViews);return o={...o,...i,bounds:[r.min,r.max]},a?(a._bufferView._indexBuffer||(a._bufferView._indexBuffer=n.indexBuffer(a._bufferView._data)),o={...o,indices:{buffer:a._bufferView._indexBuffer,offset:a.byteOffset,type:a.componentType,count:a.count}}):o={...o,count:r._data.length/3},e.mode&&(o={...o,primitive:e.mode}),o}(i,t,n)),void 0!==i.material?o.material(function(e,t,n){let o={baseColor:[1,1,1,1],roughness:1,metallic:1,castShadows:!0,receiveShadows:!0,cullFace:!e.doubleSided};const i=e.pbrMetallicRoughness;i&&(o={...o,baseColor:[1,1,1,1],roughness:1,metallic:1},i.baseColorFactor&&(o.baseColor=i.baseColorFactor),i.baseColorTexture&&(o.baseColorMap=x(i.baseColorTexture,t,n,n.Encoding.SRGB)),i.metallicFactor&&(o.metallic=i.metallicFactor),i.roughnessFactor&&(o.roughness=i.roughnessFactor),i.metallicRoughnessTexture&&(o.metallicRoughnessMap=x(i.metallicRoughnessTexture,t,n)));const r=e.extensions?e.extensions.KHR_materials_pbrSpecularGlossiness:null;return r&&(o={...o,useSpecularGlossinessWorkflow:!0,diffuse:[1,1,1,1],specular:[1,1,1],glossiness:1},r.diffuseFactor&&(o.diffuse=r.diffuseFactor),r.specularFactor&&(o.specular=r.specularFactor),r.glossinessFactor&&(o.glossiness=r.glossinessFactor),r.diffuseTexture&&(o.diffuseMap=x(r.diffuseTexture,t,n,n.Encoding.SRGB)),r.specularGlossinessTexture&&(o.specularGlossinessMap=x(r.specularGlossinessTexture,t,n,n.Encoding.SRGB))),e.normalTexture&&(o.normalMap=x(e.normalTexture,t,n)),e.occlusionTexture&&(o.occlusionMap=x(e.occlusionTexture,t,n)),e.emissiveTexture&&(o.emissiveColorMap=x(e.emissiveTexture,t,n,n.Encoding.SRGB)),e.emissiveFactor&&(o={...o,emissiveColor:[e.emissiveFactor[0],e.emissiveFactor[1],e.emissiveFactor[2],1]}),"BLEND"===e.alphaMode&&(o={...o,depthWrite:!1,blend:!0,blendSrcRGBFactor:n.BlendFactor.SrcAlpha,blendSrcAlphaFactor:n.BlendFactor.One,blendDstRGBFactor:n.BlendFactor.OneMinusSrcAlpha,blendDstAlphaFactor:n.BlendFactor.One}),"MASK"===e.alphaMode&&(o.alphaTest=e.alphaCutoff||.5),e.extensions&&e.extensions.KHR_materials_unlit&&(o={...o,unlit:!0}),o}(t.materials[i.material],t,n)):o.material()];if(i.targets){let n={};const a=i.targets.reduce((e,o)=>{return Object.keys(o).forEach(r=>{const a=g[r]||r;e[a]=e[a]||[];const s=v(t.accessors[o[r]],t.bufferViews);if(e[a].push(s._data),!n[a]){const e=v(t.accessors[i.attributes[r]],t.bufferViews);n[a]=e._data}}),e},{}),s=o.morph({sources:n,targets:a,weights:e.weights});r.push(s)}return r})}class M{constructor(e){this._arrayBuffer=e,this._dataView=new DataView(e),this._byteOffset=0}getPosition(){return this._byteOffset}getLength(){return this._arrayBuffer.byteLength}readUint32(){const e=this._dataView.getUint32(this._byteOffset,!0);return this._byteOffset+=4,e}readUint8Array(e){const t=new Uint8Array(this._arrayBuffer,this._byteOffset,e);return this._byteOffset+=e,t}skipBytes(e){this._byteOffset+=e}}function S(e){if(e instanceof ArrayBuffer){const n=function(e){const t=new M(e),n=t.readUint32();if(n!==p)throw new Error(`Unexpected magic: ${n}`);const o=t.readUint32();if(2!==o)throw new Error(`Unsupported version: ${o} `);const i=t.readUint32();if(i!==t.getLength())throw new Error(`Length in header does not match actual data length: ${i} != ${t.getLength()}`);const r=t.readUint32();if(t.readUint32()!==m.JSON)throw new Error("First chunk format is not JSON");const a=t.readUint8Array(r);let s;if("undefined"!=typeof TextDecoder)s=(new TextDecoder).decode(a);else{let e="";const t=a.byteLength;for(let n=0;n<t;n++)e+=String.fromCharCode(a[n]);s=e}let l=null;for(;t.getPosition()<t.getLength();){const e=t.readUint32();switch(t.readUint32()){case m.JSON:throw new Error("Unexpected JSON chunk");case m.BIN:l=t.readUint8Array(e);break;default:t.skipBytes(e)}}return{json:s,bin:l}}(e);return{json:JSON.parse(n.json),bin:(t=n.bin,t.buffer.slice(t.byteOffset,t.byteLength+t.byteOffset))}}var t;return{json:e}}function C(e){return!(e.length<5)&&"data:"===e.substr(0,5)}function y(e){const t=atob(e.split(",")[1]),n=t.length,o=new Uint8Array(new ArrayBuffer(n));for(let e=0;e<n;e++)o[e]=t.charCodeAt(e);return o.buffer}const b={enabledCameras:[0],enabledScene:void 0,includeCameras:!1,includeLights:!1};e.exports=async function(e,t,n={}){const l=Object.assign({},b,n),f=t._ctx,d=o.extname(e),p=o.dirname(e),m=".glb"===d,{json:g,bin:x}=S(m?await a(e):await i(e));if(g.extensionsRequired){const e=g.extensionsRequired.filter(e=>!u.includes(e));e.length&&console.warn("glTF loader: unsupported extensions",e)}const M=parseInt(g.asset.version);(!M||M<2)&&console.warn(`glTF Loader: Invalid or unsupported version: ${g.asset.version}`);for(let e of g.buffers)m?e._data=x:C(e.uri)?e._data=y(e.uri):e._data=await a(o.join(p,e.uri));for(let e of g.bufferViews){const t=g.buffers[e.buffer]._data;void 0===e.byteOffset&&(e.byteOffset=0),e._data=t.slice(e.byteOffset,e.byteOffset+e.byteLength),e.target===c.ELEMENT_ARRAY_BUFFER?e._indexBuffer=f.indexBuffer(e._data):e.target===c.ARRAY_BUFFER&&(e._vertexBuffer=f.vertexBuffer(e._data))}if(g.images)for(let e of g.images)if(m){const t=g.bufferViews[e.bufferView];t.byteOffset=t.byteOffset||0;const n=g.buffers[t.buffer]._data.slice(t.byteOffset,t.byteOffset+t.byteLength),o=new Blob([n],{type:e.mimeType}),i=URL.createObjectURL(o);e._img=await r({url:i,crossOrigin:"anonymous"})}else C(e.uri)?e._img=await r({url:e.uri,crossOrigin:"anonymous"}):e._img=await r({url:o.join(p,e.uri).replace(/%/g,"%25"),crossOrigin:"anonymous"});return(g.scenes||[{}]).map((e,n)=>(e.root=t.entity([t.transform({enabled:l.enabledScene||n===(g.scene||0)})]),e.root.name=e.name||`scene_${n}`,e.entities=g.nodes.reduce((e,n,o)=>{const i=function(e,t,n,o,i,r){const a=[];if(a.push(i.transform(e.matrix?{position:[e.matrix[12],e.matrix[13],e.matrix[14]],rotation:s.fromMat4(s.create(),e.matrix),scale:[Math.hypot(e.matrix[0],e.matrix[1],e.matrix[2]),Math.hypot(e.matrix[4],e.matrix[5],e.matrix[6]),Math.hypot(e.matrix[8],e.matrix[9],e.matrix[10])]}:{position:e.translation||[0,0,0],rotation:e.rotation||[0,0,0,1],scale:e.scale||[1,1,1]})),r.includeCameras&&Number.isInteger(e.camera)){const n=t.cameras[e.camera],s=r.enabledCameras.includes(e.camera);"orthographic"===n.type?a.push(i.camera({enabled:s,name:n.name||`camera_${e.camera}`,projection:"orthographic",near:n.orthographic.znear,far:n.orthographic.zfar,left:-n.orthographic.xmag/2,right:n.orthographic.xmag/2,top:n.orthographic.ymag/2,bottom:n.orthographic.ymag/2})):a.push(i.camera({enabled:s,name:n.name||`camera_${e.camera}`,near:n.perspective.znear,far:n.perspective.zfar||1/0,fov:n.perspective.yfov,aspect:n.perspective.aspectRatio||o.gl.drawingBufferWidth/o.gl.drawingBufferHeight}))}e.entity=i.entity(a),e.entity.name=e.name||`node_${n}`;let l=null;if(Number.isInteger(e.skin)){const n=t.skins[e.skin],o=v(t.accessors[n.inverseBindMatrices],t.bufferViews);let r=[];for(let e=0;e<o._data.length;e+=16)r.push(o._data.slice(e,e+16));l=i.skin({inverseBindMatrices:r})}if(Number.isInteger(e.mesh)){const r=_(t.meshes[e.mesh],t,o,i);if(1===r.length)return r[0].forEach(t=>{e.entity.addComponent(t)}),l&&e.entity.addComponent(l),e.entity;{const t=r.map((t,o)=>{const r=i.entity(t);return r.name=`node_${n}_${o}`,r.transform.set({parent:e.entity.transform}),l&&r.addComponent(l),r});return[e.entity].concat(t)}}return e.entity}(n,g,o,f,t,l);return i.length?i.forEach(t=>e.push(t)):e.push(i),e},[]),g.nodes.forEach((t,n)=>{const o=g.nodes[n],i=o.entity.transform;o.entity.transform.parent||o.entity.transform.set({parent:e.root.transform}),t.children&&t.children.forEach(e=>{g.nodes[e].entity.transform.set({parent:i})})}),g.nodes.forEach(e=>{if(void 0!==e.skin){const t=g.skins[e.skin].joints.map(e=>g.nodes[e].entity);1===g.meshes[e.mesh].primitives.length?e.entity.getComponent("Skin").set({joints:t}):e.entity.transform.children.forEach(e=>{e.entity.getComponent("Skin").set({joints:t})})}}),g.animations&&g.animations.forEach(n=>{const o=function(e,t,n){const o=e.channels.map(n=>{const o=e.samplers[n.sampler],i=v(t.accessors[o.input],t.bufferViews),r=v(t.accessors[o.output],t.bufferViews),a=t.nodes[n.target.node].entity,s=[],l=r._data;let u=h[r.type];"weights"===n.target.path&&(u=a.getComponent("Morph").weights.length);for(let e=0;e<l.length;e+=u)1===u&&s.push([l[e]]),2===u&&s.push([l[e],l[e+1]]),3===u&&s.push([l[e],l[e+1],l[e+2]]),4===u&&s.push([l[e],l[e+1],l[e+2],l[e+3]]);return{input:i._data,output:s,interpolation:o.interpolation,target:a,path:n.target.path}});return n.animation({channels:o,autoplay:!0,loop:!0})}(n,g,t);e.root.addComponent(o)}),t.update(),e))}},function(e,t,n){e.exports={load:n(130),loadBinary:n(23),loadImage:n(21),loadText:n(16),loadJSON:n(25)}},function(e,t,n){var o=n(21),i=n(23),r=n(16),a=n(25),s=n(8);e.exports=s(function(e,t){var n={},s={},l=!1,u=0,c=Object.keys(e),f=c.length;function d(){try{l?t(s,null):t(null,n)}catch(e){console.log(e),console.log(e.stack)}}c.forEach(function(t){function c(e,o){e?(l=!0,s[t]=e):n[t]=o,++u===f&&d()}var h=e[t];h.image?o(h.image,c):h.text?r(h.text,c):h.json?a(h.json,c):h.binary?i(h.binary,c):c(new Error("pex-io/load unknown resource type "+Object.keys(h)),null)}),0===c.length&&d()})},function(e,t,n){const o=n(1);e.exports=`\n// Variables\nattribute vec3 aPosition;\n\n#ifdef USE_NORMALS\nattribute vec3 aNormal;\n#endif\n\n#ifdef USE_TANGENTS\nattribute vec4 aTangent;\nvarying vec4 vTangentView;\n#endif\n\n#ifdef USE_TEXCOORD_0\nattribute vec2 aTexCoord0;\n#endif\n\n#ifdef USE_TEXCOORD_1\nattribute vec2 aTexCoord1;\n#endif\n\n#ifdef USE_INSTANCED_OFFSET\nattribute vec3 aOffset;\n#endif\n\n#ifdef USE_INSTANCED_SCALE\nattribute vec3 aScale;\n#endif\n\n#ifdef USE_INSTANCED_ROTATION\nattribute vec4 aRotation;\n#endif\n\n#ifdef USE_INSTANCED_COLOR\nattribute vec4 aColor;\n#endif\n\n#ifdef USE_VERTEX_COLORS\nattribute vec4 aVertexColor;\n#endif\n\n#if defined(USE_VERTEX_COLORS) || defined(USE_INSTANCED_COLOR)\nvarying vec4 vColor;\n#endif\n\n#ifdef USE_DISPLACEMENT_MAP\nuniform sampler2D uDisplacementMap;\nuniform mediump float uDisplacement;\n#endif\n\n#ifdef USE_SKIN\nattribute vec4 aJoint;\nattribute vec4 aWeight;\nuniform mat4 uJointMat[NUM_JOINTS];\n#endif\n\nuniform mat4 uProjectionMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uModelMatrix;\nuniform mat3 uNormalMatrix;\nuniform mat4 uInverseViewMatrix;\n\nuniform float uPointSize;\n\nvarying vec3 vNormalWorld;\nvarying vec3 vNormalView;\nvarying vec2 vTexCoord0;\n#ifdef USE_TEXCOORD_1\nvarying vec2 vTexCoord1;\n#endif\nvarying vec3 vPositionWorld;\nvarying vec3 vPositionView;\n\n// Includes\n${o.math.transposeMat4}\n${o.math.quatToMat4}\n\nvoid main() {\n  vec4 position = vec4(aPosition, 1.0);\n  vec3 normal = vec3(0.0, 0.0, 0.0);\n  vec2 texCoord = vec2(0.0, 0.0);\n\n#ifdef USE_NORMALS\n  normal = aNormal;\n#endif\n\n#ifdef USE_TANGENTS\n  vec4 tangent = aTangent;\n#endif\n\n#ifdef USE_TEXCOORD_0\n  texCoord = aTexCoord0;\n#endif\n\n  vTexCoord0 = texCoord;\n\n#ifdef USE_TEXCOORD_1\n  vTexCoord1 = aTexCoord1;\n#endif\n\n#ifdef USE_DISPLACEMENT_MAP\n  float h = texture2D(uDisplacementMap, aTexCoord0).r;\n  position.xyz += uDisplacement * h * normal;\n#endif\n\n#ifdef USE_INSTANCED_SCALE\n  position.xyz *= aScale;\n#endif\n\n#ifdef USE_INSTANCED_ROTATION\n  mat4 rotationMat = quatToMat4(aRotation);\n  position = rotationMat * position;\n\n  normal = vec3(rotationMat * vec4(normal, 0.0));\n#endif\n\n#ifdef USE_INSTANCED_OFFSET\n  position.xyz += aOffset;\n#endif\n\n#if defined(USE_VERTEX_COLORS) && defined(USE_INSTANCED_COLOR)\n  vColor = aVertexColor * aColor;\n#else\n  #ifdef USE_INSTANCED_COLOR\n    vColor = aColor;\n  #endif\n\n  #ifdef USE_VERTEX_COLORS\n    vColor = aVertexColor;\n  #endif\n#endif\n\n  vPositionWorld = vec3(uModelMatrix * position);\n  vPositionView = vec3(uViewMatrix * vec4(vPositionWorld, 1.0));\n\n#ifdef USE_SKIN\n   mat4 skinMat =\n    aWeight.x * uJointMat[int(aJoint.x)] +\n    aWeight.y * uJointMat[int(aJoint.y)] +\n    aWeight.z * uJointMat[int(aJoint.z)] +\n    aWeight.w * uJointMat[int(aJoint.w)];\n\n  vNormalView = vec3(uViewMatrix * skinMat * vec4(normal, 0.0));\n\n  #ifdef USE_TANGENTS\n    vTangentView.xyz = vec4(uViewMatrix * skinMat * vec4(tangent, 0.0));\n    vTangentView.w = tangent.w;\n  #endif\n\n  vNormalWorld = normalize(vec3(uInverseViewMatrix * vec4(vNormalView, 0.0)));\n\n  gl_Position = uProjectionMatrix * uViewMatrix * skinMat * position;\n#else\n  vNormalView = vec3(uNormalMatrix * normal);\n\n  #ifdef USE_TANGENTS\n    vTangentView.xyz = vec3(uNormalMatrix * tangent.xyz);\n    vTangentView.w = tangent.w;\n  #endif\n\n  vNormalWorld = normalize(vec3(uInverseViewMatrix * vec4(vNormalView, 0.0)));\n\n  gl_Position = uProjectionMatrix * vec4(vPositionView, 1.0);\n#endif\n  gl_PointSize = uPointSize;\n}\n`},function(e,t,n){const o=n(1);e.exports=`\n#extension GL_OES_standard_derivatives : require\n#ifdef USE_DRAW_BUFFERS\n  #extension GL_EXT_draw_buffers : enable\n#endif\n\nprecision mediump float;\n\n// Variables\nuniform highp mat4 uInverseViewMatrix;\nuniform highp mat4 uViewMatrix;\nuniform highp mat3 uNormalMatrix;\nuniform highp mat4 uModelMatrix;\n\nuniform vec3 uCameraPosition;\n\nuniform int uOutputEncoding;\n\n#ifdef USE_TONEMAPPING\n  ${o.tonemapUncharted2}\n  uniform float uExposure;\n#endif\n\nvarying vec3 vNormalWorld;\nvarying vec3 vNormalView;\n\nvarying vec2 vTexCoord0;\n#ifdef USE_TEXCOORD_1\n  varying vec2 vTexCoord1;\n#endif\n\nvarying highp vec3 vPositionWorld;\nvarying highp vec3 vPositionView;\n\n#ifdef USE_TANGENTS\n  varying vec4 vTangentView;\n#endif\n\n#if defined(USE_VERTEX_COLORS) || defined(USE_INSTANCED_COLOR)\n  varying vec4 vColor;\n#endif\n\nstruct PBRData {\n  mat4 inverseViewMatrix;\n  vec2 texCoord0;\n  vec2 texCoord1;\n  vec3 normalView;\n  vec4 tangentView;\n  vec3 positionWorld;\n  vec3 positionView;\n  vec3 eyeDirView;\n  vec3 eyeDirWorld;\n  vec3 normalWorld; // N, world space\n  vec3 viewWorld; // V, view vector from position to camera, world space\n  float NdotV;\n\n  vec3 baseColor;\n  vec3 emissiveColor;\n  float opacity;\n  float roughness; // roughness value, as authored by the model creator (input to shader)\n  float metallic; // metallic value at the surface\n  float linearRoughness; // roughness mapped to a more linear change in the roughness (proposed by [2])\n  vec3 f0; // Reflectance at normal incidence\n  float clearCoatLinearRoughness;\n  vec3 clearCoatNormal;\n  vec3 reflectionWorld;\n  vec3 directColor;\n  vec3 diffuseColor; // color contribution from diffuse lighting\n  vec3 specularColor; // color contribution from specular lighting\n  vec3 indirectDiffuse; // contribution from IBL light probe and Ambient Light\n  vec3 indirectSpecular; // contribution from IBL light probe and Area Light\n};\n\n// Includes\n${o.math.PI}\n${o.math.saturate}\n${o.rgbm}\n${o.gamma}\n${o.encodeDecode}\n${o.textureCoordinates}\n${o.baseColor}\n\n#ifndef USE_UNLIT_WORKFLOW\n  // Lighting\n  ${o.octMap}\n  ${o.depthUnpack}\n  ${o.normalPerturb}\n  ${o.irradiance}\n  ${o.shadowing}\n  ${o.brdf}\n  ${o.clearCoat}\n  ${o.indirect}\n  ${o.direct}\n  ${o.lightAmbient}\n  ${o.lightDirectional}\n  ${o.lightPoint}\n  ${o.lightSpot}\n  ${o.lightArea}\n\n  // Material and geometric context\n  ${o.emissiveColor}\n  ${o.alpha}\n  ${o.ambientOcclusion}\n  ${o.normal}\n  ${o.metallicRoughness}\n  ${o.specularGlossiness}\n#endif\n\nvoid main() {\n  vec3 color;\n\n  PBRData data;\n  data.texCoord0 = vTexCoord0;\n\n  #ifdef USE_TEXCOORD_1\n    data.texCoord1 = vTexCoord1;\n  #endif\n\n  #ifdef USE_UNLIT_WORKFLOW\n    getBaseColor(data);\n\n    color = data.baseColor;\n  #else\n    data.inverseViewMatrix = uInverseViewMatrix;\n    data.positionWorld = vPositionWorld;\n    data.positionView = vPositionView;\n    // TODO: is normalization needed for normalView, tangentView, normalWorld?\n    data.normalView = normalize(vNormalView);\n    data.normalView *= float(gl_FrontFacing) * 2.0 - 1.0;\n    #ifdef USE_TANGENTS\n      data.tangentView = normalize(vTangentView);\n      data.tangentView *= float(gl_FrontFacing) * 2.0 - 1.0;\n    #endif\n    data.normalWorld = normalize(vNormalWorld);\n    data.normalWorld *= float(gl_FrontFacing) * 2.0 - 1.0;\n    data.eyeDirView = normalize(-vPositionView);\n    data.eyeDirWorld = vec3(uInverseViewMatrix * vec4(data.eyeDirView, 0.0));\n    data.indirectDiffuse = vec3(0.0);\n    data.indirectSpecular = vec3(0.0);\n    data.opacity = 1.0;\n\n    getNormal(data);\n    getEmissiveColor(data);\n\n    #ifdef USE_METALLIC_ROUGHNESS_WORKFLOW\n      getBaseColor(data);\n      getRoughness(data);\n      // TODO: avoid disappearing highlights at roughness 0\n      // data.roughness = 0.004 + 0.996 * data.roughness;\n      data.roughness = clamp(data.roughness, MIN_ROUGHNESS, 1.0);\n      getMetallic(data);\n\n      // Compute F0 for both dielectric and metallic materials\n      data.f0 = 0.16 * uReflectance * uReflectance * (1.0 - data.metallic) + data.baseColor.rgb * data.metallic;\n      data.diffuseColor = data.baseColor * (1.0 - data.metallic);\n      data.specularColor = mix(data.f0, data.baseColor, data.metallic);\n    #endif\n    #ifdef USE_SPECULAR_GLOSSINESS_WORKFLOW\n      getBaseColorAndMetallicRoughnessFromSpecularGlossiness(data);\n      data.diffuseColor = data.baseColor * (1.0 - data.metallic);\n    #endif\n\n    #ifdef USE_ALPHA_MAP\n      #ifdef USE_ALPHA_MAP_TEX_COORD_TRANSFORM\n        vec2 alphaTexCoord = getTextureCoordinates(data, ALPHA_MAP_TEX_COORD_INDEX, uAlphaMapTexCoordTransform);\n      #else\n        vec2 alphaTexCoord = getTextureCoordinates(data, ALPHA_MAP_TEX_COORD_INDEX);\n      #endif\n      data.opacity *= texture2D(uAlphaMap, alphaTexCoord).r;\n    #endif\n    #ifdef USE_ALPHA_TEST\n      alphaTest(data);\n    #endif\n\n    data.linearRoughness = data.roughness * data.roughness;\n\n    #ifdef USE_CLEAR_COAT\n      data.clearCoatLinearRoughness = uClearCoatRoughness * uClearCoatRoughness;\n      data.f0 = mix(data.f0, f0ClearCoatToSurface(data.f0), uClearCoat);\n      data.roughness = max(data.roughness, uClearCoatRoughness);\n\n      getClearCoatNormal(data);\n    #endif\n\n    // view vector in world space\n    data.viewWorld = normalize(uCameraPosition - vPositionWorld);\n\n    data.NdotV = abs(dot(data.normalWorld, data.viewWorld)) + FLT_EPS;\n\n    float ao = 1.0;\n    #ifdef USE_OCCLUSION_MAP\n      #ifdef USE_OCCLUSION_MAP_TEX_COORD_TRANSFORM\n        vec2 aoTexCoord = getTextureCoordinates(data, OCCLUSION_MAP_TEX_COORD_INDEX, uOcclusionMapTexCoordTransform);\n      #else\n        vec2 aoTexCoord = getTextureCoordinates(data, OCCLUSION_MAP_TEX_COORD_INDEX);\n      #endif\n      ao *= texture2D(uOcclusionMap, aoTexCoord).r;\n    #endif\n    #ifdef USE_AO\n      vec2 vUV = vec2(gl_FragCoord.x / uScreenSize.x, gl_FragCoord.y / uScreenSize.y);\n      ao *= texture2D(uAO, vUV).r;\n    #endif\n\n    //TODO: No kd? so not really energy conserving\n    //we could use disney brdf for irradiance map to compensate for that like in Frostbite\n    #ifdef USE_REFLECTION_PROBES\n      data.reflectionWorld = reflect(-data.eyeDirWorld, data.normalWorld);\n      EvaluateLightProbe(data, ao);\n    #endif\n    #if NUM_AMBIENT_LIGHTS > 0\n      #pragma unroll_loop\n      for (int i = 0; i < NUM_AMBIENT_LIGHTS; i++) {\n        EvaluateAmbientLight(data, uAmbientLights[i], ao);\n      }\n    #endif\n    #if NUM_DIRECTIONAL_LIGHTS > 0\n      #pragma unroll_loop\n      for (int i = 0; i < NUM_DIRECTIONAL_LIGHTS; i++) {\n        EvaluateDirectionalLight(data, uDirectionalLights[i], uDirectionalLightShadowMaps[i]);\n      }\n    #endif\n    #if NUM_POINT_LIGHTS > 0\n      #pragma unroll_loop\n      for (int i = 0; i < NUM_POINT_LIGHTS; i++) {\n        EvaluatePointLight(data, uPointLights[i], uPointLightShadowMaps[i]);\n      }\n    #endif\n    #if NUM_SPOT_LIGHTS > 0\n      #pragma unroll_loop\n      for (int i = 0; i < NUM_SPOT_LIGHTS; i++) {\n        EvaluateSpotLight(data, uSpotLights[i], uSpotLightShadowMaps[i]);\n      }\n    #endif\n    #if NUM_AREA_LIGHTS > 0\n      #pragma unroll_loop\n      for (int i = 0; i < NUM_AREA_LIGHTS; i++) {\n        EvaluateAreaLight(data, uAreaLights[i], ao);\n      }\n    #endif\n    color = data.emissiveColor + data.indirectDiffuse + data.indirectSpecular + data.directColor;\n    #ifdef USE_TONEMAPPING\n      color.rgb *= uExposure;\n      color.rgb = tonemapUncharted2(color.rgb);\n    #endif\n  #endif // USE_UNLIT_WORKFLOW\n\n  gl_FragData[0] = encode(vec4(color, 1.0), uOutputEncoding);\n  #ifdef USE_DRAW_BUFFERS\n    gl_FragData[1] = encode(vec4(data.emissiveColor, 1.0), uOutputEncoding);\n  #endif\n  #ifdef USE_BLEND\n    gl_FragData[0].a = data.opacity;\n  #endif\n}\n`},function(e,t,n){const o=n(1);e.exports=`\n// Variables\nattribute vec3 aPosition;\n\n#ifdef USE_NORMALS\nattribute vec3 aNormal;\n#endif\n\n#ifdef USE_TEXCOORD_0\nattribute vec2 aTexCoord0;\n#endif\n\n#ifdef USE_TEXCOORD_1\nattribute vec2 aTexCoord1;\n#endif\n\n#ifdef USE_INSTANCED_OFFSET\nattribute vec3 aOffset;\n#endif\n\n#ifdef USE_INSTANCED_SCALE\nattribute vec3 aScale;\n#endif\n\n#ifdef USE_INSTANCED_ROTATION\nattribute vec4 aRotation;\n#endif\n\n#ifdef USE_INSTANCED_COLOR\nattribute vec4 aColor;\n#endif\n\n#ifdef USE_VERTEX_COLORS\nattribute vec4 aVertexColor;\n#endif\n\n#if defined(USE_VERTEX_COLORS) || defined(USE_INSTANCED_COLOR)\nvarying vec4 vColor;\n#endif\n\n#ifdef USE_SKIN\nattribute vec4 aJoint;\nattribute vec4 aWeight;\nuniform mat4 uJointMat[NUM_JOINTS];\n#endif\n\n#ifdef USE_DISPLACEMENT_MAP\nuniform sampler2D uDisplacementMap;\nuniform float uDisplacement;\n#endif\n\nuniform mat4 uProjectionMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uModelMatrix;\nuniform mat3 uNormalMatrix;\n\nuniform float uPointSize;\n\nfloat uDisplacementShadowStretch = 1.3;\n\nvarying vec3 vNormalView;\nvarying vec2 vTexCoord0;\n#ifdef USE_TEXCOORD_1\nvarying vec2 vTexCoord1;\n#endif\nvarying vec3 vPositionView;\n\n// Includes\n${o.math.transposeMat4}\n${o.math.quatToMat4}\n\nvoid main() {\n  vec4 position = vec4(aPosition, 1.0);\n  vec3 normal = vec3(0.0, 0.0, 0.0);\n  vec2 texCoord = vec2(0.0, 0.0);\n  vec4 positionView = vec4(0.0);\n\n  #ifdef USE_NORMALS\n    normal = aNormal;\n  #endif\n\n  #ifdef USE_TEXCOORD_0\n    texCoord = aTexCoord0;\n  #endif\n\n  vTexCoord0 = texCoord;\n\n  #ifdef USE_TEXCOORD_1\n    vTexCoord1 = aTexCoord1;\n  #endif\n\n  #ifdef USE_DISPLACEMENT_MAP\n    float h = texture2D(uDisplacementMap, aTexCoord0).r;\n    position.xyz += uDisplacement * h * normal * uDisplacementShadowStretch;\n  #endif\n\n  #ifdef USE_INSTANCED_SCALE\n    position.xyz *= aScale;\n  #endif\n\n  #ifdef USE_INSTANCED_ROTATION\n    mat4 rotationMat = quatToMat4(aRotation);\n    position = rotationMat * position;\n    normal = vec3(rotationMat * vec4(normal, 0.0));\n  #endif\n\n  #ifdef USE_INSTANCED_OFFSET\n    position.xyz += aOffset;\n  #endif\n\n  #if defined(USE_VERTEX_COLORS) && defined(USE_INSTANCED_COLOR)\n    vColor = aVertexColor * aColor;\n  #else\n    #ifdef USE_INSTANCED_COLOR\n      vColor = aColor;\n    #endif\n\n    #ifdef USE_VERTEX_COLORS\n      vColor = aVertexColor;\n    #endif\n  #endif\n\n  #ifdef USE_SKIN\n    mat4 skinMat =\n      aWeight.x * uJointMat[int(aJoint.x)] +\n      aWeight.y * uJointMat[int(aJoint.y)] +\n      aWeight.z * uJointMat[int(aJoint.z)] +\n      aWeight.w * uJointMat[int(aJoint.w)];\n\n    positionView = uViewMatrix * skinMat * position;\n  #else\n    positionView = uViewMatrix * uModelMatrix * position;\n  #endif\n\n  gl_Position = uProjectionMatrix * positionView;\n  gl_PointSize = uPointSize;\n\n  vPositionView = positionView.xyz;\n  vNormalView = normalize(uNormalMatrix * normal);\n}\n`},function(e,t,n){const o=n(1);e.exports=`\nprecision highp float;\n\n// Variables\nvarying vec3 vNormalView;\nvarying vec2 vTexCoord0;\n#ifdef USE_TEXCOORD_1\n  varying vec2 vTexCoord1;\n#endif\nvarying vec3 vPositionView;\n\n#if defined(USE_VERTEX_COLORS) || defined(USE_INSTANCED_COLOR)\n  varying vec4 vColor;\n#endif\n\nstruct PBRData {\n  vec2 texCoord0;\n  vec2 texCoord1;\n  float opacity;\n};\n\n// Includes\n${o.textureCoordinates}\n${o.baseColor}\n${o.alpha}\n${o.depthPack}\n\nvoid main() {\n  PBRData data;\n  data.texCoord0 = vTexCoord0;\n\n  #ifdef USE_TEXCOORD_1\n    data.texCoord1 = vTexCoord1;\n  #endif\n\n  getBaseColor(data);\n\n  #ifdef USE_ALPHA_MAP\n    #ifdef ALPHA_MAP_TEX_COORD_TRANSFORM\n      vec2 alphaTexCoord = getTextureCoordinates(data, ALPHA_MAP_TEX_COORD_INDEX, uAlphaMapTexCoordTransform);\n    #else\n      vec2 alphaTexCoord = getTextureCoordinates(data, ALPHA_MAP_TEX_COORD_INDEX);\n    #endif\n    data.opacity *= texture2D(uAlphaMap, alphaTexCoord).r;\n  #endif\n\n  #ifdef USE_ALPHA_TEST\n    alphaTest(data);\n  #endif\n\n  float far = 10.0; // TODO: hardcoded far for depth pass\n  gl_FragColor = packDepth(length(vPositionView) / far);\n}\n`},function(e,t,n){const o=n(1);e.exports=`\nprecision highp float;\n\n// Variables\nvarying vec3 vNormalView;\nvarying vec2 vTexCoord0;\n#ifdef USE_TEXCOORD_1\n  varying vec2 vTexCoord1;\n#endif\nvarying vec3 vPositionView;\n\n#if defined(USE_VERTEX_COLORS) || defined(USE_INSTANCED_COLOR)\n  varying vec4 vColor;\n#endif\n\nstruct PBRData {\n  vec2 texCoord0;\n  vec2 texCoord1;\n  float opacity;\n};\n\n// Includes\n${o.textureCoordinates}\n${o.baseColor}\n${o.alpha}\n\nvoid main() {\n  PBRData data;\n  data.texCoord0 = vTexCoord0;\n\n  #ifdef USE_TEXCOORD_1\n    data.texCoord1 = vTexCoord1;\n  #endif\n\n  getBaseColor(data);\n\n  #ifdef USE_ALPHA_MAP\n    #ifdef USE_ALPHA_MAP_TEX_COORD_TRANSFORM\n      vec2 alphaTexCoord = getTextureCoordinates(data, ALPHA_MAP_TEX_COORD_INDEX, uAlphaMapTexCoordTransform);\n    #else\n      vec2 alphaTexCoord = getTextureCoordinates(data, ALPHA_MAP_TEX_COORD_INDEX);\n    #endif\n    data.opacity *= texture2D(uAlphaMap, alphaTexCoord).r;\n  #endif\n\n  #ifdef USE_ALPHA_TEST\n    alphaTest(data);\n  #endif\n\n  vec3 normal = vNormalView;\n  normal *= float(gl_FrontFacing) * 2.0 - 1.0;\n\n  gl_FragColor = vec4(normal * 0.5 + 0.5, 1.0);\n}\n`},function(e,t){e.exports="\nattribute vec2 aPosition;\nattribute vec2 aTexCoord0;\n\nuniform vec4 uBounds; // x, y, width, height\n\nvarying vec2 vTexCoord;\n\nvoid main() {\n  vec2 pos = aPosition;\n  pos = (pos + 1.0) / 2.0; // move from -1..1 to 0..1\n  pos = vec2(\n    uBounds.x + pos.x * uBounds.z,\n    uBounds.y + pos.y * uBounds.w\n  );\n  pos = pos * 2.0 - 1.0;\n  gl_Position = vec4(pos, 0.0, 1.0);\n  vTexCoord = aTexCoord0;\n}\n"},function(e,t){e.exports="\nprecision highp float;\n\nvarying vec2 vTexCoord;\nuniform sampler2D uTexture;\nvoid main() {\n    gl_FragColor = texture2D(uTexture, vTexCoord);\n}\n"},function(e,t){e.exports="\nattribute vec3 aPosition;\n\nuniform mat4 uProjectionMatrix;\nuniform mat4 uViewMatrix;\nuniform mat4 uModelMatrix;\n\nvoid main () {\n  gl_Position = uProjectionMatrix * uViewMatrix * uModelMatrix * vec4(aPosition, 1.0);\n}\n"},function(e,t){e.exports="\nprecision mediump float;\n\nvoid main () {\n  gl_FragData[0] = vec4(1.0, 0.0, 0.0, 1.0);\n}\n"}])});